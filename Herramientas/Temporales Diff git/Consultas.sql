-- MySQL dump 10.17  Distrib 10.3.18-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: pitagoras_testing_3
-- ------------------------------------------------------
-- Server version	10.3.18-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping routines for database 'pitagoras_testing_3'
--
/*!50003 DROP FUNCTION IF EXISTS `buscarCiudadNombreByID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `buscarCiudadNombreByID`(
	`param_id` INT
) RETURNS tinytext CHARSET latin1
    DETERMINISTIC
    COMMENT 'Retorna el nombre de la cuidad por si id'
BEGIN
RETURN (
		SELECT
			C.ciu_nombre
		FROM
			ciudades C
		WHERE 
			C.ciu_id = param_id);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `buscarComunaNombreByID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `buscarComunaNombreByID`(
	`param_id` INT

) RETURNS tinytext CHARSET latin1
    DETERMINISTIC
    COMMENT 'Retorna el nombre de la comuna por si id'
BEGIN		
	RETURN (
		SELECT
			C.comu_nombre
		FROM
			comunas C
		WHERE 
			C.comu_id = param_id);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `CursorGetTextoPorTipoDocumento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `CursorGetTextoPorTipoDocumento`(
	`param_numero_cheque` INT


) RETURNS varchar(500) CHARSET latin1
    DETERMINISTIC
BEGIN 
  DECLARE texto VARCHAR(500) DEFAULT '';DECLARE finished INTEGER DEFAULT 0;DECLARE id_producto_inventario VARCHAR(50);DECLARE inventario_documentos CURSOR FOR (
          SELECT 
            CONCAT(IF(D.tipo_doc_ref = 33, 'F', IF(D.tipo_doc_ref = 61, 'NC', 'ND')) , D.num_documento_ref) AS id_producto_inventario 
          FROM detalle_pago_proveedores AS D WHERE D.num_cheque = param_numero_cheque
                                    );DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN inventario_documentos;ciclo: LOOP
    
    FETCH inventario_documentos INTO id_producto_inventario;
    
    IF finished = 1 THEN 
      LEAVE ciclo;
    END IF;
    
    SET texto = CONCAT(texto, ' ',id_producto_inventario);
    END LOOP ciclo;
  CLOSE inventario_documentos;
  
  RETURN texto;
  
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCAnteriorLineaKardex` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCAnteriorLineaKardex`(
	`param_id_kardex` INT,
	`param_id_producto` INT



) RETURNS int(11)
BEGIN
  RETURN (SELECT K.kardex_id FROM kardex AS K WHERE K.kardex_id < param_id_kardex AND K.id_producto = param_id_producto ORDER BY K.kardex_id DESC LIMIT 1);END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCCatidadPagosMovimiento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCCatidadPagosMovimiento`(
	`param_id` INT
) RETURNS int(11)
BEGIN
  return (SELECT count(*) FROM pagos_movimientos AS P WHERE P.id_movimiento = param_id);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCCodigoCheque` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `FUNCCodigoCheque`() RETURNS int(11)
BEGIN
  RETURN (SELECT D.codigo_documento FROM documentos_tributarios AS D WHERE D.codigo_documento = 5 LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCCuentaContablePagoMovimiento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `FUNCCuentaContablePagoMovimiento`(
	`param_id_pago_movimiento` INT,
	`param_lanza_errores` ENUM('Y','N')
) RETURNS int(11)
BEGIN
  DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('FUNCCuentaContablePagoMovimiento param_id_pago_movimiento:', param_id_pago_movimiento, ' param_lanza_errores:', param_lanza_errores);
  DECLARE forma_pago_var INT(11);
  DECLARE id_cta_banco_var INT(11);
  
  
  DECLARE cuenta_contable_transbank_debito INT(11); -- tipo pago 2
  DECLARE cuenta_contable_transbank_credito INT(11); -- tipo pago 1
  DECLARE cuenta_contable_caja INT(11);   -- tipo pago 0
  DECLARE cuenta_contable_documento_por_cobrar INT(11);   -- tipo pago 3 cheque
  
  SELECT
      E.cta_contable_caja,
      E.cta_contable_transbank_debito,
      E.cta_contable_transbank_credito,
      E.cta_contable_documentos_por_cobrar
    INTO
      cuenta_contable_caja,
      cuenta_contable_transbank_debito,
      cuenta_contable_transbank_credito,
      cuenta_contable_documento_por_cobrar
    FROM empresas AS E
    LIMIT 1;
    
     -- si hay alguna cuenta sin valor, saltara un error
    IF cuenta_contable_transbank_debito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA DEBITO', 'S');
  	END IF;
     IF cuenta_contable_transbank_credito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA CREDITO', 'S');
  	END IF;
     IF cuenta_contable_documento_por_cobrar IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable DOCUMENTOS POR COBRAR', 'S');
  	END IF;
    IF cuenta_contable_caja IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable CAJA', 'S');
  	END IF;
              
  IF (SELECT COUNT(1) FROM pagos_movimientos AS P WHERE P.id = param_id_pago_movimiento LIMIT 1) > 0 THEN
    SELECT
      P.forma_pago,
      P.id_cta_banco
    INTO
      forma_pago_var,
      id_cta_banco_var
    FROM pagos_movimientos AS P
    WHERE P.id = param_id_pago_movimiento LIMIT 1;
    
    IF forma_pago_var = 0 THEN
      RETURN cuenta_contable_caja;
    ELSEIF forma_pago_var = 2 THEN
      RETURN cuenta_contable_transbank_debito;
    ELSEIF  forma_pago_var = 1 THEN
      RETURN cuenta_contable_transbank_credito;
    ELSEIF forma_pago_var = 4 THEN
      IF id_cta_banco_var = 0 THEN
        CALL errorCR(contexto_var, 'No se encontro el id del banco para esta transferencia', param_lanza_errores);
        RETURN NULL;
      END IF;
      RETURN (SELECT CC.cta_contable FROM ctas_ctes_bancos AS CC WHERE CC.id_cta_cte_banco = id_cta_banco_var LIMIT 1);
    ELSEIF forma_pago_var = 3 OR forma_pago_var = 5 THEN
      RETURN cuenta_contable_documento_por_cobrar;
    ELSE
      CALL errorCR(contexto_var, 'No se identifico el tipo de pago', param_lanza_errores);
      RETURN NULL;
    END IF;
    
  ELSE
    CALL errorCR(contexto_var, 'No se encontro el id del pago', param_lanza_errores);
    RETURN NULL;
  END IF;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCDiarioOrigen` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `FUNCDiarioOrigen`(
	`param_id_detalle_diario` INT






) RETURNS varchar(50) CHARSET latin1
BEGIN
  DECLARE tipo_movimiento_var VARCHAR (50);
  DECLARE debe_var INT(11);
  DECLARE haber_var INT(11);
  DECLARE cta_contable INT(11);
  
  DECLARE cta_contable_proveedor INT(11);
  DECLARE cta_contable_cliente INT(11);

  SELECT
    E.cta_contable_proveedores,
    E.cta_contable_clientes
  INTO
    cta_contable_proveedor,
    cta_contable_cliente
  FROM empresas AS E
  LIMIT 1;
     
  SELECT
    D.tipo_dte,
    D.debe,
    D.haber,
    D.cuenta_contable
  INTO
    tipo_movimiento_var,
    debe_var,
    haber_var,
    cta_contable
  FROM contab_diario_detalle AS D 
  WHERE 
    D.id = param_id_detalle_diario 
  LIMIT 1;

  IF cta_contable = cta_contable_proveedor THEN
    IF tipo_movimiento_var <> '61' THEN
      IF haber_var <> 0 THEN
        RETURN 'COMPRA';
      ELSEIF debe_var <> 0 THEN
        RETURN 'PAGOPROVEEDORPARCIAL';
      END IF;
    ELSE 
      IF haber_var <> 0 THEN
        RETURN 'PAGOPROVEEDORPARCIAL';
      ELSEIF debe_var <> 0 THEN
        RETURN 'COMPRA';
      END IF;
    END IF;
  ELSEIF cta_contable = cta_contable_cliente THEN
    RETURN 'LASVENTAS';
  ELSEIF (SELECT COUNT(1) FROM ctas_ctes_bancos AS CCB WHERE CCB.cta_contable = cta_contable) > 0 THEN
    IF haber_var <> 0 THEN
      RETURN 'PAGOPROVEEDOR';
    END IF;
  ELSE
     RETURN 'NOESPESIFICADO';
  END IF;
  
  RETURN NULL;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCDocumentoTributarioDisponibleCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCDocumentoTributarioDisponibleCompra`(
	`param_codigo_documento` CHAR(2)
) RETURNS char(1) CHARSET latin1
    COMMENT 'fuera de uso'
BEGIN
  DECLARE id_documento_tributario_var INT(11);
  
  IF TRIM(param_codigo_documento) = '' THEN
    RETURN '0';
  END IF;
  
  SET id_documento_tributario_var = (SELECT D.id FROM documentos_tributarios AS D WHERE D.codigo_documento = param_codigo_documento LIMIT 1);
  
  IF id_documento_tributario_var IS NOT NULL THEN
    RETURN (SELECT D.disponible_compra FROM documentos_tributarios AS D WHERE D.id = id_documento_tributario_var LIMIT 1);
  ELSE
    RETURN '0';
  END IF;

  RETURN '0';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCFechaDesdeTexto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCFechaDesdeTexto`(
	`param_fecha_texto` VARCHAR(20)


) RETURNS date
    DETERMINISTIC
    COMMENT 'yyyy-MM-dd'
BEGIN
  RETURN IF(param_fecha_texto = '' OR param_fecha_texto IS NULL, NULL, param_fecha_texto);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCGetEstadoPeriodoContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCGetEstadoPeriodoContable`(
	`param_mes` INT,
	`param_ano` INT

) RETURNS int(11)
    DETERMINISTIC
    COMMENT 'Devulve si el mes y año contable esta habierto o cerrado 0 =abierto; 1=cerrado'
BEGIN
  DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('GetEstadoPeriodoContable param_mes: ', param_mes, ' param_ano: ', param_ano);

  IF param_mes > 12 OR param_mes < 1 THEN
    CALL errorCR(contexto_var, 'El mes no esta entre el 1 y el 12', 'Y');
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM contab_control_mes_contable AS CCMC WHERE CCMC.ano = param_ano LIMIT 1) THEN
    CALL errorCR(contexto_var, 'No se encuentra el año indicado en los registros', 'Y');
  END IF;
  
  RETURN (
    SELECT
      (
        CASE param_mes
          WHEN 1 THEN CCMC.ene
          WHEN 2 THEN CCMC.feb
          WHEN 3 THEN CCMC.mar
          WHEN 4 THEN CCMC.abr
          WHEN 5 THEN CCMC.may
          WHEN 6 THEN CCMC.jun
          WHEN 7 THEN CCMC.jul
          WHEN 8 THEN CCMC.ago
          WHEN 9 THEN CCMC.sep
          WHEN 10 THEN CCMC.oct
          WHEN 11 THEN CCMC.nov
          WHEN 12 THEN CCMC.dic
        END
      ) AS estado_periodo
    FROM contab_control_mes_contable AS CCMC WHERE CCMC.ano = param_ano LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCGetIDComprobante` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCGetIDComprobante`(
	`param_tipo` CHAR(1),
	`param_numero` INT,
	`param_fecha` DATE


) RETURNS int(11)
    DETERMINISTIC
BEGIN
             
  RETURN (SELECT 
              E.id 
            FROM contab_diario_cabecera AS E 
            WHERE 
              UPPER(E.tipo_comprobante) = UPPER(param_tipo)
              AND E.numero_comprobante = param_numero
               AND YEAR(E.fecha_comprobante) = YEAR(param_fecha)
            LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCGetsCuentaContableAnalisis` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCGetsCuentaContableAnalisis`(
	`param_cuenta_contable` VARCHAR(100)
) RETURNS char(1) CHARSET latin1
BEGIN 
  IF EXISTS (SELECT 1 FROM ctas_contables AS C WHERE C.cta_contable = param_cuenta_contable AND C.analisis = '1' LIMIT 1) THEN
    RETURN '1';
  END IF;

  RETURN '0';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCidCajaDesdeMAC` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCidCajaDesdeMAC`(
	`param_mac` VARCHAR(100)
) RETURNS int(11)
BEGIN
  DECLARE id_caja int(11) DEFAULT (SELECT C.id_caja FROM cajas AS C WHERE C.mac_address_asignada = param_mac LIMIT 1);
  RETURN IFNULL(id_caja, 0);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCIDCiudadDesdeIDComuna` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCIDCiudadDesdeIDComuna`(
	`param_id` INT

) RETURNS int(11)
BEGIN	
	RETURN (SELECT 
		C.ciu_id AS id
	FROM ciudades AS C
		INNER JOIN ciudcom AS R
			ON C.ciu_id = R.ciu_id
	WHERE
		R.comu_id = param_id
  LIMIT 1);END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCIDComprobanteConciliadoDesdeCartola` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `FUNCIDComprobanteConciliadoDesdeCartola`() RETURNS int(11)
BEGIN
  return 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCIDCuentaCorrienteDesdeCuentaContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `FUNCIDCuentaCorrienteDesdeCuentaContable`(
	`param_cuenta_contable` VARCHAR(50)
) RETURNS int(11)
BEGIN
  RETURN (SELECT CCB.cta_contable FROM ctas_ctes_bancos AS CCB WHERE CCB.cta_contable = param_cuenta_contable LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCidMovimientoVentaDesdeNumeroTipo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCidMovimientoVentaDesdeNumeroTipo`(
	`param_numero_documento` INT,
	`param_tipo_documento` INT
) RETURNS int(11)
    DETERMINISTIC
BEGIN
  RETURN (
    SELECT
      E.id
    FROM encabezado_movimientos AS E
    WHERE 
    E.tipo_documento = param_tipo_documento
    AND E.numero_documento = param_numero_documento
    LIMIT 1
  );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCIdProductoDesdeIDKarex` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCIdProductoDesdeIDKarex`(
	`param_id_kardex` INT

) RETURNS int(11)
    DETERMINISTIC
BEGIN
  RETURN (SELECT K.id_producto FROM kardex AS K WHERE K.kardex_id = param_id_kardex LIMIT 1);END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCIDSiguienteCabeceraContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCIDSiguienteCabeceraContable`() RETURNS int(11)
    DETERMINISTIC
BEGIN
  RETURN (SELECT IFNULL( MAX(enc_con.id), 0) + 1 FROM contab_diario_cabecera AS enc_con);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCidSucursalDesdeMAC` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCidSucursalDesdeMAC`(
	`param_mac` VARCHAR(50)
) RETURNS int(11)
    DETERMINISTIC
BEGIN
  return (SELECT R.local_id FROM relacion_sucursal_pc AS R WHERE R.mac_address = param_mac LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCInsertaRelacionCompraPagoPorID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `FUNCInsertaRelacionCompraPagoPorID`(
	`param_id_diario_detalle` INT
) RETURNS int(11)
BEGIN

INSERT INTO ttemp_libro_cuenta_corriente 
  (
    fecha_comprobante, 
    fecha_comprobante_mostrar, 
    id_comprobante,
    id_diario,
    tipo_comprobante,
    numero_comprobante,
    documento,
    tipo_dte,
    numero_dte,
    rut,
    cuenta_contable,
    glosa_comprobante,
    debe,
    haber
  )
   SELECT 
    R.fecha_documento_1,
    C.fecha_comprobante,
    C.id AS id_comprobante,
    param_id_diario_detalle,
    C.tipo_comprobante,
    C.numero_comprobante,
    D.documento,
    D.tipo_dte,
    D.numero_dte,
    D.rut,
    D.cuenta_contable,
    C.glosa_comprobante,
    D.debe,
    D.haber
  FROM contab_diario_detalle AS D
    INNER JOIN contab_diario_cabecera AS C
      ON D.id_diario_cabecera = C.id
    INNER JOIN relacion_comprobantes_compra_pagos_dte AS R
      ON D.id = R.id_contab_diario_detalle_2
    WHERE
    C.vigente = '1'
    AND R.id_contab_diario_detalle_1 = param_id_diario_detalle
   ORDER BY 
    fecha_comprobante;
  
  RETURN param_id_diario_detalle;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCInvertirTipoMovimientoKardex` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `FUNCInvertirTipoMovimientoKardex`(
	`param_tipo` CHAR(1)
) RETURNS char(1) CHARSET latin1
BEGIN
  IF param_tipo = '-' THEN
    RETURN '+';
  END IF;
  
  IF param_tipo = '+' THEN
    RETURN '-';
  END IF;
  
  CALL errorCR(CONCAT('FUNCInvertirTipoMovimientoKardex param_tipo: ', param_tipo), 'El sinbolo ingresado no corresponde', 'Y');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCNombrePersonalizadoBodegaDesdeID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCNombrePersonalizadoBodegaDesdeID`(
	`param_id` INT
) RETURNS varchar(120) CHARSET latin1
    COMMENT 'Devuelte el nombre compuesto de una bodega'
BEGIN
  DECLARE nombre varchar(120) DEFAULT (SELECT CONCAT(B.numero_bodega, ".-", B.nombre_bodega) FROM bodegas AS B WHERE B.id = param_id);
  RETURN nombre;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCNombreProveedorDesdeRUT` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCNombreProveedorDesdeRUT`(
	`param_rut` VARCHAR(50)
) RETURNS varchar(100) CHARSET latin1
    DETERMINISTIC
BEGIN
  RETURN (SELECT P.razon_social FROM proveedores AS P WHERE P.rut = param_rut);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCNombreUnidadDesdeId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCNombreUnidadDesdeId`(
	`param_id` INT
) RETURNS varchar(150) CHARSET latin1
    DETERMINISTIC
BEGIN
  DECLARE descripcion varchar(150) DEFAULT (SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = param_id);
  RETURN IFNULL(descripcion, "SIN UNIDAD");
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCSiguienteNumeroBodegaPorSucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCSiguienteNumeroBodegaPorSucursal`(
	`param_sucursal` INT

) RETURNS int(11)
BEGIN
  RETURN IFNULL((SELECT MAX(B.numero_bodega) + 1 FROM bodegas AS B WHERE B.id_sucursal = param_sucursal), 1);END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCSiguienteNumeroComprobante` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCSiguienteNumeroComprobante`(
	`param_tipo_asiento` CHAR(1)




) RETURNS int(11)
    DETERMINISTIC
BEGIN
  RETURN (
    SELECT 
      IFNULL( 
        MAX(enc_con.numero_comprobante), 
        IF(param_tipo_asiento = 'T' OR param_tipo_asiento = 't' , 1, 0)
      ) + 1 
    FROM contab_diario_cabecera AS enc_con 
    WHERE 
      enc_con.tipo_comprobante = param_tipo_asiento
      AND YEAR(enc_con.fecha_comprobante) = YEAR(NOW()));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCSiguienteNumeroComprobanteDesdeFecha` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCSiguienteNumeroComprobanteDesdeFecha`(
	`param_tipo_asiento` CHAR(1),
	`param_fecha` DATE

) RETURNS int(11)
    DETERMINISTIC
BEGIN
  RETURN (
    SELECT 
      IFNULL( 
        MAX(enc_con.numero_comprobante), 
        IF(param_tipo_asiento = 'T' OR param_tipo_asiento = 't' , 1, 0)
      ) + 1 
    FROM contab_diario_cabecera AS enc_con 
    WHERE 
      enc_con.tipo_comprobante = param_tipo_asiento
      AND YEAR(enc_con.fecha_comprobante) = YEAR(param_fecha));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCStockPorBodegaPorProducto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCStockPorBodegaPorProducto`(
	`param_id_producto` INT,
	`param_id_bodega` INT

) RETURNS float(20,4)
BEGIN
  DECLARE entradas_var FLOAT(20,4);DECLARE salidas_var FLOAT(20,4);SELECT
   SUM(K.entrada),
   SUM(K.salida)
  INTO 
    entradas_var,
    salidas_var
  FROM kardex AS K 
  WHERE 
    K.id_producto = param_id_producto 
    AND K.bodega_id = param_id_bodega;RETURN IFNULL((entradas_var - salidas_var), 0);END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCSumarDebeHaberDependiendoCuenta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `FUNCSumarDebeHaberDependiendoCuenta`(
	`param_debe` INT,
	`param_haber` INT,
	`param_cuenta_contable` VARCHAR(50)
) RETURNS int(11)
BEGIN

  DECLARE inicio_cuenta_var CHAR(1) DEFAULT SUBSTRING(param_cuenta_contable, 1, 1);


  IF inicio_cuenta_var = '2' OR inicio_cuenta_var = '3' OR inicio_cuenta_var = '1' THEN -- solo el 1 esta verificado que esta bien
    RETURN param_debe - param_haber;
  ELSE
    RETURN param_haber - param_debe;
  END IF;
  
  
  /*
  string cuenta_contable_string = cuenta_contable.ToString();

  string inicio_cuenta_contable = cuenta_contable_string.Substring(0, 1);
  if (inicio_cuenta_contable == "2"  || inicio_cuenta_contable == "3")
      return saldo + debe - haber;
  else 
      return saldo + haber - debe ;
      */

  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCTipoDocumentoTextoAbreviadoCorta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `FUNCTipoDocumentoTextoAbreviadoCorta`(
	`param_tipo_documento` INT
) RETURNS tinytext CHARSET latin1
    DETERMINISTIC
    COMMENT 'Devuelve la abreviacion de un documento basandose en el tipo (int)'
BEGIN
  DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('FUNCTipoDocumentoTextoAbreviadoCorta param_tipo_documento: ', param_tipo_documento);
  DECLARE documento_texto_var TINYTEXT DEFAULT (
                                                    SELECT 
                                                      D.descripcion_documento_abreviada_2 
                                                    FROM 
                                                      documentos_tributarios AS D 
                                                    WHERE 
                                                      D.codigo_documento = param_tipo_documento
                                                    LIMIT 1
                                                      );
                                                          
  IF documento_texto_var IS NULL THEN
    CALL errorCR(contexto_var, 'No se encontro el documento', 'N');
    RETURN 'Desconocido';
  END IF;                             
                                                          
  RETURN documento_texto_var;
  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `FUNCValidarCuentaContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `FUNCValidarCuentaContable`(
	`param_cuenta_contable` INT
) RETURNS int(11)
    COMMENT 'Se usa justo antes de guardar o actualizar'
BEGIN
  
  DECLARE contexto_var VARCHAR(300) DEFAULT CONCAT('FUNCValidarCuentaContable param_cuenta_contable: ', param_cuenta_contable);
  
  DECLARE habilitada_var INT(11) DEFAULT 0;
  DECLARE imputable_var INT(11) DEFAULT 0;
  DECLARE id_cuenta_contable_var INT(11);
  
  SET id_cuenta_contable_var = ( SELECT C.id_cta_contable FROM ctas_contables AS C WHERE C.cta_contable = param_cuenta_contable LIMIT 1 );
  
  IF id_cuenta_contable_var IS NULL THEN
    CALL errorCR(contexto_var, 'No se encontro la Cuenta Contable', 'Y');
  ELSE
    SELECT
      CC.habilitada,
      CC.imputable
    INTO
      habilitada_var,
      imputable_var
    FROM ctas_contables AS CC
    WHERE 
      CC.id_cta_contable = id_cuenta_contable_var
    LIMIT 1;
  END IF;
  
  IF EXISTS (SELECT 1 FROM ctas_contables AS C WHERE C.padre_cta_contable = param_cuenta_contable LIMIT 1) THEN
    CALL errorCR(contexto_var, 'Cuenta Contable NO habilitada por ser padre de otra', 'Y');
  END IF;
  
  IF habilitada_var = 0 THEN
    CALL errorCR(contexto_var, 'Cuenta Contable NO habilitada', 'Y');
  END IF;
  
  IF imputable_var = 0 THEN
    CALL errorCR(contexto_var, 'Cuenta Contable NO imputable', 'Y');
  END IF;
  
  RETURN param_cuenta_contable;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `getEnvioFoliosFaltantes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` FUNCTION `getEnvioFoliosFaltantes`() RETURNS varchar(500) CHARSET latin1
BEGIN
    DECLARE dias_faltantes varchar(500) DEFAULT '';
    DECLARE fecha_temporal DATE DEFAULT STR_TO_DATE(CONCAT(DATE_FORMAT(NOW(), '%Y-%m'),'-01'), '%Y-%m-%d');
    DECLARE trackid_dte char(15);
    
    WHILE fecha_temporal <= NOW() DO
    
      SET trackid_dte = (SELECT C.trackid_dte FROM consumo_folios AS C WHERE C.fecha = fecha_temporal LIMIT 1);
      IF trackid_dte IS NULL OR trackid_dte = '' THEN
      
        IF dias_faltantes = '' THEN
          SET dias_faltantes = DATE_FORMAT(fecha_temporal, '%d');
        ELSE
          SET dias_faltantes = CONCAT(dias_faltantes, ' - ' , DATE_FORMAT(fecha_temporal, '%d'));
        END IF;
      END IF;
      
    SET fecha_temporal = DATE_ADD(fecha_temporal, INTERVAL 1 DAY);
    
      
    END WHILE;
    
    return dias_faltantes;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `idBodegaDesdeSucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `idBodegaDesdeSucursal`(
	`param_sucursal` INT

) RETURNS int(11)
    DETERMINISTIC
BEGIN
  RETURN (SELECT B.id FROM bodegas AS B WHERE B.id_sucursal = param_sucursal AND B.estado_bodega = "1" LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `idCategoriaDesdeCodigoCategoria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `idCategoriaDesdeCodigoCategoria`(
	`param_codigo` VARCHAR(100)
) RETURNS int(11)
    DETERMINISTIC
BEGIN
  RETURN (SELECT A.id FROM arbol_categoria_productos AS A WHERE A.codigo = param_codigo);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `idCategoriaNivelDesdeCodigoCategoria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `idCategoriaNivelDesdeCodigoCategoria`(
	`param_codigo` VARCHAR(100),
	`param_nivel` CHAR(1)

) RETURNS int(11)
    DETERMINISTIC
BEGIN
  RETURN (SELECT A.id FROM arbol_categoria_productos AS A WHERE A.codigo LIKE CONCAT(SUBSTR(param_codigo,1, 2*(param_nivel + 1)),"00%"));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `idProductoDesdeCodigo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `idProductoDesdeCodigo`(
	`param_codigo` CHAR(50)






) RETURNS int(11)
    DETERMINISTIC
BEGIN
DECLARE id_producto int(11) DEFAULT (SELECT
                                        R.producto_id
                                      FROM
                                        relacion_codigos_alternativos_productos AS R
                                      WHERE
                                        R.codigo_barra = param_codigo
                                      LIMIT 1);
IF id_producto IS NULL THEN
  return (SELECT
            R.producto_id
          FROM
            relacion_codigos_alternativos_productos AS R
          WHERE
            R.producto_id = param_codigo
          LIMIT 1);
  ELSE
    return id_producto;
  END IF;
    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `idSucursalDesdeMac` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `idSucursalDesdeMac`(
	`param_mac` VARCHAR(100)


) RETURNS int(11)
    DETERMINISTIC
BEGIN
  RETURN (SELECT S.id FROM relacion_sucursal_pc AS R INNER JOIN sucursales AS S ON R.local_id = S.id WHERE R.mac_address = param_mac AND S.estado_sucursal = "1" LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `tipoDocumentoTextoAbreviado` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` FUNCTION `tipoDocumentoTextoAbreviado`(
	`param_tipo_documento` INT

) RETURNS tinytext CHARSET latin1
    DETERMINISTIC
    COMMENT 'Devuelve la abreviacion de un documento basandose en el tipo (int)'
BEGIN
  RETURN (
  SELECT 
    D.descripcion_documento_abreviada 
  FROM 
    documentos_tributarios AS D 
  WHERE 
    D.codigo_documento = param_tipo_documento
  LIMIT 1
    );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarBodegas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarBodegas`(
	IN `param_xml` TEXT




)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    

	    DECLARE id_var int(11) DEFAULT ExtractValue(xml, '//DBodega/Id');
	    DECLARE id_sucursal_var int(11) DEFAULT ExtractValue(xml, '//DBodega/Id_sucursal');
	    DECLARE numero_bodega_var int(11) DEFAULT ExtractValue(xml, '//DBodega/Numero_bodega');
	    DECLARE nombre_bodega_var char(100) DEFAULT ExtractValue(xml, '//DBodega/Nombre_bodega');
	    DECLARE estado_bodega_var char(1) DEFAULT ExtractValue(xml, '//DBodega/Estado_bodega');

    IF (SELECT B.id FROM bodegas AS B WHERE B.numero_bodega = numero_bodega_var AND B.id_sucursal = id_sucursal_var AND B.id <> id_var LIMIT 1) IS NOT NULL THEN
      call error('El numero de bodega ya esta registrado');
    END IF;
    
		UPDATE `bodegas` SET 
			 `id_sucursal` = id_sucursal_var, 
			 `numero_bodega` = numero_bodega_var,
       nombre_bodega = nombre_bodega_var,
			 `estado_bodega` = estado_bodega_var
			 WHERE `bodegas`.`id` = id_var;
	
		SELECT "SUCCESS";
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarCiudades` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarCiudades`(
	IN `param_xml` TEXT











)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    

      DECLARE ciu_id int(11)DEFAULT ExtractValue(xml, '//DCiudad/Id');
	    DECLARE ciu_nombre char(50) DEFAULT ExtractValue(xml, '//DCiudad/Nombre');
	    DECLARE pais_id int(11) DEFAULT ExtractValue(xml, '//DCiudad/Id_pais');

		UPDATE `ciudades` SET 
       `ciu_id` = ciu_id,
			 `ciu_nombre` = ciu_nombre,
       pais_id = pais_id
			 WHERE `ciudades`.`ciu_id` = ciu_id;
	
		SELECT "SUCCESS", ciu_id AS id, pais_id AS id_pais;    
    
       END;
   
   COMMIT;    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarClienteRutEmailSii` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarClienteRutEmailSii`(
	IN `param_rut` VARCHAR(50),
	IN `param_email` CHAR(250)
)
BEGIN
  DECLARE email_var CHAR(250) DEFAULT param_email;
  
  IF email_var = '' THEN
    SET email_var = 'SIN EMAIL';
  END IF;
  
  UPDATE proveedores SET `email_sii` = email_var WHERE  `rut` = param_rut; 
  SELECT 'SUCCESS';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarComunas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarComunas`(
	IN `param_xml` TEXT




)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    

      DECLARE comu_id int(11) DEFAULT ExtractValue(xml, '//DComuna/Id_comuna');
	    DECLARE comu_nombre char(50) DEFAULT ExtractValue(xml, '//DComuna/Comu_nombre');
	    
	    DECLARE comu_orden int(11) DEFAULT ExtractValue(xml, '//DComuna/Comu_orden');
      DECLARE ciu_id int(11) DEFAULT ExtractValue(xml, '//DComuna/Id_ciudad');

		UPDATE `comunas` SET  
			 `comu_nombre` = comu_nombre,
			 `comu_orden` = comu_orden
			 WHERE `comunas`.`comu_id` = comu_id;
      
    
    INSERT INTO `ciudcom` (`ciu_id`, `comu_id`) VALUES (ciu_id, comu_id);
	
		SELECT "SUCCESS",comu_id AS id_comuna;    
    
       END;
   
   COMMIT;    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarCostoMovimientoReferenciadoDesdeKardex` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarCostoMovimientoReferenciadoDesdeKardex`(
	IN `param_id_kardex` INT






)
BEGIN
  DECLARE tipo_movimeinto_kardex_var INT(11);
  DECLARE numero_movimiento_kardex_var INT(11);
  DECLARE id_producto_kardex_var INT(11);
  DECLARE costo_producto_kardex_var DECIMAL(18,4);
  DECLARE tipo_movimiento_kardex CHAR(1) DEFAULT '0'; 
  
  DECLARE tipo_movimiento_referencia_var INT(11);
  DECLARE numero_movimiento_referencia_var INT(11);
  DECLARE id_detalle_movimiento_var INT(11);
  DECLARE id_kardex_referencia INT(11);
  
  IF param_id_kardex IS NOT NULL THEN
  
    SELECT
      K.tipo_movimiento,
      K.numero_documento,
      K.id_producto,
      IF(K.vunitcompra <> 0, K.vunitcompra, K.vunitsalida),
      IF(K.vunitcompra <> 0, '0', '1')
    INTO
      tipo_movimeinto_kardex_var,
      numero_movimiento_kardex_var,
      id_producto_kardex_var,
      costo_producto_kardex_var,
      tipo_movimiento_kardex
    FROM kardex AS K
    WHERE
      K.kardex_id = param_id_kardex
    LIMIT 1;
    
    
      
    IF tipo_movimeinto_kardex_var = 52 AND tipo_movimiento_kardex = '1' THEN
    
      
      SELECT 
        D.id
      INTO
        id_detalle_movimiento_var
      FROM detalle_movimientos_guias AS D 
        INNER JOIN encabezado_movimientos_guias AS E
          ON D.id_encabezado = E.id
      WHERE
        E.tipo_documento = 52
        AND E.numero_documento = numero_movimiento_kardex_var
        AND D.producto_id = id_producto_kardex_var
      ORDER BY E.id DESC
      LIMIT 1;
      
      UPDATE detalle_movimientos_guias AS D
      SET 
        D.pmp = costo_producto_kardex_var, 
        D.pmp_linea = costo_producto_kardex_var * D.cantidad
      WHERE D.id = id_detalle_movimiento_var;
      
      
      
       
       
      SET id_kardex_referencia = (SELECT 
                                    K.kardex_id
                                  FROM kardex AS K
                                  WHERE
                                    K.tipo_movimiento = 52
                                    AND K.numero_documento = numero_movimiento_kardex_var
                                    AND K.id_producto = id_producto_kardex_var
                                    AND K.kardex_id <> param_id_kardex
                                  LIMIT 1);
       
      IF id_kardex_referencia IS NOT NULL THEN 
        SELECT 
          D.id
        INTO
          id_detalle_movimiento_var
        FROM detalle_movimientos_ingreso_guias AS D 
          INNER JOIN encabezado_movimientos_ingreso_guias AS E
            ON D.id_encabezado = E.id
        WHERE
          E.tipo_documento = 52
          AND E.numero_documento = numero_movimiento_kardex_var
          AND D.producto_id = id_producto_kardex_var
        ORDER BY E.id DESC
        LIMIT 1;
        
        UPDATE detalle_movimientos_ingreso_guias AS D
        SET 
          D.pmp = costo_producto_kardex_var, 
          D.pmp_linea = costo_producto_kardex_var * D.cantidad
        WHERE D.id = id_detalle_movimiento_var;
       
        UPDATE kardex AS K
            SET
              K.vunitcompra = costo_producto_kardex_var
            WHERE
              K.kardex_id = id_kardex_referencia;
      END IF;
      
        
    ELSEIF tipo_movimeinto_kardex_var <> 61 THEN
    
      IF tipo_movimiento_kardex = '1'THEN
        SELECT 
          D.id
        INTO
          id_detalle_movimiento_var
        FROM detalle_movimientos AS D 
          INNER JOIN encabezado_movimientos AS E
            ON D.id_encabezado = E.id
        WHERE
          E.tipo_documento = tipo_movimeinto_kardex_var
          AND E.numero_documento = numero_movimiento_kardex_var
          AND D.producto_id = id_producto_kardex_var
        ORDER BY E.id DESC
        LIMIT 1;
        
        SELECT 
          E.tipo_documento,
          E.numero_documento
        INTO
          tipo_movimiento_referencia_var,
          numero_movimiento_referencia_var
        FROM detalle_movimientos AS D 
          INNER JOIN encabezado_movimientos AS E
            ON D.id_encabezado = E.id
        WHERE
          E.tipo_documento_referencia = tipo_movimeinto_kardex_var
          AND E.numero_documento_referencia = numero_movimiento_kardex_var
          AND D.producto_id = id_producto_kardex_var
        ORDER BY E.id DESC
        LIMIT 1;
        
        UPDATE detalle_movimientos AS D
        SET 
          D.pmp = costo_producto_kardex_var, 
          D.pmp_linea = costo_producto_kardex_var * D.cantidad
        WHERE D.id = id_detalle_movimiento_var;
        
        
        IF numero_movimiento_referencia_var <> 0 AND numero_movimiento_referencia_var IS NOT NULL THEN
          SELECT 
            D.id
          INTO
            id_detalle_movimiento_var
          FROM detalle_movimientos AS D 
            INNER JOIN encabezado_movimientos AS E
              ON D.id_encabezado = E.id
          WHERE
            E.tipo_documento = tipo_movimiento_referencia_var
            AND E.numero_documento = numero_movimiento_referencia_var
            AND D.producto_id = id_producto_kardex_var
          ORDER BY E.id DESC
          LIMIT 1;
          
          UPDATE detalle_movimientos AS D
          SET 
            D.pmp = costo_producto_kardex_var, 
            D.pmp_linea = costo_producto_kardex_var * D.cantidad
          WHERE D.id = id_detalle_movimiento_var;
          
          SELECT
            K.kardex_id
          INTO
            id_kardex_referencia
          FROM kardex AS K
          WHERE
            K.tipo_movimiento = tipo_movimiento_referencia_var
            AND K.numero_documento = numero_movimiento_referencia_var
            AND IF( tipo_movimiento_kardex = '0', K.vunitsalida <> 0 , K.vunitcompra <> 0)
          LIMIT 1;
           
          IF tipo_movimiento_kardex = '0' THEN
            UPDATE kardex AS K
              SET
                K.vunitsalida = costo_producto_kardex_var
              WHERE
                K.kardex_id = id_kardex_referencia;
            ELSE
              UPDATE kardex AS K
              SET
                K.vunitcompra = costo_producto_kardex_var
              WHERE
                K.kardex_id = id_kardex_referencia;
          END IF;
          
        END IF;
        
        
      ELSE 
        SELECT 
          D.id
        INTO
          id_detalle_movimiento_var
        FROM detalle_movimientos_compra AS D 
          INNER JOIN encabezado_movimientos_compra AS E
            ON D.id_encabezado = E.id
        WHERE
          E.tipo_documento = tipo_movimeinto_kardex_var
          AND E.numero_documento = numero_movimiento_kardex_var
          AND D.producto_id = id_producto_kardex_var
        ORDER BY E.id DESC
        LIMIT 1;
        
        SELECT 
          E.tipo_documento,
          E.numero_documento
        INTO
          tipo_movimiento_referencia_var,
          numero_movimiento_referencia_var
        FROM detalle_movimientos_compra AS D 
          INNER JOIN encabezado_movimientos_compra AS E
            ON D.id_encabezado = E.id
        WHERE
          E.tipo_documento_referencia = tipo_movimeinto_kardex_var
          AND E.numero_documento_referencia = numero_movimiento_kardex_var
          AND D.producto_id = id_producto_kardex_var
        ORDER BY E.id DESC
        LIMIT 1;
        
        UPDATE detalle_movimientos_compra AS D
        SET 
          D.pmp = costo_producto_kardex_var, 
          D.pmp_linea = costo_producto_kardex_var * D.cantidad
        WHERE D.id = id_detalle_movimiento_var;
        
        
        IF numero_movimiento_referencia_var <> 0 AND numero_movimiento_referencia_var IS NOT NULL THEN
          SELECT 
            D.id
          INTO
            id_detalle_movimiento_var
          FROM detalle_movimientos_compra AS D 
            INNER JOIN encabezado_movimientos_compra AS E
              ON D.id_encabezado = E.id
          WHERE
            E.tipo_documento = tipo_movimiento_referencia_var
            AND E.numero_documento = numero_movimiento_referencia_var
            AND D.producto_id = id_producto_kardex_var
          ORDER BY E.id DESC
          LIMIT 1;
          
          UPDATE detalle_movimientos_compra AS D
          SET 
            D.pmp = costo_producto_kardex_var, 
            D.pmp_linea = costo_producto_kardex_var * D.cantidad
          WHERE D.id = id_detalle_movimiento_var;
          
          SELECT
            K.kardex_id
          INTO
            id_kardex_referencia
          FROM kardex AS K
          WHERE
            K.tipo_movimiento = tipo_movimiento_referencia_var
            AND K.numero_documento = numero_movimiento_referencia_var
            AND IF( tipo_movimiento_kardex = '0', K.vunitsalida <> 0 , K.vunitcompra <> 0)
          LIMIT 1;
           
          IF tipo_movimiento_kardex = '0' THEN
            UPDATE kardex AS K
              SET
                K.vunitsalida = costo_producto_kardex_var
              WHERE
                K.kardex_id = id_kardex_referencia;
            ELSE
              UPDATE kardex AS K
              SET
                K.vunitcompra = costo_producto_kardex_var
              WHERE
                K.kardex_id = id_kardex_referencia;
          END IF;
          
        END IF;
        
        
      END IF;
      
    END IF;
  
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ActualizarCuentasContablesParametros` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `ActualizarCuentasContablesParametros`(
	IN `param_xml` TEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE xml TEXT(5000) DEFAULT param_xml;
    	

      DECLARE Cta_contable_proveedores_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_proveedores'); 
      DECLARE Cta_contable_clientes_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_clientes'); 
      DECLARE Cta_contable_caja_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_caja'); 
      DECLARE Cta_contable_iva_debito_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_iva_debito'); 
      DECLARE Cta_contable_iva_credito_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_iva_credito'); 
      DECLARE Cta_contable_costo_venta_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_costo_venta'); 
      DECLARE Cta_contable_resultado_venta_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_resultado_venta'); 
      DECLARE Cta_contable_existencia_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_existencia'); 
      DECLARE Cta_contable_transbank_debito_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_transbank_debito'); 
      DECLARE Cta_contable_transbank_credito_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_transbank_credito'); 
      DECLARE Cta_contable_documentos_por_cobrar_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_documentos_por_cobrar'); 
      DECLARE Cta_contable_remuneraciones_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_remuneraciones'); 
      DECLARE Cta_contable_honorarios_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_honorarios'); 
      DECLARE Cta_contable_gasto_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_gasto'); 
      DECLARE Cta_contable_arriendo_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_arriendo'); 
      DECLARE Cta_contable_impuesto_adicional INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_impuesto_adicional'); 
      DECLARE Cta_contable_boletas_venta INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_boletas_venta'); 
      DECLARE Cta_contable_ajuste_caja INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_ajuste_caja'); 
      DECLARE Cta_contable_ajuste_inventario INT(11) DEFAULT ExtractValue(xml, '//DCuentasContablesParametros/Cta_contable_ajuste_inventario'); 
    
		UPDATE empresas AS E SET
			  E.cta_contable_proveedores = IF(Cta_contable_proveedores_var = 0, E.cta_contable_proveedores, Cta_contable_proveedores_var), 
        E.cta_contable_clientes = IF(Cta_contable_clientes_var = 0, E.cta_contable_clientes, Cta_contable_clientes_var), 
        E.cta_contable_caja = IF(Cta_contable_caja_var = 0, E.cta_contable_caja, Cta_contable_caja_var), 
        E.cta_contable_iva_debito = IF(Cta_contable_iva_debito_var = 0, E.cta_contable_iva_debito, Cta_contable_iva_debito_var), 
        E.cta_contable_iva_credito = IF(Cta_contable_iva_credito_var = 0, E.cta_contable_iva_credito, Cta_contable_iva_credito_var), 
        E.cta_contable_costo_venta = IF(Cta_contable_costo_venta_var = 0, E.cta_contable_costo_venta, Cta_contable_costo_venta_var), 
        E.cta_contable_resultado_venta = IF(Cta_contable_resultado_venta_var = 0, E.cta_contable_resultado_venta, Cta_contable_resultado_venta_var), 
        E.cta_contable_existencia = IF(Cta_contable_existencia_var = 0, E.cta_contable_existencia, Cta_contable_existencia_var), 
        E.cta_contable_transbank_debito = IF(Cta_contable_transbank_debito_var = 0, E.cta_contable_transbank_debito, Cta_contable_transbank_debito_var), 
        E.cta_contable_transbank_credito = IF(Cta_contable_transbank_credito_var = 0, E.cta_contable_transbank_credito, Cta_contable_transbank_credito_var), 
        E.cta_contable_documentos_por_cobrar = IF(Cta_contable_documentos_por_cobrar_var = 0, E.cta_contable_documentos_por_cobrar, Cta_contable_documentos_por_cobrar_var), 
        E.cta_contable_remuneraciones = IF(Cta_contable_remuneraciones_var = 0, E.cta_contable_remuneraciones, Cta_contable_remuneraciones_var), 
        E.cta_contable_honorarios = IF(Cta_contable_honorarios_var = 0, E.cta_contable_honorarios, Cta_contable_honorarios_var), 
        E.cta_contable_gasto = IF(Cta_contable_gasto_var = 0, E.cta_contable_gasto, Cta_contable_gasto_var), 
        E.cta_contable_arriendo = IF(Cta_contable_arriendo_var = 0, E.cta_contable_arriendo, Cta_contable_arriendo_var),
        E.cta_contable_impuesto_adicional = IF(Cta_contable_impuesto_adicional = 0, E.cta_contable_impuesto_adicional, Cta_contable_impuesto_adicional),
        E.cta_contable_boletas_venta = IF(Cta_contable_boletas_venta = 0, E.cta_contable_boletas_venta, Cta_contable_boletas_venta),
        E.cta_contable_ajuste_caja = IF(Cta_contable_ajuste_caja = 0, E.cta_contable_ajuste_caja, Cta_contable_ajuste_caja),
        E.cta_contable_ajuste_inventario = IF(Cta_contable_ajuste_inventario = 0, E.cta_contable_ajuste_inventario, Cta_contable_ajuste_inventario)
		LIMIT 1;
	
		SELECT 'SUCCESS';
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarEmailProveedor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarEmailProveedor`(
	IN `param_rut` VARCHAR(50),
	IN `param_email` CHAR(250)



)
BEGIN

  DECLARE email_var CHAR(250) DEFAULT param_email;IF email_var = '' THEN
    SET email_var = 'SIN EMAIL';END IF;UPDATE proveedores SET `email` = email_var WHERE  `rut` = param_rut;SELECT 'SUCCESS';END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarEmpresaXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarEmpresaXML`(
	IN `param_xml` TEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    
      
      DECLARE id int(11) DEFAULT ExtractValue(xml, '//DEmpresa/Id_empresa');
	    DECLARE rut int(8) DEFAULT ExtractValue(xml, '//DEmpresa/Rut');
	    DECLARE dv char(1) DEFAULT ExtractValue(xml, '//DEmpresa/Dv');
	    DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DEmpresa/Razon_social');
      DECLARE codigo_actividad char(50) DEFAULT ExtractValue(xml, '//DEmpresa/Codigo_actividad');
      DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DEmpresa/Giro');
	    DECLARE direccion_casa_matriz char(100) DEFAULT ExtractValue(xml, '//DEmpresa/Direccion_casa_matriz');
	    DECLARE comuna int(50) DEFAULT ExtractValue(xml, '//DEmpresa/Comuna');
      DECLARE ciudad int(50) DEFAULT ExtractValue(xml, '//DEmpresa/Ciudad');
	    DECLARE rut_representante_legal char(8)	 DEFAULT ExtractValue(xml, '//DEmpresa/Rut_representante_legal');
      DECLARE dv_representante_legal char(1)	 DEFAULT ExtractValue(xml, '//DEmpresa/Dv_representante_legal');
      DECLARE nombre_representante_legal char(50)	 DEFAULT ExtractValue(xml, '//DEmpresa/Nombre_representante_legal');
      DECLARE direccion_representante_legal char(50)	 DEFAULT ExtractValue(xml, '//DEmpresa/Direccion_representante_legal');
      DECLARE comuna_representante_legal int(11)	 DEFAULT ExtractValue(xml, '//DEmpresa/Comuna_representante_legal');
      DECLARE ciudad_representante_legal int(11)	 DEFAULT ExtractValue(xml, '//DEmpresa/Ciudad_representante_legal');
      DECLARE iva int(11)	 DEFAULT ExtractValue(xml, '//DEmpresa/Iva');
	    DECLARE ila int(11)	 DEFAULT ExtractValue(xml, '//DEmpresa/Ila');
      DECLARE otro_impuesto int(11)	 DEFAULT ExtractValue(xml, '//DEmpresa/Otro_impuesto');
      DECLARE margen_minimo int(11)	 DEFAULT ExtractValue(xml, '//DEmpresa/Margen_minimo');
      DECLARE ajuste_precio char(1)	 DEFAULT ExtractValue(xml, '//DEmpresa/Ajuste_precio');
      DECLARE ajusta_margen char(1)	 DEFAULT ExtractValue(xml, '//DEmpresa/Ajusta_margen');
      DECLARE margen_a_nivel char(1)	 DEFAULT ExtractValue(xml, '//DEmpresa/Margen_a_nivel');
      DECLARE sucursal_sii varchar(100)	 DEFAULT ExtractValue(xml, '//DEmpresa/Sucursal_SII');
      DECLARE permite_stock_negativo char(50)	 DEFAULT ExtractValue(xml, '//DEmpresa/Permite_stock_negativo');
      
    
      
      
      DECLARE prefijo_codigo_barra_ean13_var char(50)	 DEFAULT ExtractValue(xml, '//DEmpresa/Prefijo_ean13');

		UPDATE `empresas` SET
			 `razon_social` = razon_social,
       `codigo_actividad` = codigo_actividad,
       `giro` = giro,
			 direccion = direccion_casa_matriz,
			 `comuna` = comuna, 
			 `ciudad` = ciudad,
       `rut_representante_legal` = rut_representante_legal,
       `dv_representante_legal` = dv_representante_legal,
       `nombre_representante_legal` = nombre_representante_legal,
       `direccion_representante_legal` = direccion_representante_legal,
			 `comuna_representante_legal` = comuna_representante_legal,
			 `ciudad_representante_legal` = ciudad_representante_legal,
			 `iva` = iva,
			 `ila` = ila,
			 `otro_impuesto` = otro_impuesto,
			 `margen_minimo` = margen_minimo,
			 `ajuste_precio` = ajuste_precio,
			 `ajusta_margen` = ajusta_margen,
			  margen_a_nivel = margen_a_nivel,
        permite_stock_negativo = permite_stock_negativo,
        
        prefijo_codigo_barra_ean13 = prefijo_codigo_barra_ean13_var
			 WHERE `empresas`.`rut` = rut;
	
		SELECT "SUCCESS";
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarEstadoConsumoFolio` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarEstadoConsumoFolio`(
	IN `param_fecha` VARCHAR(50),
	IN `param_set_envio` INT,
	IN `param_xml` LONGBLOB,
	IN `param_nombre_xml` VARCHAR(500),
	IN `param_size_xml` BIGINT




)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS LIMIT 1;
		ROLLBACK;
	END; 
	DECLARE EXIT HANDLER FOR SQLWARNING
	BEGIN
	 	SHOW WARNINGS LIMIT 1;
		ROLLBACK;
	END;

	START TRANSACTION;
	BEGIN
	   DECLARE id_folio int(11);
	   
	   UPDATE consumo_folios AS E
				SET	
            E.trackid_dte = "",
            E.estado_dte = "",
            E.estado_general_dte = 'Generado',
            E.descripcion_estado_general_dte = 'Generado',
						E.xml_consumo = param_xml,
						E.xml_consumo_nombre = param_nombre_xml,
						E.xml_consumo_size = param_size_xml,
            E.setEnvio = param_set_envio,
            E.fecha_generacion = NOW()
				WHERE
					E.fecha = param_fecha
				;
				
	   SELECT "SUCCESS", "", "";
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarEstadoConsumoFolio2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `actualizarEstadoConsumoFolio2`(
	IN `param_fecha` VARCHAR(50),
	IN `param_identificador_dte` VARCHAR(50)
)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS LIMIT 1;
		ROLLBACK;
	END; 
	DECLARE EXIT HANDLER FOR SQLWARNING
	BEGIN
	 	SHOW WARNINGS LIMIT 1;
		ROLLBACK;
	END;

	START TRANSACTION;
	BEGIN
	   DECLARE id_folio int(11);
	   
	   UPDATE consumo_folios AS E
				SET	
            E.trackid_dte = param_identificador_dte,
            E.estado_dte = '',
            E.estado_general_dte = 'Enviado',
            E.descripcion_estado_general_dte = 'Enviado'
				WHERE
					E.fecha = param_fecha
				;
				
	   SELECT "SUCCESS", "", "";
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarEstadoCorrectoDesdeEnvioMovimiento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarEstadoCorrectoDesdeEnvioMovimiento`(
	IN `param_id` INT,
	IN `param_identificador_dte` VARCHAR(100)







,
	IN `param_xml` LONGBLOB


,
	IN `param_nombre_xml` VARCHAR(500),
	IN `param_size_xml` BIGINT,
	IN `param_PNG_pdf417` LONGBLOB,
	IN `param_nombre_PNG_pdf417` VARCHAR(500),
	IN `param_size_PNG_pdf417` BIGINT
)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS LIMIT 1;
		ROLLBACK;
	END; 
	DECLARE EXIT HANDLER FOR SQLWARNING
	BEGIN
	 	SHOW WARNINGS LIMIT 1;
		ROLLBACK;
	END;

	START TRANSACTION;
	BEGIN
	   DECLARE id_folio int(11);
	   
	   UPDATE encabezado_movimientos E
				SET	E.trackid_dte = param_identificador_dte,
				
						E.xml_dte = param_xml,
						E.xml_dte_nombre = param_nombre_xml,
						E.xml_dte_size = param_size_xml,
						
						E.pdf417 = param_PNG_pdf417,
						E.pdf417_nombre = param_nombre_PNG_pdf417,
						E.pdf417_size = param_size_PNG_pdf417
				WHERE
					E.id = param_id
				;
				
		SET id_folio = (	SELECT E.id_folio 
								FROM encabezado_movimientos E
								WHERE
									E.id = param_id
							);
	   
	   UPDATE hef_cafs_folios F
				SET	F.estado = 2,
						F.fecha_consumo = NOW()
				WHERE
					F.id = id_folio
				;
				
	   SELECT true;
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarEstadoCorrectoDesdeEnvioMovimientoGuias` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarEstadoCorrectoDesdeEnvioMovimientoGuias`(
	IN `param_id` INT,
	IN `param_identificador_dte` VARCHAR(100),
	IN `param_xml` LONGBLOB,
	IN `param_nombre_xml` VARCHAR(500),
	IN `param_size_xml` BIGINT,
	IN `param_PNG_pdf417` LONGBLOB,
	IN `param_nombre_PNG_pdf417` VARCHAR(500),
	IN `param_size_PNG_pdf417` BIGINT
)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS LIMIT 1;
		ROLLBACK;
	END; 
	DECLARE EXIT HANDLER FOR SQLWARNING
	BEGIN
	 	SHOW WARNINGS LIMIT 1;
		ROLLBACK;
	END;

	START TRANSACTION;
	BEGIN
	   DECLARE id_folio int(11);
	   
	   UPDATE encabezado_movimientos_guias E
				SET	E.trackid_dte = param_identificador_dte,
				
						E.xml_dte = param_xml,
						E.xml_dte_nombre = param_nombre_xml,
						E.xml_dte_size = param_size_xml,
						
						E.pdf417 = param_PNG_pdf417,
						E.pdf417_nombre = param_nombre_PNG_pdf417,
						E.pdf417_size = param_size_PNG_pdf417
				WHERE
					E.id = param_id
				;
				
		SET id_folio = (	SELECT E.id_folio 
								FROM encabezado_movimientos_guias E
								WHERE
									E.id = param_id
							);
	   
	   UPDATE hef_cafs_folios F
				SET	F.estado = 2,
						F.fecha_consumo = NOW()
				WHERE
					F.id = id_folio
				;
				
	   SELECT true;
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarEstadoTrackID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarEstadoTrackID`(
	IN `param_trackID` VARCHAR(50),
	IN `param_estado` VARCHAR(50)

,
	IN `param_estado_general` VARCHAR(50),
	IN `param_descripcion_estado_general` VARCHAR(200)


)
BEGIN
	DECLARE id_folio VARCHAR(50) DEFAULT (SELECT E.id_folio FROM encabezado_movimientos E WHERE E.trackid_dte = param_trackID);
	DECLARE estadoDTEInt int(1) DEFAULT 6;
  
  DECLARE estado varchar(500) DEFAULT '';
  DECLARE estado_general varchar(500) DEFAULT '';
  DECLARE descripcion_estado_general varchar(500) DEFAULT '';
	
	IF param_estado = "ACEPTADO" THEN
		SET estadoDTEInt = 3;
	ELSEIF param_estado = "ACEPTADO CON REPAROS" THEN
		SET estadoDTEInt = 4;
	ELSEIF param_estado = "RECHAZADO" THEN
		SET estadoDTEInt = 5;
	END IF;
	
	IF id_folio IS NULL THEN 
    
    SET id_folio = (SELECT E.id_folio FROM encabezado_movimientos_guias E WHERE E.trackid_dte = param_trackID);
    
    IF id_folio IS NULL THEN
      
      IF param_descripcion_estado_general = 'Documento procesado aun sin resolucion' THEN
        SET estado = 'ERP';
        SET estado_general = 'Documento procesado';
        SET descripcion_estado_general = 'Documento procesado';
      ELSE
        SET estado = param_estado;
        SET estado_general = param_estado_general;
        SET descripcion_estado_general = param_descripcion_estado_general;
      END IF;
      
      UPDATE consumo_folios AS C
  		SET 
  			C.estado_dte = estado,
  			C.estado_general_dte = estado_general,
  			C.descripcion_estado_general_dte =  descripcion_estado_general
  			WHERE C.trackid_dte = param_trackID;
          
    ELSE
      UPDATE encabezado_movimientos_guias AS G
  		SET 
  			G.estado_dte = param_estado,
  			G.estado_general_dte = param_estado_general,
  			G.descripcion_estado_general_dte =  param_descripcion_estado_general
  			WHERE G.trackid_dte = param_trackID;
        
    END IF;
  ELSE
    UPDATE encabezado_movimientos AS E
		SET 
			E.estado_dte = param_estado,
			E.estado_general_dte = param_estado_general,
			E.descripcion_estado_general_dte =  param_descripcion_estado_general
			WHERE E.trackid_dte = param_trackID;
      
  END IF;

	IF id_folio IS NOT NULL THEN
    UPDATE hef_cafs_folios SET estado = estadoDTEInt WHERE id = id_folio;
  END IF;
	
	SELECT estadoDTEInt AS EstadoInt;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarFormaPagoMovimiento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarFormaPagoMovimiento`(
	IN `param_xml` TEXT



)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE xml TEXT(10000) DEFAULT param_xml;
      
    	
	    DECLARE contador INT DEFAULT 1;
	    
	    
	    
	    DECLARE tipo_documento int(11) DEFAULT ExtractValue(xml, '//DMovimiento/Tipo_documento');
      DECLARE nuemero_documento int(11) DEFAULT ExtractValue(xml, '//DMovimiento/Numero_folio');
      DECLARE id int(11) DEFAULT FUNCidMovimientoVentaDesdeNumeroTipo(nuemero_documento, tipo_documento);

		 

		 DECLARE id_mov int(11);
		 DECLARE forma_pago int(11);
		 DECLARE descripcion_forma_pago VARCHAR(150);
		 DECLARE monto_pagado decimal(18,4);
		 DECLARE numero_operacion int(18);
     
     DECLARE caja_id_var int(11);
     DECLARE correlativo_caja_var int(11);
     DECLARE fecha_var DATETIME;
     DECLARE fecha_cierre DATETIME;
     
		   
      SELECT
        E.caja_id,
        E.correlativo,
        E.hora
      INTO 
        caja_id_var,
        correlativo_caja_var,
        fecha_var
      FROM encabezado_movimientos AS E
      WHERE
        E.id = id
      LIMIT 1;
      
      SET fecha_cierre = (SELECT A.fecha_cierre FROM apertura_caja AS A WHERE A.id_caja = caja_id_var AND A.correlativo = correlativo_caja_var LIMIT 1);
      
      IF fecha_cierre IS NOT NULL THEN
        CALL error(CONCAT("No se puede modificar el pago porque la caja ", caja_id_var, " con el numero de apertura ", correlativo_caja_var, " de este movimiento ya esta cerrada"));
      END IF;
      
      DELETE FROM `pagos_movimientos` WHERE `id_movimiento` = id;
              
		   WHILE ((contador < 50) && (ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[',contador,']/Forma_pago')) != ''))  DO
		   
		   	
		   	SET id_mov = id;
				SET forma_pago = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Forma_pago'));
				SET descripcion_forma_pago = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Descripcion_forma_pago'));
				SET monto_pagado = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Monto_pagado'));
				SET numero_operacion = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Numero_operacion'));
				
		   	
		   	INSERT INTO pagos_movimientos (`id_movimiento`, `forma_pago`, `descripcion_forma_pago`, `monto_pagado`, `numero_operacion`, id_caja, correlativo_caja, fecha) 
                                   VALUES (id_mov, forma_pago, descripcion_forma_pago, monto_pagado, numero_operacion, caja_id_var, correlativo_caja_var, fecha_var);
        
		    SET contador = contador + 1;
        
		   END WHILE;
        
        SELECT "SUCCESS";
   END;
  COMMIT; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarInsertarCodigoProveedores` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarInsertarCodigoProveedores`(
	IN `param_codigo_interno` INT,
	IN `param_codigo_proveedor` VARCHAR(100),
	IN `param_rut_proveedor` VARCHAR(50)


,
	IN `param_codigo_barra` VARCHAR(20),
	IN `param_desc_compra` VARCHAR(200)

)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN

    DECLARE codigo_barra_var varchar(20) DEFAULT param_codigo_barra;DECLARE id_relacion INT(11) DEFAULT (SELECT R.id_codigo_alternativo FROM relacion_codigos_alternativos_productos AS R WHERE R.producto_id = param_codigo_interno AND R.proveedor_rut = param_rut_proveedor LIMIT 1);IF id_relacion IS NOT NULL THEN
    
      UPDATE relacion_codigos_alternativos_productos SET `codigo_producto_proveedor` = param_codigo_proveedor WHERE  `id_codigo_alternativo` = id_relacion;SET codigo_barra_var = (SELECT
                                R.codigo_barra
                              FROM relacion_codigos_alternativos_productos AS R
                              WHERE 
                                R.id_codigo_alternativo = id_relacion LIMIT 1);SELECT "SUCCESS", codigo_barra_var;ELSE
    
      IF codigo_barra_var = '' OR codigo_barra_var IS NULL THEN
        SELECT "RETURN", "Error", "falta el codigo de barra para guardar la relacion";ELSE
        INSERT INTO relacion_codigos_alternativos_productos (`producto_id`, `proveedor_rut`, `codigo_producto_proveedor`, `descripcion_compra`, `codigo_barra`) 
                                                    VALUES (param_codigo_interno, param_rut_proveedor, param_codigo_proveedor, param_desc_compra, param_codigo_barra);SELECT "SUCCESS", codigo_barra_var;END IF;END IF;SELECT "Error", "Error", "llego donde no deberia el metodo";END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarNodoArbolCategorias` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarNodoArbolCategorias`(
	IN `param_margen` FLOAT,
	IN `param_id` INT
)
BEGIN
  UPDATE `arbol_categoria_productos` SET `margen_categoria`=param_margen WHERE  `id`=param_id;
  SELECT "SUCCESS";
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarNotaVentaXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarNotaVentaXML`(
	IN `param_xml` TEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(10000) DEFAULT param_xml;
    	 DECLARE contador int(11) DEFAULT 1;
    	 
	    
	    
	    DECLARE id int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Id');
	    DECLARE rut char(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Rut');
	    DECLARE dv	char(1) DEFAULT ExtractValue(xml, '//DNotaVenta/Dv');
	    DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DNotaVenta/Razon_social');
	    DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DNotaVenta/Giro');
	    DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DNotaVenta/Direccion');
	    DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DNotaVenta/Comuna');
	    DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DNotaVenta/Cuiudad');
	    DECLARE sucursal	int(11);
	    DECLARE id_lista_precio int(11);
      DECLARE bodega int(11);
	    DECLARE subtotal	int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Subtotal');
	    DECLARE descuento decimal (18,4) DEFAULT ExtractValue(xml, '//DNotaVenta/Descuento');
      DECLARE porcentaje_descento_global decimal (18,4) DEFAULT ExtractValue(xml, '//DNotaVenta/Porcentaje_descuento');
	    DECLARE neto int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Neto');
	    DECLARE iva_porcentaje	int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Iva_porcentaje');
	    DECLARE monto_iva int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Monto_iva');
	    DECLARE total_documento int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Total_docuemnto');
	    DECLARE fecha_documento Date DEFAULT DATE_FORMAT(NOW(),'%Y-%m-%d');
	    DECLARE vendedor	char(1) DEFAULT ExtractValue(xml, '//DNotaVenta/Vendedor');
	    DECLARE codigo_empresa	char(1) DEFAULT ExtractValue(xml, '//DNotaVenta/Codigo_empresa');
	    DECLARE tipo_precio	char(1) DEFAULT ExtractValue(xml, '//DNotaVenta/Tipo_precio');
      DECLARE caja int(11) DEFAULT 0;
	    
	    DECLARE vinculacion int(11) DEFAULT 0;
	    
	    
	    DECLARE estado int(11) DEFAULT 0;
	    
	    
      DECLARE id_producto int(11);
		 DECLARE id_encabezado int(11);
		 DECLARE codigo_producto varchar(20);
		 DECLARE descripcion varchar(100);
		 DECLARE unidad_venta int(11);
  	 DECLARE cantidad float(11,4);
  	 DECLARE porcentaje_descuento decimal (18,4);
       
     DECLARE netopv decimal (18,4);
     DECLARE ivapv decimal (18,4);
     DECLARE brutopv decimal (18,4);

     DECLARE precio_bruto_unit decimal (18,4);
     DECLARE precio_bruto_linea decimal (18,4);
     DECLARE monto_desc_bruto_linea decimal (18,4);
     DECLARE total_bruto_c_desc decimal (18,4);

     DECLARE precio_neto_unit decimal (18,4);
     DECLARE precio_neto_linea decimal (18,4);
     DECLARE monto_desc_neto_linea decimal (18,4);
     DECLARE total_neto_c_desc decimal (18,4);

     DECLARE pv_real_unit decimal (18,4);
     DECLARE pv_real_linea decimal (18,4);

     DECLARE pmp decimal (18,4);
     DECLARE pmp_linea decimal (18,4) DEFAULT 0;
	   DECLARE fecha varchar(100);
     
       
    SET sucursal = idSucursalDesdeMac(ExtractValue(xml, '//DNotaVenta/Sesion/Mac'));
    
    
    SET bodega = idBodegaDesdeSucursal(sucursal);
    
    
    SET caja = (SELECT C.id_caja FROM cajas AS C WHERE C.mac_address_asignada = ExtractValue(xml, '//DMovimiento/Sesion/Mac') LIMIT 1);
    
    
    
    IF rut != '' AND rut != "66666666" THEN
      SET id_lista_precio = (SELECT C.listasprecios FROM proveedores AS C WHERE C.rut = rut LIMIT 1);
    END IF;
    
    IF id_lista_precio IS NULL THEN
      SET id_lista_precio = (SELECT S.id_lista_precio FROM sucursales AS S WHERE S.id = sucursal LIMIT 1);
    END IF;


	  SET vinculacion = ExtractValue(xml, '//DNotaVenta/Vinculacion');
	    
	   UPDATE `encabezado_nota_venta` AS E SET 
      E.`rut`=rut,
      E.`dv`=dv,
      E.`razon social`=razon_social,
      E.`giro`=giro,
      E.`direccion`=direccion,
      E.`comuna`=comuna,
      E.`ciudad`=ciudad,
      E.`sucursal`=sucursal,
      E.`listasprecios`=id_lista_precio,
      E.`caja`=caja,
      E.`subtotal`=subtotal,
      E.`descuento`=descuento,
      E.`porcentaje_desc`=porcentaje_descento_global,
      E.`neto`=neto,
      E.`iva_porcentaje`=iva_porcentaje,
      E.`monto iva`=monto_iva,
      E.`total_documento`=total_documento,
      E.`vendedor`=vendedor,
      E.`codigo_empresa`=codigo_empresa,
      E.`tipo_precio`='B'
      WHERE E.id = id;
     
		 
		 DELETE FROM `detalle_nota_venta` WHERE `detalle_nota_venta`.id_encabezado = id;
			 
		   WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[',contador,']/Linea')) != ''))  DO
		   
		    
		   	SET id_encabezado = id;
				SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Codigo_producto'));
				SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Descripcion'));
				SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Unidad_venta'));
				SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Cantidad'));
				SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Porcentaje_descuento'));
              
        SET precio_bruto_unit = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_bruto_unit'));
        SET precio_bruto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_bruto_linea'));
        SET monto_desc_bruto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Monto_desc_bruto_linea'));
        SET total_bruto_c_desc = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Total_bruto_c_desc'));
        
        SET precio_neto_unit = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_neto_unit'));
        SET precio_neto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_neto_linea'));
        SET monto_desc_neto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Monto_desc_neto_linea'));
        SET total_neto_c_desc = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Total_neto_c_desc'));
        
        
        
        SET pmp = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Pmp'));
        
				SET fecha = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Fecha'));
        
        SET brutopv = ROUND(total_bruto_c_desc / cantidad, 4);
        SET netopv = ROUND(brutopv / (1 + (iva_porcentaje / 100)), 4);
        SET ivapv = ROUND(brutopv - netopv, 4);
        
        
        SET pv_real_linea = ROUND(total_neto_c_desc * (1 - (porcentaje_descento_global / 100)), 4);
        SET pv_real_unit = ROUND(pv_real_linea / cantidad, 4);
        
        
        SET id_producto = idProductoDesdeCodigo(codigo_producto);
        
          INSERT INTO detalle_nota_venta ( 
         producto_id,
         `id_encabezado`,
         `linea`,
         `codigo_producto`,
         `descripcion`,
         `unidad_venta`,
         `cantidad`,
         `porcentaje_desc`,
          
          netopv,
          ivapv,
          brutopv,
          
          precio_bruto_unit,
          precio_bruto_linea,
          monto_desc_bruto_linea,
          total_bruto_c_desc,
          
          precio_neto_unit,
          precio_neto_linea,
          monto_desc_neto_linea,
          total_neto_c_desc,
          
          pv_real_unit,
          pv_real_linea,
          
         `pmp`,
         `pmp_linea`,
         `fecha`,
         `movimiento`,
         `origen`) 
         VALUES (
         id_producto,
         id_encabezado,
         linea,
         codigo_producto,
         descripcion,
         unidad_venta,
         cantidad,
         porcentaje_descuento,
        
        netopv,
        ivapv,
        brutopv,
        
        precio_bruto_unit,
        precio_bruto_linea,
        monto_desc_bruto_linea,
        total_bruto_c_desc,
        
        precio_neto_unit,
        precio_neto_linea,
        monto_desc_neto_linea,
        total_neto_c_desc,
        
        pv_real_unit,
        pv_real_linea,
          
         pmp,
         pmp_linea,
         fecha,
         movimiento,
         origen); 
       
		    SET contador = contador + 1;
		    
		   END WHILE;
		   
		   IF vinculacion != 0 THEN
		   	UPDATE `encabezado_cotizaciones` SET `id_nota_venta` = id WHERE `encabezado_cotizaciones`.`id` = vinculacion;
		   END IF;
		   
		   SELECT "SUCCESS", id;
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarObjGlosa` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarObjGlosa`(
	IN `param_numero_compra` INT,
	IN `param_rut_proveedor` VARCHAR(50),
	IN `param_tipo_documento` INT,
	IN `param_objetada` CHAR(1),
	IN `param_glosa` VARCHAR(500)


)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
	
		UPDATE encabezado_movimientos_compra 
      SET 
        objetada = param_objetada,
        glosa = param_glosa 
      WHERE 
        encabezado_movimientos_compra.tipo_documento = param_tipo_documento
        AND encabezado_movimientos_compra.numero_documento = param_numero_compra
        AND encabezado_movimientos_compra.rut = param_rut_proveedor
      ;
      			
  		SELECT "SUCCESS";
	  END;
	
	COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarProducto3XML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarProducto3XML`(
	IN `param_xml` TEXT










)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    
      
      DECLARE id CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Id');
    	DECLARE codigo_categoria_producto CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Codigo_categoria_producto');
    	
    	
    	DECLARE nombre_producto_venta CHAR(100) DEFAULT ExtractValue(xml, '//DProducto/Nombre_producto_venta');
    	DECLARE producto_descripcion_corta CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Producto_descripcion_corta');
    	DECLARE costo_pmp FLOAT DEFAULT ExtractValue(xml, '//DProducto/Costo_pmp');
    	DECLARE stock_general INT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_general');
    	DECLARE stock_valorizado FLOAT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_valorizado');
    	DECLARE precio_ultima_compra FLOAT DEFAULT ExtractValue(xml, '//DProducto/Precio_ultima_compra');
    	DECLARE marca_producto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Marca_producto');
    	DECLARE unidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_compra');
    	DECLARE cantidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_compra');
    	DECLARE unidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_venta');
    	DECLARE cantidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_venta');
    	DECLARE precio_venta_neto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Precio_venta_neto');
    	DECLARE prioridad_precio_venta_neto CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Prioridad_precio_venta_neto');
    	DECLARE disponible_venta CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_venta');
    	DECLARE disponible_compra CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_compra');
    	DECLARE disponible_web CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_web');
    	
    	
      
      DECLARE codigo_proveedor varchar(50) DEFAULT '';
      DECLARE rut_proveedor varchar(20) DEFAULT '';
      DECLARE descripcion_compra varchar(100) DEFAULT '';
      DECLARE cantidad_compra_var int (11);
      DECLARE cantidad_venta_var int (11);
      DECLARE codigo_barra varchar(20) DEFAULT '';
      
      
      DECLARE contador int(11) DEFAULT 1;

      UPDATE productos SET 
        codigo_categoria_producto = codigo_categoria_producto,
        
        
        nombre_producto_venta = nombre_producto_venta,
        producto_descripcion_corta = producto_descripcion_corta,
        marca_producto = marca_producto,
        unidad_compra = unidad_compra,
        cantidad_compra = cantidad_compra,
        unidad_venta = unidad_venta,
        cantidad_venta = cantidad_venta,
        precio_venta_neto = precio_venta_neto,
        prioridad_precio_venta_neto = prioridad_precio_venta_neto,
        disponible_venta = disponible_venta,
        disponible_compra = disponible_compra,
        disponible_web = disponible_web
        
        
      WHERE id_producto = id; 
      
      
    DELETE FROM relacion_codigos_alternativos_productos WHERE `producto_id` = id;
    
    WHILE (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra')) != '') OR (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor')) != '')  DO
       
        
        SET rut_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Rut_proveedor'));
        SET codigo_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor'));
        SET descripcion_compra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Descripcion_compra'));
        SET cantidad_compra_var = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Cantidad_compra'));
        SET cantidad_venta_var = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Cantidad_venta'));
        SET codigo_barra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra'));
       
       	
        INSERT INTO relacion_codigos_alternativos_productos (`producto_id`, `proveedor_rut`, `codigo_producto_proveedor`, `descripcion_compra`, `cantidad_compra`, `cantidad_venta`, `codigo_barra`) 
        VALUES (id, rut_proveedor, codigo_proveedor, descripcion_compra, cantidad_compra_var, cantidad_venta_var, codigo_barra); 

         
        SET contador = contador + 1;
       END WHILE;
       
    
		
		SELECT "SUCCESS";
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarProductoXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarProductoXML`(
	IN `param_xml` TEXT






)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    
      
      DECLARE id CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Id');
    	DECLARE codigo_categoria_producto CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Codigo_categoria_producto');
    	
    	
    	DECLARE nombre_producto_venta CHAR(100) DEFAULT ExtractValue(xml, '//DProducto/Nombre_producto_venta');
    	DECLARE producto_descripcion_corta CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Producto_descripcion_corta');
    	DECLARE costo_pmp FLOAT DEFAULT ExtractValue(xml, '//DProducto/Costo_pmp');
    	DECLARE stock_general INT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_general');
    	DECLARE stock_valorizado FLOAT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_valorizado');
    	DECLARE precio_ultima_compra FLOAT DEFAULT ExtractValue(xml, '//DProducto/Precio_ultima_compra');
    	DECLARE marca_producto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Marca_producto');
    	DECLARE unidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_compra');
    	DECLARE cantidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_compra');
    	DECLARE unidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_venta');
    	DECLARE cantidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_venta');
    	DECLARE precio_venta_neto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Precio_venta_neto');
    	DECLARE prioridad_precio_venta_neto CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Prioridad_precio_venta_neto');
    	DECLARE disponible_venta CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_venta');
    	DECLARE disponible_compra CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_compra');
    	DECLARE disponible_web CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_web');
    	
    	
      
      DECLARE codigo_proveedor varchar(50) DEFAULT '';
      DECLARE rut_proveedor varchar(20) DEFAULT '';
      DECLARE descripcion_compra varchar(100) DEFAULT '';
      DECLARE codigo_barra varchar(20) DEFAULT '';
      
      
      DECLARE contador int(11) DEFAULT 1;

      UPDATE productos SET 
        codigo_categoria_producto = codigo_categoria_producto,
        
        
        nombre_producto_venta = nombre_producto_venta,
        producto_descripcion_corta = producto_descripcion_corta,
        marca_producto = marca_producto,
        unidad_compra = unidad_compra,
        cantidad_compra = cantidad_compra,
        unidad_venta = unidad_venta,
        cantidad_venta = cantidad_venta,
        precio_venta_neto = precio_venta_neto,
        prioridad_precio_venta_neto = prioridad_precio_venta_neto,
        disponible_venta = disponible_venta,
        disponible_compra = disponible_compra,
        disponible_web = disponible_web
        
        
      WHERE id_producto = id; 
      
      
    DELETE FROM relacion_codigos_alternativos_productos WHERE `producto_id` = id;
    
    WHILE (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra')) != '') OR (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor')) != '')  DO
       
        
        SET rut_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Rut_proveedor'));
        SET codigo_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor'));
        SET descripcion_compra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Descripcion_compra'));
        SET codigo_barra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra'));
       
       	
        INSERT INTO relacion_codigos_alternativos_productos (`producto_id`, `proveedor_rut`, `codigo_producto_proveedor`, `descripcion_compra`, `codigo_barra`) 
        VALUES (id, rut_proveedor, codigo_proveedor, descripcion_compra, codigo_barra); 

         
        SET contador = contador + 1;
       END WHILE;
       
    
		
		SELECT "SUCCESS";
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarProveedores2XML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarProveedores2XML`(
	IN `param_xml` TEXT
)
    COMMENT 'posterior a la 1.7.0.0'
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;

	    DECLARE rut int(11) DEFAULT ExtractValue(xml, '//DProveedores/Rut');
      DECLARE dv char(1) DEFAULT ExtractValue(xml, '//DProveedores/Dv');
      DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DProveedores/Razon_social');
      DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DProveedores/Direccion');
      DECLARE comuna int(11) DEFAULT ExtractValue(xml, '//DProveedores/Comuna');
      DECLARE region char(50)	 DEFAULT ExtractValue(xml, '//DProveedores/Region');
      DECLARE ciudad int(11) DEFAULT ExtractValue(xml, '//DProveedores/Ciudad');
      DECLARE telefono char(50)	 DEFAULT ExtractValue(xml, '//DProveedores/Telefono');
      DECLARE email char(100) DEFAULT ExtractValue(xml, '//DProveedores/Email');
      DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DProveedores/Giro');
      DECLARE condicion_venta int(11) DEFAULT ExtractValue(xml, '//DProveedores/Condicion_venta');
      DECLARE forma_pago int(11) DEFAULT ExtractValue(xml, '//DProveedores/Forma_pago');
      DECLARE cantidad_dias int(11) DEFAULT ExtractValue(xml, '//DProveedores/Cantidad_dias');
      DECLARE credito_maximo int(11) DEFAULT ExtractValue(xml, '//DProveedores/Credito_maximo');
      DECLARE credito_utilizado int(11) DEFAULT ExtractValue(xml, '//DProveedores/Credito_utilizado');
      DECLARE credito_disponible int(11) DEFAULT ExtractValue(xml, '//DProveedores/Credito_disponible');
      DECLARE estado_cliente int(11) DEFAULT ExtractValue(xml, '//DProveedores/Estado_cliente');
      DECLARE contacto char(100) DEFAULT ExtractValue(xml, '//DProveedores/Contacto');
      DECLARE cuenta_contable varchar(15) DEFAULT ExtractValue(xml, '//DProveedores/Cuenta_contable');
      DECLARE lista_precios_var INT(11) DEFAULT ExtractValue(xml, '//DProveedores/Lista_precios');
      
      UPDATE `proveedores` SET 
			 `razon_social` = razon_social,
			 `direccion` = direccion,
			 `comuna` = comuna, 
			 `region` = region,
			 `ciudad` = ciudad,
			 `telefono` = telefono,
			 `email` = email,
			 `giro` = giro,
			 `condicion_venta` = condicion_venta,
			 `forma_pago` = forma_pago,
			 `cantidad_dias` = cantidad_dias,
			 `credito_maximo` = credito_maximo,
			 `credito_utilizado` = credito_utilizado,
			 `credito_disponible` = credito_disponible,
			 `estado_cliente` = estado_cliente,
			 `contacto` = contacto,
       cta_contable = cuenta_contable,
        listasprecios = lista_precios_var
			 WHERE `proveedores`.`rut` = rut;
       
       SELECT "SUCCESS";
      END;
      COMMIT;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarProveedorRazonGiroDirComCiuConRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarProveedorRazonGiroDirComCiuConRut`(
	IN `param_rut` VARCHAR(50),
	IN `param_razon` VARCHAR(400),
	IN `param_giro` VARCHAR(400),
	IN `param_dir` VARCHAR(400),
	IN `param_com` VARCHAR(200),
	IN `param_ciu` VARCHAR(200)


)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
	
		DECLARE id_comuna int(11) DEFAULT (SELECT C.comu_id FROM comunas AS C WHERE C.comu_nombre LIKE CONCAT('%', param_com ,'%') LIMIT 1);DECLARE id_ciudad int(11) DEFAULT (SELECT C.ciu_id FROM ciudades AS C WHERE C.ciu_nombre LIKE CONCAT('%', param_ciu ,'%') LIMIT 1);IF param_rut = '' THEN
      SELECT '1', 'Error', 'El rut no puede venir vacio';END IF;IF param_razon <> '' THEN
      UPDATE proveedores SET 
      `razon_social` = param_razon, 
      `direccion`= param_dir, 
      `giro`= param_giro 
      WHERE  `rut` = param_rut;END IF;IF id_comuna IS NOT NULL THEN
       UPDATE proveedores SET 
      `comuna` = id_comuna,
      `ciudad` = FUNCIDCiudadDesdeIDComuna(id_comuna)
      WHERE  `rut` = param_rut;END IF;SELECT "SUCCESS";END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `actualizarSucursales` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `actualizarSucursales`(
	IN `param_xml` TEXT
)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    

	    DECLARE id int(11) DEFAULT ExtractValue(xml, '//DSucursales/Id');
	    DECLARE nombre char(50) DEFAULT ExtractValue(xml, '//DSucursales/Nombre');
	    DECLARE id_lista_precio int(11) DEFAULT ExtractValue(xml, '//DSucursales/Id_lista_precio');
	    DECLARE direccion varchar(250) DEFAULT ExtractValue(xml, '//DSucursales/Direccion');
	    DECLARE comuna int(11) DEFAULT ExtractValue(xml, '//DSucursales/Comuna');
	    DECLARE ciudad int(11)	 DEFAULT ExtractValue(xml, '//DSucursales/Ciudad');
      DECLARE estado_sucursal char(1)	 DEFAULT ExtractValue(xml, '//DSucursales/Estado_sucursal');

		UPDATE `sucursales` SET 
			 `nombre` = nombre,
			 `id_lista_precio` = id_lista_precio, 
			 `comuna` = comuna,
       direccion = direccion,
			 `cuidad` = ciudad,
			 `estado_sucursal` = estado_sucursal 
			 WHERE `sucursales`.`id` = id;
	
		SELECT "SUCCESS";
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AjusteInventario` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `AjusteInventario`(
	IN `param_id_bodega` INT,
	IN `param_id_producto` INT,
	IN `param_cantidad_ajuste` DECIMAL(20,4),
	IN `param_mac` VARCHAR(100)
)
    COMMENT 'Es ajusta inventario'
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS LIMIT 1;
		ROLLBACK;
	END; 
	DECLARE EXIT HANDLER FOR SQLWARNING
	BEGIN
	 	SHOW WARNINGS LIMIT 1;
		ROLLBACK;
	END;

	START TRANSACTION;
	BEGIN
    
    DECLARE contexto_var VARCHAR(500) DEFAULT CONCAT('AjusteInvenrario param_id_bodega: ', param_id_bodega,
                                             ' param_id_producto: ', param_id_producto,
                                             ' param_cantidad_ajuste: ', param_cantidad_ajuste,
                                             ' param_mac: ' , param_mac);
                                             
    DECLARE pmp_actual_var DECIMAL(20,4);
    
    -- Contabilizacion
    
    DECLARE tipo_comprobante_var CHAR(1);
    -- se obtiene la id a insertar como cabecera
    DECLARE id_cabecera_var INT(11);
    -- se obtiene el numero siguiente del comprobante del tipo T
    DECLARE numero_comprobante_var INT(11);
    
    DECLARE cuenta_contable_ajuste_inventario INT(11);
    DECLARE cuenta_contable_existencia INT(11);
    
    DECLARE fecha_movimiento_var DATE DEFAULT CURDATE();
    
    DECLARE glosa_temporal VARCHAR(500) DEFAULT '';
    -- END contabilziacion
    
    
    SELECT
      E.cta_contable_existencia,
      E.cta_contable_ajuste_inventario
    INTO
      cuenta_contable_existencia,
      cuenta_contable_ajuste_inventario
    FROM empresas AS E
    LIMIT 1;
    
    
     IF cuenta_contable_existencia IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable EXISTENCIA POR DEFECTO', 'S');
  	END IF;
    IF cuenta_contable_ajuste_inventario IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable COSTO', 'S');
  	END IF;
    
    
    IF NOT EXISTS (SELECT 1 FROM productos AS P WHERE P.id_producto = param_id_producto LIMIT 1) THEN
      CALL errorCR(contexto_var, 'No se enconteo el producto', 'Y');
    END IF;
    
    IF param_cantidad_ajuste = 0 THEN
      CALL errorCR(contexto_var, 'Si la cantidad es cero no hay nada que ajustar', 'Y');
    END IF;
    
    SELECT
      P.costo_pmp
    INTO
      pmp_actual_var
    FROM productos AS P
    WHERE P.id_producto = param_id_producto
    LIMIT 1;
    
    
      
    
    CALL InsertarKardex('+', param_id_producto, param_id_bodega, '3', '0', param_cantidad_ajuste, pmp_actual_var, CURDATE(), param_mac);
    
    -- Contabilizacion
    
    
     -- se contabiliza el costo

      SET tipo_comprobante_var = 'T';
      SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
      SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
      
      SET glosa_temporal = CONCAT('Ajuste Inventario');
      
      -- Se inserta la cabecera de la contabilidad 
  	  INSERT INTO contab_diario_cabecera 
      (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
      VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1');
        
      INSERT INTO contab_diario_detalle
      (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`) 
      VALUES (id_cabecera_var, cuenta_contable_ajuste_inventario, glosa_temporal, 0, pmp_actual_var * param_cantidad_ajuste, tipo_comprobante_var);
      INSERT INTO contab_diario_detalle
      (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`) 
      VALUES (id_cabecera_var, cuenta_contable_existencia, glosa_temporal, pmp_actual_var * param_cantidad_ajuste, 0, tipo_comprobante_var);
    
    -- END contabilizacion
    
	  SELECT "SUCCESS", "", "";
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AnularGuiaDespacho` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `AnularGuiaDespacho`(
	IN `param_numero_guia` INT

,
	IN `param_glosa` VARCHAR(500),
	IN `param_mac` VARCHAR(50)



)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
      DECLARE tipo_documento int(11) DEFAULT 52;
      DECLARE id_bodega_var INT(11);
      DECLARE id_guia int(11) DEFAULT (SELECT E.id FROM encabezado_movimientos_guias AS E 
                                        WHERE
                                          E.numero_documento = param_numero_guia
                                          AND E.tipo_documento = tipo_documento
                                          LIMIT 1);
      
      IF id_guia IS NULL THEN
        CALL error(CONCAT('No se encontro la guia de despacho numero ', param_numero_guia));
      END IF;
      
      IF (SELECT E.anulacion FROM encabezado_movimientos_guias AS E WHERE E.id = id_guia LIMIT 1) = '1' THEN
        CALL error(CONCAT('La guia numero ', param_numero_guia, ' ya estaba anulada'));
      END IF;
      
      IF (SELECT E.id_movimiento_referencia FROM encabezado_movimientos_guias AS E WHERE E.id = id_guia LIMIT 1) <> '0' THEN
        CALL error(CONCAT('La guia numero ', param_numero_guia, ' ya fue usada'));
      END IF;
      
      SET id_bodega_var = (SELECT E.bodega_id FROM encabezado_movimientos_guias AS E WHERE E.id = id_guia LIMIT 1);
      
      -- se cambia el estado a la guia anulada, de lo sprimeros para que otro no la tome por alguna razon
      UPDATE encabezado_movimientos_guias AS E
      SET
        E.anulacion = '1',
        E.glosa_anulacion = param_glosa,
        E.fecha_anulacion = NOW()
      WHERE
        E.id = id_guia
      LIMIT 1;
      
      CALL CursorRevertirGuiaDespacho(id_guia, param_numero_guia, param_mac, id_bodega_var);
	    
      SELECT "SUCCESS";
      
      
  END;
    -- ROLLBACK;
    COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AnularLiberarCheque` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `AnularLiberarCheque`(
	IN `param_numero_cheque` INT,
	IN `param_id_cta_cte_banco` INT,
	IN `param_is_anulacion` CHAR(1),
	IN `param_fecha_anulacion_texto` DATE,
	IN `param_glosa_anulacion` VARCHAR(500)
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    
    DECLARE id_cheque_chequera_var int(11) DEFAULT (SELECT CC.id FROM cheques_chequera AS CC WHERE CC.id_cta_cte_banco = param_id_cta_cte_banco AND CC.num_cheque = param_numero_cheque LIMIT 1);
    DECLARE id_cabecera_pago_proveedores int(11) DEFAULT (SELECT C.id FROM cabecera_pago_proveedores AS C WHERE C.id_cta_cte_banco = param_id_cta_cte_banco AND C.num_cheque = param_numero_cheque LIMIT 1);
    DECLARE rut_proveedor_var int(11);
    DECLARE fecha_anulacion_var DATE;
    DECLARE cta_contable_banco int(11) DEFAULT (SELECT cta_c.cta_contable FROM ctas_ctes_bancos AS cta_c WHERE cta_c.id_cta_cte_banco = param_id_cta_cte_banco LIMIT 1);
    
    DECLARE id_cabecera_contable_var INT(11);
    
    IF id_cabecera_pago_proveedores IS NULL THEN
      CALL error("No se encontró la cabecera de pago proveedores");
    END IF;
    
    SELECT 
      CAB.rut,
      CAB.fecha_anulacion
    INTO 
      rut_proveedor_var,
      fecha_anulacion_var
    FROM cabecera_pago_proveedores AS CAB 
    WHERE 
      CAB.id = id_cabecera_pago_proveedores
    LIMIT 1
    ;
    
    SET rut_proveedor_var = (SELECT CAB.rut FROM cabecera_pago_proveedores AS CAB WHERE CAB.id = id_cabecera_pago_proveedores LIMIT 1);
    
    
      -- recupera un id contable si existe, requerimiento para no cntabilizar dos veces
      SET id_cabecera_contable_var = (
                                      SELECT 
                                        con_det.id_diario_cabecera 
                                      FROM contab_diario_detalle AS con_det 
                                      WHERE 
                                        con_det.documento = param_numero_cheque
                                        AND con_det.cuenta_contable = cta_contable_banco
                                        AND FUNCDiarioOrigen(con_det.id) = 'PAGOPROVEEDOR'
                                      LIMIT 1
                                      );
    
      IF param_is_anulacion = '1' THEN
        UPDATE cheques_chequera SET `estado`='1' WHERE  `id` = id_cheque_chequera_var;
        UPDATE cabecera_pago_proveedores SET `fecha_anulacion` = param_fecha_anulacion_texto, `glosa_anulacion` = param_glosa_anulacion  WHERE  `id` = id_cabecera_pago_proveedores;
        
        UPDATE detalle_pago_proveedores AS D
          INNER JOIN r_compra_sii AS E
            ON E.tipo_doc = D.tipo_doc_ref AND E.numero_doc = D.num_documento_ref AND E.rut = rut_proveedor_var
        SET
          E.monto_pagado = E.monto_pagado - D.monto_documento,
          E.monto_adeudado = E.monto_adeudado + D.monto_documento
        WHERE 
          D.num_cheque = param_numero_cheque
          AND D.id_cuenta = param_id_cta_cte_banco;
          
        UPDATE contab_diario_cabecera AS CDC
        SET CDC.vigente = '0'
        WHERE 
          CDC.id = id_cabecera_contable_var
        LIMIT 1;
        
      ELSE
        UPDATE cheques_chequera SET `estado`='0', `fecha_consumo` = NULL, `fecha_vencimiento` = NULL WHERE  `id` = id_cheque_chequera_var;
        UPDATE cabecera_pago_proveedores 
        SET 
          `tipo_pago`=NULL, 
          `rut`=NULL, 
          `fecha_emision`=NULL, 
          `fecha_cobro`=NULL,
          `fecha_vencimiento`=NULL, 
          `monto_cheque`=NULL, 
          `fecha_anulacion`=NULL, 
          `glosa_anulacion`=NULL,
          `glosa_cabecera`=NULL
        WHERE `id` = id_cabecera_pago_proveedores;
        
        DELETE det_p FROM detalle_pago_proveedores AS det_p WHERE det_p.id_cuenta = param_id_cta_cte_banco AND det_p.num_cheque = param_numero_cheque;
        
        
        CALL eliminarComprobanteContableDesdeID(id_cabecera_contable_var);
        
        /*
        -- Esto eliminaba la contraparte si tenia
         SET id_cabecera_contable_var = (
                                      SELECT 
                                        con_det.id_diario_cabecera 
                                      FROM contab_diario_detalle AS con_det 
                                      WHERE 
                                        con_det.documento = param_numero_cheque
                                        AND con_det.cuenta_contable = cta_contable_banco
                                      LIMIT 1
                                      );
         IF id_cabecera_contable_var IS NOT NULL THEN
            DELETE FROM contab_diario_cabecera WHERE contab_diario_cabecera.id = id_cabecera_contable_var;
            DELETE FROM contab_diario_detalle WHERE contab_diario_detalle.id_diario_cabecera = id_cabecera_contable_var;
         END IF; */
        
      END IF;

	   
		SELECT "SUCCESS";
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `arbolCambioNodo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `arbolCambioNodo`(
	IN `param_id_nodo` INT,
	IN `param_id_nodo_destino` INT


)
BEGIN 
  UPDATE arbol_categoria_productos SET `padre_id`=param_id_nodo_destino WHERE  `id`=param_id_nodo;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `arbolCrearCategoriaProductos` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `arbolCrearCategoriaProductos`(
	IN `param_nombre` VARCHAR(100),
	IN `param_codigo` VARCHAR(10),
	IN `param_descripcion` VARCHAR(200),
	IN `param_descripcion_abreviada` VARCHAR(200),
	IN `param_id_padre` INT






)
BEGIN
  INSERT INTO arbol_categoria_productos 
  (`nombre`, codigo, `padre_id`, descripcion, abreviacion) 
  VALUES 
  (param_nombre, param_codigo, param_id_padre, param_descripcion, param_descripcion_abreviada);
  
  SELECT LAST_INSERT_ID() AS id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `arbolEliminarCategoriaProductos` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `arbolEliminarCategoriaProductos`(
	IN `param_id` INT
















)
BEGIN
    
    
  
    
    
    DECLARE cantidad_productos_asociados_al_codigo int(11) DEFAULT (SELECT COUNT(*) FROM productos AS P
                                                                    INNER JOIN arbol_categoria_productos AS A 
                                                                      ON P.codigo_categoria_producto = A.codigo 
                                                                    WHERE A.id = param_id);
    IF cantidad_productos_asociados_al_codigo > 0 THEN
      SELECT CONCAT("Existen al menos un(", cantidad_productos_asociados_al_codigo ,") producto con ese codigo");
    ELSE
      DELETE FROM arbol_categoria_productos WHERE  id = param_id;
      SELECT "SUCCESS";
    END IF;
      
    
    
    
    
    
  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AsignarFechaCobroCheque` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `AsignarFechaCobroCheque`(
	IN `param_numero_cheque` INT,
	IN `param_id_cta_cte_banco` INT,
	IN `param_fecha_cobro_texto` VARCHAR(50)

)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    
    DECLARE id_cabecera_pago_proveedores int(11) DEFAULT (SELECT C.id FROM cabecera_pago_proveedores AS C WHERE C.id_cta_cte_banco = param_id_cta_cte_banco AND C.num_cheque = param_numero_cheque LIMIT 1);IF id_cabecera_pago_proveedores IS NULL THEN
      CALL error("No se encontró el cheque");END IF;UPDATE cabecera_pago_proveedores SET fecha_cobro = IF(param_fecha_cobro_texto = '' OR param_fecha_cobro_texto IS NULL, NULL, param_fecha_cobro_texto)  WHERE  `id` = id_cabecera_pago_proveedores;SELECT "SUCCESS";END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarBancoLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarBancoLikeNombre`(
	IN `param_like` VARCHAR(100)




)
BEGIN
  SELECT
    B.id_bancos,
    B.cod_banco,
    B.nom_banco
  FROM bancos AS B
  WHERE
    B.nom_banco like CONCAT('%', param_like ,'%')
    OR B.cod_banco like CONCAT('%', param_like ,'%');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarBodegaLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarBodegaLikeNombre`(
	IN `param_like` VARCHAR(100)

)
BEGIN

SELECT B.numero_bodega AS `Numero`, B.nombre_bodega AS `Nombre Bodega`, S.id AS ID, S.nombre AS `Nombre Sucursal` 
FROM bodegas AS B
INNER JOIN sucursales AS S
ON S.id = B.id_sucursal
WHERE B.nombre_bodega LIKE CONCAT('%',param_like ,'%');

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarBodegaLikeNombreYsucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarBodegaLikeNombreYsucursal`(
	IN `param_like` VARCHAR(100),
	IN `param_sucursal` INT(11)




)
BEGIN
  SELECT 
    B.id AS id_bodega,
    B.numero_bodega, 
    B.nombre_bodega, 
    S.id AS id_sucursal, 
    S.nombre
  FROM bodegas AS B
  INNER JOIN sucursales AS S
    ON S.id = B.id_sucursal
  WHERE 
    B.nombre_bodega LIKE CONCAT('%',param_like ,'%')
    AND IF(param_sucursal != 0, param_sucursal = S.id, 1=1);END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarBodegasDesdeMac` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarBodegasDesdeMac`(
	IN `param_mac` VARCHAR(50)

)
BEGIN
  SELECT B.id, B.id_sucursal, B.numero_bodega, B.nombre_bodega FROM bodegas AS B 
  WHERE 
    B.id_sucursal = FUNCidSucursalDesdeMAC(param_mac)
    AND B.estado_bodega = "1";
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCajaLike` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `buscarCajaLike`(
	IN `param_like` VARCHAR(200),
	IN `param_id_caja` INT




)
BEGIN
  SELECT 
    A.correlativo,
    A.id_caja,
    A.fecha_apertura, 
    A.fecha_cierre, 
    A.efectivo, 
    A.debito, 
    A.credito, 
    A.transferencia,
    A.cheque,
    A.convenio,
    A.gastos,
    A.venta AS total 
    FROM apertura_caja AS A 
    WHERE 
      IF(param_id_caja <> '0', A.id_caja = param_id_caja, 1=1) 
      AND A.fecha_cierre IS NOT NULL 
    ORDER BY A.id_apertura DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCajaLikeEntreFechas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `buscarCajaLikeEntreFechas`(
	IN `param_like` VARCHAR(200),
	IN `param_id_caja` INT,
	IN `param_fecha_inicio` DATETIME,
	IN `param_fecha_hasta` DATETIME
)
BEGIN
  SELECT 
    A.correlativo,
    A.id_caja,
    A.fecha_apertura, 
    A.fecha_cierre, 
    A.efectivo, 
    A.debito, 
    A.credito, 
    A.transferencia,
    A.cheque,
    A.convenio,
    A.gastos,
    A.venta,
    A.venta AS total
    FROM apertura_caja AS A 
    WHERE 
      IF(param_id_caja <> '0', A.id_caja = param_id_caja, 1=1) 
      AND A.fecha_cierre IS NOT NULL
      AND A.fecha_cierre BETWEEN param_fecha_inicio AND param_fecha_hasta
    ORDER BY A.id_apertura DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCajasLikeNombreYsucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCajasLikeNombreYsucursal`(
	IN `param_like` VARCHAR(100),
	IN `param_sucursal` INT(11)







)
BEGIN
  SELECT 
    C.id_caja,
    C.nombre_caja,
    C.monto_apertura
  FROM cajas AS C
  INNER JOIN sucursales AS S
    ON S.id = C.id_sucursal
  WHERE 
    (
      C.nombre_caja LIKE CONCAT('%',param_like ,'%')
      OR C.monto_apertura LIKE CONCAT('%',param_like ,'%')
    )
    AND IF(param_sucursal != 0, param_sucursal = S.id, 1=1)
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCajasPorID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCajasPorID`(
	IN `param_id_caja` INT
)
BEGIN
  SELECT C.id_caja, C.nombre_caja, C.mac_address_asignada FROM cajas AS C WHERE C.id_caja = param_id_caja LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCajasPorMac` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCajasPorMac`(
	IN `param_mac` VARCHAR(100)


)
BEGIN
  DECLARE id_caja int(11) DEFAULT 0;
  
  SET id_caja = (SELECT C.id_caja FROM cajas AS C WHERE C.mac_address_asignada = param_mac LIMIT 1);
  
  SELECT "SUCCESS", IFNULL(id_caja, 0);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCajasPorSucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCajasPorSucursal`(
	IN `param_id_sucursal` VARCHAR(50)



)
BEGIN
  SELECT C.id_caja, C.nombre_caja, C.mac_address_asignada FROM cajas AS C WHERE id_sucursal = param_id_sucursal ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarChequerasLike` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarChequerasLike`(
	IN `param_like` VARCHAR(250)


)
BEGIN
  SELECT 
	 C.id,
   (SELECT B.nom_banco FROM ctas_ctes_bancos AS CC INNER JOIN bancos AS B ON B.id_bancos = CC.id_bancos WHERE CC.id_cta_cte_banco = C.id_cta_cte_banco LIMIT 1) AS nombre_banco,
   (SELECT CC.num_cta_cte FROM ctas_ctes_bancos AS CC INNER JOIN bancos AS B ON B.id_bancos = CC.id_bancos WHERE CC.id_cta_cte_banco = C.id_cta_cte_banco LIMIT 1) AS numero_cuenta,
   C.numero_inicial,
   C.numero_final
	FROM chequeras AS C
  HAVING
    nombre_banco LIKE CONCAT('%',param_like , '%')
    OR numero_cuenta LIKE CONCAT('%',param_like , '%')
  ORDER BY C.id DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarChequesLikeNumero` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarChequesLikeNumero`(
	IN `param_like` VARCHAR(250),
	IN `param_is_solo_libres` CHAR(1),
	IN `param_is_banco` CHAR(1),
	IN `param_cuenta_id` INT



)
BEGIN

  SELECT 
	 C.num_cheque,
   (SELECT B.nom_banco FROM ctas_ctes_bancos AS CC INNER JOIN bancos AS B ON B.id_bancos = CC.id_bancos WHERE CC.id_cta_cte_banco = C.id_cta_cte_banco LIMIT 1) AS nombre_banco,
   (SELECT CC.num_cta_cte FROM ctas_ctes_bancos AS CC INNER JOIN bancos AS B ON B.id_bancos = CC.id_bancos WHERE CC.id_cta_cte_banco = C.id_cta_cte_banco LIMIT 1) AS numero_cuenta,
   C.tipo_pago,
   C.rut,
   C.monto_cheque,
   C.glosa_cabecera,
   (SELECT CC.id_bancos FROM ctas_ctes_bancos AS CC WHERE CC.id_cta_cte_banco = C.id_cta_cte_banco LIMIT 1) AS id_bancos,
   C.id_cta_cte_banco
	FROM cabecera_pago_proveedores AS C
	WHERE 
    (
      C.num_cheque LIKE CONCAT('%',param_like , '%')
      OR C.rut LIKE CONCAT('%', param_like, '%')
      OR C.glosa_cabecera LIKE CONCAT('%', param_like, '%')
    )
    AND IF(param_is_solo_libres, C.fecha_emision IS NULL, 1=1)
    AND IF(param_is_banco, param_cuenta_id = C.id_cta_cte_banco , 1=1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCiudadesLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCiudadesLikeNombre`(
	IN `param_like` VARCHAR(100)
)
BEGIN
  SELECT
    S.ciu_id,
    S.ciu_nombre
  FROM ciudades AS S
  WHERE
    S.ciu_nombre like CONCAT('%', param_like ,'%');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCiudadIDComuna` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCiudadIDComuna`(
	IN `param_id` INT



)
BEGIN	
	SELECT 
		C.ciu_id AS id,
		C.ciu_nombre AS nombre
	FROM ciudades AS C
		INNER JOIN ciudcom AS R
			ON C.ciu_id = R.ciu_id
	WHERE
		R.comu_id = param_id
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarClienteLikeRS` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarClienteLikeRS`(
	IN `param_like` VARCHAR(100)
)
BEGIN
	SELECT 
		P.razon_social AS Nombre, 
		P.rut AS Rut
	FROM proveedores AS P
	WHERE P.razon_social LIKE CONCAT('%', param_like, '%')
	LIMIT 1000;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarClientePendientesPagoLikeRS` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarClientePendientesPagoLikeRS`(
	IN `param_like` VARCHAR(150)
)
BEGIN
  SELECT 
		C.razon_social AS Nombre, 
		C.rut AS Rut,
    C.credito_utilizado
	FROM proveedores AS C
	WHERE 
    (
      C.razon_social LIKE CONCAT('%',param_like , '%')
      OR C.credito_utilizado LIKE CONCAT('%', param_like, '%')
    )
    AND C.credito_utilizado <> 0
	LIMIT 1000;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarClienteRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarClienteRut`(
	IN `param_rut` INT
)
    NO SQL
SELECT 
	C.rut,
	C.dv,
	C.razon_social,
	C.direccion,
	C.comuna,
	C.region,
	C.ciudad,
	C.telefono,
	C.email,
	C.giro,
	C.listasprecios,
	C.condicion_venta,
	C.forma_pago,
	C.cantidad_dias,
	C.credito_maximo,
	C.credito_utilizado,
	C.credito_disponible,
	C.estado_cliente,
	C.contacto,
	buscarComunaNombreByID(C.comuna) AS comuna_nombre, 
	buscarCiudadNombreByID(C.ciudad) AS ciudad_nombre
FROM proveedores AS C WHERE rut = param_rut LIMIT 1 ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarClienteRutSinEmailSii` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarClienteRutSinEmailSii`()
BEGIN
  SELECT C.rut, C.dv FROM proveedores AS C WHERE C.email_sii = '' OR C.email_sii IS NULL OR C.email_sii = '0' LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCompraLike` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCompraLike`(
	IN `param_like` VARCHAR(100)





)
    COMMENT 'desde la version 1.7.0.49 este metodo no deberia correr'
BEGIN
  SELECT 
    E.numero_documento AS `Numero Documento`,
    E.rut AS `Rut Proveedor`,
    E.`razon social` AS `Razon Social`,
    E.fecha AS Fecha,
    E.total_documento AS `Total Bruto`
  FROM encabezado_movimientos_compra AS E
  WHERE (
  E.`razon social` LIKE CONCAT('%',param_like,'%')
  OR E.total_documento LIKE CONCAT('%',param_like,'%')
  OR E.rut LIKE CONCAT('%',param_like,'%')
  OR E.numero_documento LIKE CONCAT('%',param_like,'%')
  ) AND E.tipo_documento = 33
  ORDER BY E.id DESC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCompraLikeYOpcionalRutProveedor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCompraLikeYOpcionalRutProveedor`(
	IN `param_like` VARCHAR(300),
	IN `param_rut_proveedor` VARCHAR(50)
,
	IN `param_tipo` INT


)
BEGIN
  SELECT 
    E.numero_documento AS `Numero Documento`,
    E.rut AS `Rut Proveedor`,
    E.`razon social` AS `Razon Social`,
    E.fecha AS Fecha,
    E.total_documento AS `Total Bruto`
  FROM encabezado_movimientos_compra AS E
  WHERE (
  E.`razon social` LIKE CONCAT('%',param_like,'%')
  OR E.total_documento LIKE CONCAT('%',param_like,'%')
  OR E.numero_documento LIKE CONCAT('%',param_like,'%')
  ) AND E.tipo_documento = param_tipo
  AND IF(param_rut_proveedor = '', 1 = 1, E.rut = param_rut_proveedor)
  ORDER BY E.id DESC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarComprobanteContableLike` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarComprobanteContableLike`(
	IN `param_like` VARCHAR(300),
	IN `param_tipo` CHAR(1),
	IN `param_ano` INT



)
BEGIN
  SELECT 
    E.numero_comprobante AS Numero,
    E.glosa_comprobante AS Glosa,
    E.fecha_comprobante AS Fecha,
    E.tipo_comprobante AS Tipo
  FROM contab_diario_cabecera AS E 
  WHERE
    IF(param_tipo = '', 1=1, E.tipo_comprobante = UPPER(param_tipo))
    AND IF(param_ano = '0', 1=1, YEAR(E.fecha_comprobante) = param_ano)
    AND E.glosa_comprobante LIKE CONCAT('%', param_like, '%')
  ORDER BY E.numero_comprobante DESC, E.fecha_comprobante DESC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarComunasLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarComunasLikeNombre`(
	IN `param_like` VARCHAR(100)
)
BEGIN
  SELECT
    S.comu_id,
    S.comu_nombre
  FROM comunas AS S
  WHERE
    S.comu_nombre like CONCAT('%', param_like ,'%');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarConceptoCajasLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarConceptoCajasLikeNombre`(
	IN `param_like` VARCHAR(200)
)
BEGIN
  SELECT 
    C.id,
    C.nombre,
    CASE
      WHEN C.tipo = 'I' THEN 'Ingreso'
      WHEN C.tipo = 'E' THEN 'Egreso'
      ELSE 'Desconocido'
    END,
    C.cuenta_contable
  FROM conceptos_ingresos_egresos_caja AS C 
  WHERE 
  C.nombre LIKE CONCAT('%', param_like, '%') 
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarConceptosLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarConceptosLikeNombre`(
	IN `param_like` VARCHAR(200)
)
BEGIN
  SELECT 
    C.id,
    C.nombre,
    C.sigla
  FROM conceptos AS C 
  WHERE 
  C.nombre LIKE CONCAT('%', param_like, '%') 
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCotizacionLikeRSOrRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCotizacionLikeRSOrRut`(
	IN `param_like` VARCHAR(100)


)
BEGIN
	SELECT 
		C.id as `N°`,
		C.rut AS Rut,
		C.`razon social` AS `Razon Social`
	FROM encabezado_cotizaciones AS C
	WHERE 
	(
	C.`razon social` LIKE CONCAT('%', param_like, '%')
	OR C.rut LIKE CONCAT('%', param_like, '%')
	)
	AND C.id_nota_venta = 0
	LIMIT 200;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarCuentaCorrienteLikeNumeroBancoMoneda` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarCuentaCorrienteLikeNumeroBancoMoneda`(
	IN `param_like` VARCHAR(100)





)
BEGIN
  SELECT
    C.id_cta_cte_banco,
    C.num_cta_cte,
    B.nom_banco,
    (SELECT M.nombre FROM monedas AS M WHERE M.id = C.id_moneda LIMIT 1) AS moneda
  FROM ctas_ctes_bancos AS C
  INNER JOIN bancos AS B
    ON C.id_bancos = B.id_bancos
  WHERE
    B.nom_banco like CONCAT('%', param_like ,'%')
    OR C.num_cta_cte like CONCAT('%', param_like ,'%');END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarDatosAperturaCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarDatosAperturaCaja`(
	IN `param_mac` VARCHAR(100)



)
BEGIN
  SELECT
   C.id_caja,
   C.nombre_caja,
   S.id AS id_sucursal,
   S.nombre AS nombre_sucursal,
   IFNULL((SELECT MAX(A.correlativo) + 1 FROM apertura_caja AS A WHERE A.id_caja = C.id_caja),0) AS correlativo,
   (SELECT COUNT(*) FROM apertura_caja AS A WHERE A.id_caja = C.id_caja AND A.fecha_cierre IS NULL) AS cajas_abiertas
   FROM cajas AS C
   INNER JOIN sucursales AS S
    ON S.id = C.id_sucursal
  WHERE C.mac_address_asignada = param_mac;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarDatosAperturaCaja3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `buscarDatosAperturaCaja3`(
	IN `param_mac` VARCHAR(100)

)
BEGIN
  DECLARE id_caja_var int(11) DEFAULT FUNCidCajaDesdeMAC(param_mac);
  DECLARE id_apertura_caja int(11) DEFAULT (SELECT A.id_apertura FROM apertura_caja AS A WHERE A.id_caja = id_caja_var ORDER BY A.correlativo DESC LIMIT 1);
  DECLARE correlativo_var int(11) DEFAULT 0;
  DECLARE monto_apertura int(11) DEFAULT (SELECT cajas.monto_apertura FROM cajas WHERE cajas.id_caja = id_caja_var LIMIT 1);
  
  IF id_apertura_caja IS NOT NULL THEN
    SElECT
      AP.correlativo + 1,
      IF((AP.monto_apertura + AP.diferencia) > 0 , AP.monto_apertura + AP.diferencia, monto_apertura)
    INTO
      correlativo_var,
      monto_apertura
    FROM apertura_caja AS AP
    WHERE AP.id_apertura = id_apertura_caja;
  END IF;
  
  SELECT
   C.id_caja,
   C.nombre_caja,
   S.id AS id_sucursal,
   S.nombre AS nombre_sucursal,
   correlativo_var AS correlativo,
   monto_apertura,
   (SELECT COUNT(*) FROM apertura_caja AS A WHERE A.id_caja = C.id_caja AND A.fecha_cierre IS NULL) AS cajas_abiertas
   FROM cajas AS C
   INNER JOIN sucursales AS S
    ON S.id = C.id_sucursal
  WHERE id_caja = id_caja_var;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarDatosEquipoDesdeMac` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarDatosEquipoDesdeMac`(
	IN `param_mac` VARCHAR(150)
)
BEGIN

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarDocumentoGuiaLikePorTipoTraslado` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarDocumentoGuiaLikePorTipoTraslado`(
	IN `param_like` VARCHAR(150),
	IN `param_tipo_traslado` VARCHAR(3)



)
BEGIN
  IF param_tipo_traslado = 1 THEN
    SELECT 
      E.numero_documento AS `#`,
      E.rut AS `Rut`,
      E.razon_social AS `Razon Social`,
      E.estado_dte AS `Estado`,
      E.direccion AS `Direccion`,
      ROUND(E.total_documento) AS `Total Documento`,
      DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS  `F doc`,
      IF(E.id_movimiento_referencia = 0, "No facturada", "Facturada") AS `Facturada`,
      IF(E.anulacion = 0, "Vigente", "Anulada") AS `Anulada`
    FROM encabezado_movimientos_guias AS E
    WHERE (
      E.razon_social LIKE CONCAT('%',param_like,'%')
      OR E.total_documento LIKE CONCAT('%',param_like,'%')
      OR E.rut LIKE CONCAT('%',param_like,'%')
      OR E.numero_documento LIKE CONCAT('%',param_like,'%')
      )
      AND E.tipo_traspaso = param_tipo_traslado
      ORDER BY E.numero_documento DESC
    LIMIT 1000;
  ELSEIF param_tipo_traslado = 5 THEN
    SELECT 
       E.numero_documento AS `#`,
      E.rut AS `Rut`,
      E.razon_social AS `Razon Social`,
      E.estado_dte AS `Estado`,
      E.direccion AS `Direccion`,
      ROUND(E.total_documento) AS `Total Documento`,
      DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS  `F doc`,
      IF(E.id_movimiento_referencia = 1, "Ingresada", "No ingresada") AS `Ingreso`,
      IF(E.anulacion = 0, "Vigente", "Anulada") AS `Anulada`
    FROM encabezado_movimientos_guias AS E
    WHERE (
      E.razon_social LIKE CONCAT('%',param_like,'%')
      OR E.total_documento LIKE CONCAT('%',param_like,'%')
      OR E.rut LIKE CONCAT('%',param_like,'%')
      OR E.numero_documento LIKE CONCAT('%',param_like,'%')
      )
      AND E.tipo_traspaso = param_tipo_traslado
      ORDER BY E.numero_documento DESC
    LIMIT 1000;
  ELSE
    SELECT 
      E.numero_documento AS `#`,
      E.rut AS `Rut`,
      E.razon_social AS `Razon Social`,
      E.estado_dte AS `Estado`,
      E.direccion AS `Direccion`,
      ROUND(E.total_documento) AS `Total Documento`,
      DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS `F doc`,
      IF(E.anulacion = 0, "Vigente", "Anulada") AS `Anulada`
    FROM encabezado_movimientos_guias AS E
    WHERE (
      E.razon_social LIKE CONCAT('%',param_like,'%')
      OR E.total_documento LIKE CONCAT('%',param_like,'%')
      OR E.rut LIKE CONCAT('%',param_like,'%')
      OR E.numero_documento LIKE CONCAT('%',param_like,'%')
      )
      AND E.tipo_traspaso = param_tipo_traslado
      ORDER BY E.numero_documento DESC
    LIMIT 1000;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarDocumentoGuiaLikePorTipoTraslado2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarDocumentoGuiaLikePorTipoTraslado2`(
	IN `param_like` VARCHAR(150),
	IN `param_tipo_traslado` VARCHAR(3)




,
	IN `param_ignorar_usados_anulado` CHAR(1),
	IN `param_rut` VARCHAR(50)
)
BEGIN

  DECLARE si_usada VARCHAR(50) DEFAULT 'Usada';
  DECLARE no_usada VARCHAR(50) DEFAULT 'NO Usada';
  
  IF param_tipo_traslado = 1 THEN
    SET si_usada = 'Facturada';
    SET no_usada = 'NO Facturada';
  ELSEIF param_tipo_traslado = 5 THEN
    SET si_usada = 'Ingresada';
    SET no_usada = 'NO Ingresada';
  END IF;
  
   SELECT 
      E.numero_documento,
      E.rut,
      E.razon_social,
      E.estado_dte,
      E.direccion,
      E.total_documento,
      E.fecha_documento,
      IF(E.id_movimiento_referencia = 0, no_usada, si_usada) AS `usada`,
      IF(E.anulacion = 0, "Vigente", "Anulada") AS `anulada`
    FROM encabezado_movimientos_guias AS E
    WHERE (
      E.razon_social LIKE CONCAT('%',param_like,'%')
      OR E.total_documento LIKE CONCAT('%',param_like,'%')
      OR E.rut LIKE CONCAT('%',param_like,'%')
      OR E.numero_documento LIKE CONCAT('%',param_like,'%')
      )
      AND E.tipo_traspaso = param_tipo_traslado
      AND IF(param_ignorar_usados_anulado = '1', E.id_movimiento_referencia = 0 AND E.anulacion = '0', 1=1)
      AND IF(param_rut = '', 1=1, E.rut = param_rut)
      ORDER BY E.numero_documento DESC
    LIMIT 1000;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarDocumentoPendientePagoPorRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarDocumentoPendientePagoPorRut`(
	IN `param_rut` VARCHAR(50)


)
BEGIN
  SELECT 
    false,
		E.numero_documento,
    E.tipo_documento,
    tipoDocumentoTextoAbreviado(E.tipo_documento) AS tipo_documento_text,
    DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento,
    DATE_FORMAT(E.fecha_vencimiento, "%d-%m-%Y") AS fecha_vencimiento,
    E.monto_adeudado,
    E.monto_adeudado AS monto_adeudado_2,
    E.id
	FROM encabezado_movimientos AS E
	WHERE 
    E.rut = param_rut 
    AND E.monto_adeudado > 0
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarDocumentoPendientePagoPorRutProveedores` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarDocumentoPendientePagoPorRutProveedores`(
	IN `param_rut` VARCHAR(50)
)
BEGIN
  SELECT 
    false,
		E.numero_doc AS numero_documento,
    E.tipo_doc AS tipo_documento,
    tipoDocumentoTextoAbreviado(E.tipo_doc) AS tipo_documento_text,
    DATE_FORMAT(E.fecha_doc, "%d-%m-%Y") AS fecha_documento,
    DATE_FORMAT(IFNULL(EM.fecha_vencimiento, E.fecha_doc), "%d-%m-%Y") AS fecha_vencimiento,
    E.monto_adeudado AS monto_adeudado,
    E.monto_adeudado AS monto_adeudado_2,
    E.id,
    IFNULL(EM.objetada, '1') AS objetada, 
    IFNULL(EM.glosa, 'DTE de servicio o no ingresado por compra') AS glosa
	FROM r_compra_sii AS E
    LEFT JOIN encabezado_movimientos_compra AS EM
    ON 
      EM.rut = E.rut
      AND EM.numero_documento = E.numero_doc
      AND EM.tipo_documento = E.tipo_doc
	WHERE 
    E.rut = param_rut 
    AND E.monto_adeudado > 0
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarDocumentoVentaLikePorTipoDocumento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarDocumentoVentaLikePorTipoDocumento`(
	IN `param_like` VARCHAR(150),
	IN `param_tipo_documento` VARCHAR(3)








)
BEGIN
  SELECT 
    E.numero_documento AS `Numero doc`,
    E.rut AS Rut,
    E.razon_social AS `Razon social`,
    E.estado_dte AS Estado,
    ROUND(E.total_documento) AS `Total`, 
    (SELECT S.nombre FROM sucursales AS S WHERE S.id = E.sucursal_id LIMIT 1) AS Sucursal
  FROM encabezado_movimientos AS E
  WHERE (
    E.razon_social LIKE CONCAT('%',param_like,'%')
    OR E.total_documento LIKE CONCAT('%',param_like,'%')
    OR E.rut LIKE CONCAT('%',param_like,'%')
    OR E.numero_documento LIKE CONCAT('%',param_like,'%')
    )
    AND E.tipo_documento = param_tipo_documento
    -- AND E.is_factura_guias = 0
    ORDER BY E.numero_documento DESC
  LIMIT 1000;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarDTESinEstado` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarDTESinEstado`()
BEGIN

	SELECT 
		E.trackid_dte, 
		F.rut_emisor, 
		1 AS faltante
	FROM encabezado_movimientos E 
		INNER JOIN hef_cafs_folios F 
			ON E.id_folio = F.id 
  WHERE 
  	(E.estado_dte = "" OR E.estado_dte = NULL OR E.estado_dte = 'XXX' OR E.estado_dte = 'CRT' OR E.estado_dte = '003') 
  	AND (E.trackid_dte != "" OR E.trackid_dte != NULL)
  	
  UNION ALL 
  SELECT 
		E.trackid_dte, 
		F.rut_emisor, 
		1 AS faltante 
	FROM encabezado_movimientos_guias E 
		INNER JOIN hef_cafs_folios F 
			ON E.id_folio = F.id 
  WHERE 
  	(E.estado_dte = "" OR E.estado_dte = NULL OR E.estado_dte = 'XXX' OR E.estado_dte = 'CRT' OR E.estado_dte = '003') 
  	AND (E.trackid_dte != "" OR E.trackid_dte != NULL)
  UNION ALL
   SELECT
    C.trackid_dte,
    (SELECT CONCAT(E.rut, '-', E.dv) FROM empresas AS E LIMIT 1) AS rut_emisor,
    1 AS faltante
   FROM consumo_folios AS C
   WHERE
    (C.estado_dte = "" OR C.estado_dte = NULL) 
    AND (C.trackid_dte != "" OR C.trackid_dte != NULL)
    LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarEmpresa` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarEmpresa`()
BEGIN
    SELECT 
			E.id, 
			E.rut, 
			E.dv, 
			E.razon_social, 
			E.codigo_actividad, 
			E.giro, 
			E.direccion, 
			buscarComunaNombreByID(E.comuna) AS comuna_nombre, 
			buscarCiudadNombreByID(E.ciudad) AS ciudad_nombre, 
			E.rut_representante_legal, 
			E.dv_representante_legal, 
			E.nombre_representante_legal, 
			E.direccion_representante_legal, 
			E.comuna_representante_legal, 
			E.ciudad_representante_legal, 
			E.iva, 
			E.ila, 
			E.otro_impuesto, 
			E.margen_minimo, 
			E.ajuste_precio, 
			E.ajusta_margen, 
			E.margen_a_nivel,
			E.sucursal_sii,
      E.prefijo_codigo_barra_ean13
		FROM empresas AS E LIMIT 1;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarEmpresaRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarEmpresaRut`(
	IN `param_rut` INT








)
BEGIN

SELECT 
			E.id, 
			E.rut, 
			E.dv, 
			E.razon_social, 
			E.codigo_actividad, 
			E.giro, 
			E.direccion, 
			buscarComunaNombreByID(E.comuna) AS comuna_nombre, 
			buscarCiudadNombreByID(E.ciudad) AS ciudad_nombre, 
			E.rut_representante_legal, 
			E.dv_representante_legal, 
			E.nombre_representante_legal, 
			E.direccion_representante_legal, 
			E.comuna_representante_legal, 
			E.ciudad_representante_legal, 
			E.iva, 
			E.ila, 
			E.otro_impuesto, 
			E.margen_minimo, 
			E.ajuste_precio, 
			E.ajusta_margen, 
			E.margen_a_nivel,
			E.sucursal_sii
		FROM empresas AS E LIMIT 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarEntidadLikeRazonSocialPorTipo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarEntidadLikeRazonSocialPorTipo`(
	IN `param_like` VARCHAR(300),
	IN `param_tipo_entidad` CHAR(1)




)
BEGIN
  SELECT  
    P.razon_social AS `Razon Social`,
    P.rut AS Rut
  FROM proveedores AS P
  WHERE
    P.razon_social LIKE CONCAT('%', param_like , '%')
    AND P.tipo_entidad = param_tipo_entidad
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarEntidadRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarEntidadRut`(
	IN `param_rut` VARCHAR(50)



)
BEGIN
  SELECT
    E.rut,
    E.dv,
    CONCAT(E.rut, '-', E.dv) AS rut_completo,
    E.razon_social,
    E.direccion
  FROM proveedores AS E
  WHERE E.rut = param_rut
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarEntidadRutTipo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarEntidadRutTipo`(
	IN `param_rut` VARCHAR(50),
	IN `param_tipo_entidad` CHAR(1)



)
BEGIN
  SELECT  
    P.rut,
    P.dv,
    P.razon_social
  FROM proveedores AS P
  WHERE
    P.rut = param_rut
    AND P.tipo_entidad = param_tipo_entidad
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarFacturadaGuias` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarFacturadaGuias`(
	IN `param_like` VARCHAR(150)

)
BEGIN
  SELECT 
    E.numero_documento,
    E.rut,
    E.razon_social,
    E.estado_dte,
    ROUND(E.total_documento) AS total_documento
  FROM encabezado_movimientos AS E
  WHERE (
    E.razon_social LIKE CONCAT('%',param_like,'%')
    OR E.total_documento LIKE CONCAT('%',param_like,'%')
    OR E.rut LIKE CONCAT('%',param_like,'%')
    OR E.numero_documento LIKE CONCAT('%',param_like,'%')
    )
    AND E.tipo_documento = 33
    AND E.is_factura_guias = 1
    ORDER BY E.numero_documento DESC
  LIMIT 1000;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarGuiaDespachoVentaLikePor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarGuiaDespachoVentaLikePor`(
	IN `param_like` VARCHAR(150)


)
BEGIN
  SELECT 
    E.numero_documento,
    E.rut,
    E.razon_social,
    E.estado_dte,
    ROUND(E.total_documento) AS total_documento
  FROM encabezado_movimientos_guias AS E
  WHERE (
    E.razon_social LIKE CONCAT('%',param_like,'%')
    OR E.total_documento LIKE CONCAT('%',param_like,'%')
    OR E.rut LIKE CONCAT('%',param_like,'%')
    OR E.numero_documento LIKE CONCAT('%',param_like,'%')
    )
    ORDER BY E.numero_documento DESC
  LIMIT 1000;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarGuiaPorRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarGuiaPorRut`(
	IN `param_rut` VARCHAR(50)

)
BEGIN
  SELECT
    E.numero_documento,
    E.tipo_documento
  FROM encabezado_movimientos_guias AS E
  WHERE
    E.rut = param_rut
    AND E.tipo_traspaso = 1
    AND E.id_movimiento_referencia = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarIngresoGuiasTraspasoLikeRazon` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarIngresoGuiasTraspasoLikeRazon`(
	IN `param_like` VARCHAR(100)



)
BEGIN
  SELECT
    E.id AS `ID`,
    E.rut AS `Rut Proveedor`,
    E.`razon social` AS `Razon Social`,
    E.fecha AS Fecha,
    E.total_documento AS `Total Bruto`
  FROM encabezado_movimientos_ingreso_guias AS E
  WHERE E.`razon social` LIKE CONCAT('%',param_like,'%')
  OR E.total_documento LIKE CONCAT('%',param_like,'%')
  OR E.rut LIKE CONCAT('%',param_like,'%')
  OR E.id LIKE CONCAT('%',param_like,'%')
  ORDER BY E.id DESC
  LIMIT 400;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarMarcaLikeDescripcion` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarMarcaLikeDescripcion`(
	IN `param_like` VARCHAR(150)




)
BEGIN
  SELECT U.id_marcas, U.desc_marcas FROM marcas AS U WHERE U.desc_marcas like CONCAT('%',param_like,'%');END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarMonedaLikeDescripcion` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarMonedaLikeDescripcion`(
	IN `param_like` VARCHAR(150)




)
BEGIN
  SELECT M.id, M.nombre FROM monedas AS M WHERE M.nombre like CONCAT('%',param_like,'%');END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarNCCompraLike` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarNCCompraLike`(
	IN `param_like` VARCHAR(100)


)
BEGIN
  SELECT 
    E.numero_documento AS `Numero Documento`,
    E.rut AS `Rut Proveedor`,
    E.`razon social` AS `Razon Social`,
    E.fecha AS Fecha,
    E.total_documento AS `Total Bruto`
  FROM encabezado_movimientos_compra AS E
  WHERE (
  E.`razon social` LIKE CONCAT('%',param_like,'%')
  OR E.total_documento LIKE CONCAT('%',param_like,'%')
  OR E.rut LIKE CONCAT('%',param_like,'%')
  OR E.numero_documento LIKE CONCAT('%',param_like,'%')
  ) AND E.tipo_documento = 61
  ORDER BY E.id DESC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarNotaVentaLikeRSOrRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarNotaVentaLikeRSOrRut`(
	IN `param_like` VARCHAR(150)

)
BEGIN
	SELECT 
		C.id as `N°`,
		C.rut AS Rut,
		C.`razon social` AS `Razon Social`,
    C.total_documento AS `Total documento`
	FROM encabezado_nota_venta AS C
	WHERE 
	(
	C.`razon social` LIKE CONCAT('%', param_like, '%')
	OR C.rut LIKE CONCAT('%', param_like, '%')
	)
	AND C.id_movimeinto = 0
  ORDER BY C.id DESC
	LIMIT 2000;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarOCLikeRutOrNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarOCLikeRutOrNombre`(
	IN `param_like` VARCHAR(100)


)
BEGIN
	SELECT 
		C.id,
    C.rut,
    (SELECT P.razon_social FROM proveedores AS P WHERE P.rut = C.rut LIMIT 1) AS razon_social,
    IFNULL((SELECT E.descripcion FROM estados_oc AS E WHERE E.id = C.estado LIMIT 1), 'SIN ESTADO') as estado
	FROM encabezado_oc AS C
	HAVING 
	(
	C.rut LIKE CONCAT('%', param_like, '%')
	OR razon_social LIKE CONCAT('%', param_like, '%')
  OR estado LIKE CONCAT('%', param_like, '%')
	);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarPagoConvenio` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `buscarPagoConvenio`(
	IN `param_like` VARCHAR(200)
)
BEGIN
  SELECT 
    E.id, 
    E.rut, 
    E.fecha, 
    E.glosa
  FROM encabezado_pagos AS E 
  WHERE 
    E.rut LIKE CONCAT('%',param_like,'%') 
    OR E.glosa LIKE CONCAT('%',param_like,'%') OR 
    E.fecha LIKE CONCAT('%',param_like,'%') 
  ORDER BY E.id DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `BuscarPFD4187` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `BuscarPFD4187`(
	IN `param_folio` INT,
	IN `param_tipo_DTE` INT


)
BEGIN
	IF param_tipo_DTE = 52 THEN
    SELECT
  	 E.pdf417,
  	 E.pdf417_size
  	FROM encabezado_movimientos_guias AS E
  	WHERE 
  	E.tipo_documento = param_tipo_DTE
  	AND E.numero_documento = param_folio
  	LIMIT 1
  	;
  ELSE 
    SELECT
  	 E.pdf417,
  	 E.pdf417_size
  	FROM encabezado_movimientos AS E
  	WHERE 
  	E.tipo_documento = param_tipo_DTE
  	AND E.numero_documento = param_folio
  	LIMIT 1
  	;
  END IF;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoConBodegas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `buscarProductoConBodegas`(
	IN `param_codigo` VARCHAR(50),
	IN `param_mac` VARCHAR(100)
)
BEGIN
    SELECT P.id_producto, P.nombre_producto_venta FROM productos AS P WHERE P.id_producto = idProductoDesdeCodigo(param_codigo);
    
    SELECT B.id, B.numero_bodega, B.nombre_bodega ,S.stock FROM stock_bodegas AS S INNER JOIN bodegas AS B ON B.id = S.id_bodega WHERE S.id_producto = idProductoDesdeCodigo(param_codigo);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoInventario` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoInventario`(
	IN `param_codigo_barra` VARCHAR(100),
	IN `param_id_bodega` INT
)
BEGIN
	SELECT 
		P.id_producto AS id,
		P.nombre_producto_venta AS descripcion  
	FROM productos AS P
		INNER JOIN
			stock_bodegas AS S
			ON 
			P.id_producto = S.id_producto
	WHERE 
		P.id_producto =  idProductoDesdeCodigo(param_codigo_barra)
		AND S.id_bodega = param_id_bodega
	LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoOC` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoOC`(
	IN `param_codigo` VARCHAR(100)


)
BEGIN
  DECLARE codigo_producto_var VARCHAR(100) DEFAULT idProductoDesdeCodigo(param_codigo);

  SELECT 
    P.id_producto,
    P.nombre_producto_venta,
    IFNULL(SUM(K.salida), 0) AS sum_salida, 
    P.stock_general,
    P.precio_ultima_compra,
    P.disponible_compra
  FROM productos AS P
    LEFT JOIN kardex AS K 
      ON P.id_producto = K.id_producto 
  WHERE 
    P.id_producto = codigo_producto_var
  GROUP BY P.id_producto 
  LIMIT 1
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoOC2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoOC2`(
	IN `param_codigo` VARCHAR(100)

,
	IN `param_rut_proveedor` VARCHAR(50),
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE,
	IN `param_modo_busqueda` CHAR(1)


)
BEGIN
  DECLARE codigo_producto_var VARCHAR(100);
  
  IF param_modo_busqueda = '0' THEN
    SET codigo_producto_var = idProductoDesdeCodigo(param_codigo);
  ELSE
    SET codigo_producto_var = (SELECT R.producto_id FROM relacion_codigos_alternativos_productos AS R WHERE R.codigo_producto_proveedor = param_codigo AND R.proveedor_rut = param_rut_proveedor LIMIT 1);
  END IF;
  
  
  IF codigo_producto_var IS NULL THEN
    CALL error('No se encontro el producto');
  END IF;

  SELECT 
    P.id_producto,
    P.nombre_producto_venta,
    (
    IFNULL((
      SELECT 
        SUM(IF(E.tipo_documento <> 61, D.cantidad, D.cantidad*-1))
      FROM 
        detalle_movimientos AS D
        INNER JOIN encabezado_movimientos AS E
          ON D.id_encabezado = E.id
      WHERE 
        D.producto_id = P.id_producto 
        AND E.fecha_documento BETWEEN  param_fecha_inicio AND param_fecha_termino
        AND (
          E.tipo_documento = 39 
          OR E.tipo_documento = 33
          OR E.tipo_documento = 61
          )
        AND E.is_factura_guias = 0
      ), 0)
      +
      IFNULL((
      SELECT 
        SUM(IF(G.tipo_documento <> 61, F.cantidad, F.cantidad*-1))
      FROM 
        detalle_movimientos_guias AS F
        INNER JOIN encabezado_movimientos_guias AS G
          ON F.id_encabezado = G.id
      WHERE 
        F.producto_id = P.id_producto 
        AND G.fecha_documento BETWEEN  param_fecha_inicio AND param_fecha_termino
        AND G.tipo_traspaso = 1
      ), 0)
    ) AS sum_salida,  
    P.stock_general,
    P.precio_ultima_compra,
    P.disponible_compra,
    (SELECT R.codigo_producto_proveedor FROM relacion_codigos_alternativos_productos AS R WHERE R.producto_id = P.id_producto AND R.proveedor_rut = param_rut_proveedor LIMIT 1) AS codigo_proveedor,
    (SELECT R.codigo_barra FROM relacion_codigos_alternativos_productos AS R WHERE R.producto_id = P.id_producto AND R.proveedor_rut = param_rut_proveedor LIMIT 1) AS codigo_barra
  FROM productos AS P
    LEFT JOIN kardex AS K 
      ON P.id_producto = K.id_producto 
  WHERE 
    P.id_producto = codigo_producto_var
  GROUP BY P.id_producto 
  LIMIT 1
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoPorCodigoProveedor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoPorCodigoProveedor`(
	IN `param_codigo_proveedor` VARCHAR(100),
	IN `param_rut` VARCHAR(50)


)
BEGIN
  SELECT 
    R.producto_id,
    R.descripcion_compra,
    R.codigo_barra
  FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = param_rut AND R.codigo_producto_proveedor = param_codigo_proveedor;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoPorCodigoProveedor2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoPorCodigoProveedor2`(
	IN `param_codigo_proveedor` VARCHAR(100),
	IN `param_rut` VARCHAR(50)






)
BEGIN
  DECLARE id_producto_var INT(11) DEFAULT (SELECT R.producto_id FROM relacion_codigos_alternativos_productos AS R 
                                              WHERE 
                                                R.proveedor_rut = param_rut 
                                                AND R.codigo_producto_proveedor = param_codigo_proveedor
                                              LIMIT 1 );
                                              
  DECLARE id_unidad_var INT(11) DEFAULT (SELECT P.unidad_venta FROM productos AS P WHERE P.id_producto = id_producto_var LIMIT 1);
  DECLARE desc_unidad_var VARCHAR(200) DEFAULT (SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = id_unidad_var LIMIT 1);
  
  
  SELECT 
      R.producto_id,
      R.descripcion_compra,
      R.codigo_barra,
      id_unidad_var AS unidad_compra,
      desc_unidad_var AS desc_unidad_compra,
      id_unidad_var AS unidad_venta,
      desc_unidad_var AS desc_unidad_venta,
      R.cantidad_compra,
      R.cantidad_venta
    FROM relacion_codigos_alternativos_productos AS R 
    WHERE 
      R.proveedor_rut = param_rut 
      AND R.codigo_producto_proveedor = param_codigo_proveedor
    LIMIT 1
    ;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductosCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductosCompra`(
	IN `param_codigo` VARCHAR(100),
	IN `param_cantidad` FLOAT(11,4),
	IN `param_porcentaje_descuento` INT








)
BEGIN
  SELECT
    P.id_producto,
  	P.nombre_producto_venta, 
  	P.precio_ultima_compra AS precio_ultima_compra, 
  	ROUND(P.precio_ultima_compra * (param_porcentaje_descuento/100)*param_cantidad, 4) AS monto_descuento,
    ROUND((P.precio_ultima_compra - (P.precio_ultima_compra * (param_porcentaje_descuento/100)))*param_cantidad, 4) AS total,
    P.disponible_compra,
    (SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = P.unidad_venta) AS unidad_compra
  FROM productos AS P
  WHERE 
    P.id_producto = idProductoDesdeCodigo(param_codigo); 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductosCompraCodigoYRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductosCompraCodigoYRut`(
	IN `param_codigo` VARCHAR(100),
	IN `param_cantidad` DECIMAL(14,4),
	IN `param_porcentaje_descuento` DECIMAL(10,4)
,
	IN `param_rut_proveedor` VARCHAR(50)


)
BEGIN
  
  DECLARE id_producto_var INT(11) DEFAULT (
    SELECT 
      R.producto_id 
    FROM relacion_codigos_alternativos_productos AS R 
    WHERE R.proveedor_rut = param_rut_proveedor
    AND R.codigo_producto_proveedor = param_codigo
    LIMIT 1
    );IF id_producto_var IS NULL THEN
    
      SELECT
        P.id_producto,
      	P.nombre_producto_venta, 
      	P.precio_ultima_compra AS precio_ultima_compra, 
      	ROUND(P.precio_ultima_compra * (param_porcentaje_descuento/100)*param_cantidad, 4) AS monto_descuento,
        ROUND((P.precio_ultima_compra - (P.precio_ultima_compra * (param_porcentaje_descuento/100)))*param_cantidad, 4) AS total,
        P.disponible_compra,
        IFNULL((SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = P.unidad_compra LIMIT 1), '-') AS unidad_compra,
        IFNULL((SELECT R.codigo_producto_proveedor FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = param_rut_proveedor AND R.producto_id = P.id_producto LIMIT 1), '') AS codigo_proveedor,
    IFNULL((SELECT R.codigo_barra FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = param_rut_proveedor AND R.producto_id = P.id_producto LIMIT 1), '') AS codigo_barra
      FROM productos AS P
      WHERE 
        P.id_producto = idProductoDesdeCodigo(param_codigo);ELSE
    
      SELECT
        P.id_producto,
      	P.nombre_producto_venta, 
      	P.precio_ultima_compra AS precio_ultima_compra, 
      	ROUND(P.precio_ultima_compra * (param_porcentaje_descuento/100)*param_cantidad, 4) AS monto_descuento,
        ROUND((P.precio_ultima_compra - (P.precio_ultima_compra * (param_porcentaje_descuento/100)))*param_cantidad, 4) AS total,
        P.disponible_compra,
        IFNULL((SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = P.unidad_compra LIMIT 1), '-') AS unidad_compra,
        IFNULL((SELECT R.codigo_producto_proveedor FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = param_rut_proveedor AND R.producto_id = P.id_producto LIMIT 1), '') AS codigo_proveedor,
        IFNULL((SELECT R.codigo_barra FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = param_rut_proveedor AND R.producto_id = P.id_producto LIMIT 1), '') AS codigo_barra
      FROM productos AS P
      WHERE 
        P.id_producto = id_producto_var;END IF;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductosCompraCodigoYRut2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductosCompraCodigoYRut2`(
	IN `param_codigo` VARCHAR(100),
	IN `param_cantidad` DECIMAL(14,4),
	IN `param_porcentaje_descuento` DECIMAL(10,4)
,
	IN `param_rut_proveedor` VARCHAR(50)







)
BEGIN

  
  DECLARE subfijo CHAR(1) DEFAULT '*';
  
  DECLARE id_var INT(11);
  
  DECLARE id_relacion_var INT(11);
  
  DECLARE codigo_proveedor VARCHAR(200) DEFAULT '';
  DECLARE codigo_barra VARCHAR(200) DEFAULT '';
  DECLARE cantidad_compra INT(11) DEFAULT 1;
  DECLARE cantidad_venta INT(11) DEFAULT 1;
  
  
  IF LOCATE(subfijo, param_codigo) = 1 THEN
    SET id_var = (SELECT R.producto_id FROM relacion_codigos_alternativos_productos AS R WHERE R.codigo_producto_proveedor = SUBSTRING(param_codigo, 2) AND R.proveedor_rut = param_rut_proveedor LIMIT 1);
  ELSE
    SET id_var = idProductoDesdeCodigo(param_codigo);
  END IF;

  SET id_relacion_var = (SELECT R.id_codigo_alternativo FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = param_rut_proveedor AND R.producto_id = id_var LIMIT 1);
  
  IF id_relacion_var IS NOT NULL THEN
  
    SELECT 
      R.codigo_producto_proveedor,
      R.codigo_barra,
      R.cantidad_compra,
      R.cantidad_venta
    INTO
      codigo_proveedor,
      codigo_barra,
      cantidad_compra,
      cantidad_venta
    FROM relacion_codigos_alternativos_productos AS R 
    WHERE R.id_codigo_alternativo = id_relacion_var LIMIT 1;
  
  END IF;
  
  SELECT
        P.id_producto,
      	P.nombre_producto_venta, 
      	P.precio_ultima_compra AS precio_ultima_compra, 
      	ROUND(P.precio_ultima_compra * (param_porcentaje_descuento/100)*param_cantidad, 4) AS monto_descuento,
        ROUND((P.precio_ultima_compra - (P.precio_ultima_compra * (param_porcentaje_descuento/100)))*param_cantidad, 4) AS total,
        P.disponible_compra,
        (SELECT U.id_unidades FROM unidades AS U WHERE U.id_unidades = P.unidad_venta LIMIT 1) AS id_unidad_compra,
        (SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = P.unidad_venta LIMIT 1) AS desc_unidad_compra,
        codigo_proveedor,
        codigo_barra,
        cantidad_compra,
        cantidad_venta
      FROM productos AS P
      WHERE 
        P.id_producto = id_var
      LIMIT 1;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductosInventarioLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductosInventarioLikeNombre`(
	IN `param_like` VARCHAR(100),
	IN `param_id_bodega` INT(11)


)
BEGIN
	SELECT 
		P.id_producto AS Codigo,
		P.codigo_barra AS Barra,
		P.nombre_producto_venta AS Nombre
	FROM productos AS P
	WHERE 
		P.nombre_producto_venta LIKE CONCAT('%', param_like, '%') OR 
		P.id_producto LIKE CONCAT('%', param_like, '%')
	LIMIT 200;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductosLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductosLikeNombre`(
	IN `param_like` VARCHAR(100),
	IN `param_mac` VARCHAR(100)
)
BEGIN
  DECLARE id_bodega int(11) DEFAULT idBodegaDesdeSucursal(idSucursalDesdeMac(param_mac));
	SELECT 
		P.id_producto AS Codigo,
    P.codigo_categoria_producto AS `Codigo Categoria`,
    (FUNCNombreUnidadDesdeId(P.unidad_venta)) AS `Unidad`,
		P.nombre_producto_venta AS Nombre,
    P.stock_general AS `Stock General`,
    B.stock AS `Stock Bodega`
	FROM productos AS P
  INNER JOIN stock_bodegas AS B
    ON 
      B.id_producto = P.id_producto
	WHERE 
		(
    P.nombre_producto_venta LIKE CONCAT('%', param_like, '%') 
    OR P.codigo_categoria_producto LIKE CONCAT('%', param_like, '%')
    )
    AND B.id_bodega = id_bodega
  ORDER BY P.nombre_producto_venta ASC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductosLikeNombreCodigoBarra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductosLikeNombreCodigoBarra`(
	IN `param_like` VARCHAR(250),
	IN `param_mac` VARCHAR(100)



)
BEGIN
  DECLARE id_bodega int(11) DEFAULT idBodegaDesdeSucursal(idSucursalDesdeMac(param_mac));
  DECLARE id_producto_var int(11) DEFAULT idProductoDesdeCodigo(param_like);
  
  SELECT 
		P.id_producto AS Codigo,
    P.codigo_categoria_producto AS `Codigo Categoria`,
    (FUNCNombreUnidadDesdeId(P.unidad_venta)) AS `Unidad`,
		P.nombre_producto_venta AS Nombre,
    P.stock_general AS `Stock General`,
    B.stock AS `Stock Bodega`
	FROM productos AS P
  INNER JOIN stock_bodegas AS B
    ON 
      B.id_producto = P.id_producto
	WHERE 
		(
    P.nombre_producto_venta LIKE CONCAT('%', param_like, '%') 
    OR P.codigo_categoria_producto LIKE CONCAT('%', param_like, '%')
    OR IF(id_producto_var IS NOT NULL, P.id_producto = id_producto_var, 0 = 1)
    )
    AND B.id_bodega = id_bodega
  ORDER BY P.nombre_producto_venta ASC
  ;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoTraspasoConStock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoTraspasoConStock`(
	IN `param_codigo` VARCHAR(100),
	IN `param_id_bodega` INT,
	IN `param_stock` INT

)
BEGIN
  DECLARE stock_bodega float(11,4);
  DECLARE id_producto int(11) DEFAULT idProductoDesdeCodigo(param_codigo);
  DECLARE permite_stock_negativo CHAR(1) DEFAULT (SELECT E.permite_stock_negativo FROM empresas AS E LIMIT 1);
  
  SET stock_bodega = (SELECT S.stock FROM stock_bodegas AS S WHERE S.id_bodega = param_id_bodega AND S.id_producto = id_producto LIMIT 1);
  
  SELECT 
    P.id_producto AS id,
    P.nombre_producto_venta AS descripcion,
    IFNULL(stock_bodega, 0 ) AS stock_bodega,
    permite_stock_negativo
  FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoVenta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoVenta`(
	IN `param_codigo_barra` VARCHAR(100),
	IN `param_iva` FLOAT,
	IN `param_id_lista_precio` INT








)
    NO SQL
BEGIN
 
 
 
 
    DECLARE id_producto INT(11) DEFAULT idProductoDesdeCodigo(param_codigo_barra);
    DECLARE porcentaje_iva INT(11) DEFAULT (SELECT E.iva FROM empresas AS E LIMIT 1);
    DECLARE prioridad_precio_venta_neto CHAR(1);
    DECLARE precio_venta_neto INT(11);
    
    SELECT P.prioridad_precio_venta_neto, P.precio_venta_neto INTO prioridad_precio_venta_neto, precio_venta_neto FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
    
    IF prioridad_precio_venta_neto = '1' THEN
  
    SELECT 
    	productos.nombre_producto_venta AS descripcion, 
    	ROUND(precio_venta_neto*(1+(porcentaje_iva/100))) AS precio_con_iva, 
    	ROUND(precio_venta_neto) AS precio_sin_iva, 
    	productos.costo_pmp AS consto_pmp 
    FROM productos 
    	INNER JOIN 
    		listasprecios 
    		ON 
    			productos.id_producto = listasprecios.producto_id
    WHERE 
      productos.id_producto =  id_producto
      AND listasprecios.numero_lista = param_id_lista_precio
      ;
    ELSE
    SELECT 
    	productos.nombre_producto_venta AS descripcion, 
    	ROUND((productos.precio_ultima_compra*(1+(listasprecios.margen_comercializacion/100)))*(1+(param_iva/100))) AS precio_con_iva, 
    	ROUND((productos.precio_ultima_compra*(1+(listasprecios.margen_comercializacion/100)))) AS precio_sin_iva, 
    	productos.costo_pmp AS consto_pmp 
    FROM productos 
    	INNER JOIN 
    		listasprecios 
    		ON 
    			productos.id_producto = listasprecios.producto_id
    WHERE 
      productos.id_producto =  id_producto
      AND listasprecios.numero_lista = param_id_lista_precio
      ;
    
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoVentaConStock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoVentaConStock`(
	IN `param_mac` CHAR(100),
	IN `param_codigo_barra` CHAR(100),
	IN `param_iva` FLOAT,
	IN `param_rut_cliente` VARCHAR(100)
)
    COMMENT 'falta elegir entre ultiam compra y pmp'
BEGIN

    
    DECLARE id_producto int(11) DEFAULT idProductoDesdeCodigo(param_codigo_barra);
    DECLARE permite_stock_negativo CHAR(1);
    DECLARE prioridad_precio_venta_neto CHAR(1);
    DECLARE precio_venta_neto float(11,4);
    DECLARE id_lista_precio int(11);
    DECLARE bodega int(11);
    DECLARE sucursal int(11);
    DECLARE stock float(11,4);
    DECLARE id_categoria int(11);
    DECLARE margen_categoria int(11);
    DECLARE porcentaje_descuento int(11);
    DECLARE metodo_ajusta_precio CHAR(1);
    DECLARE disponible_venta CHAR(1);
    DECLARE precio_base_venta float(11,4);
    DECLARE margen_minimo int(11);
    DECLARE nivel_margen CHAR(1);
    
    
    
    DECLARE descripcion VARCHAR(200);
    DEClARE precio_ultima_compra float(11,4);
    DECLARE costo_pmp float(11,4);
    DECLARE precio_con_iva float(11,4);
    DECLARE precio_sin_iva float(11,4);
       
    
    SET sucursal = idSucursalDesdeMac(param_mac);
    
    
    SET bodega = idBodegaDesdeSucursal(sucursal);
    
    
    
    IF param_rut_cliente != '' AND param_rut_cliente != "66666666" THEN
      SET id_lista_precio = (SELECT C.listasprecios FROM proveedores AS C WHERE C.rut = param_rut_cliente LIMIT 1);
    END IF;

    
    IF id_lista_precio IS NULL OR id_lista_precio = 0 THEN
      SET id_lista_precio = (SELECT S.id_lista_precio FROM sucursales AS S WHERE S.id = sucursal LIMIT 1);
    END IF;

    
    SET porcentaje_descuento = (SELECT L.porcentaje_sobre_lista_principal FROM lista_precio AS L WHERE L.id_lista_precio = id_lista_precio);
                                 
    
    SET stock = (SELECT S.stock FROM stock_bodegas AS S WHERE S.id_bodega = bodega AND S.id_producto = id_producto LIMIT 1);

    
    SELECT E.permite_stock_negativo , E.ajuste_precio, E.margen_minimo, E.margen_a_nivel
    INTO permite_stock_negativo, metodo_ajusta_precio, margen_minimo, nivel_margen
    FROM empresas AS E LIMIT 1;
    
    
    SELECT P.prioridad_precio_venta_neto, P.precio_venta_neto, idCategoriaNivelDesdeCodigoCategoria(P.codigo_categoria_producto, nivel_margen), P.nombre_producto_venta, P.precio_ultima_compra, P.costo_pmp, P.disponible_venta
    INTO prioridad_precio_venta_neto, precio_venta_neto , id_categoria, descripcion, precio_ultima_compra, costo_pmp, disponible_venta
    FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
    
    
    SET margen_categoria = (SELECT A.margen_categoria FROM arbol_categoria_productos AS A WHERE A.id = id_categoria LIMIT 1);
    
    IF metodo_ajusta_precio = "0" THEN 
      SET precio_base_venta = precio_ultima_compra;
    ELSEIF metodo_ajusta_precio = "1" THEN 
      SET precio_base_venta = costo_pmp;
    ELSE 
      IF precio_ultima_compra > costo_pmp THEN
        SET precio_base_venta = precio_ultima_compra;
      ELSE 
        SET precio_base_venta = costo_pmp;
      END IF;
    END IF;
    
    
    
    SET precio_con_iva = precio_base_venta*(1+(IF(margen_categoria-porcentaje_descuento < margen_minimo, margen_minimo, margen_categoria-porcentaje_descuento)/100))*(1+(param_iva/100));
    SET precio_sin_iva = precio_base_venta*(1+(IF(margen_categoria-porcentaje_descuento < margen_minimo, margen_minimo, margen_categoria-porcentaje_descuento)/100));

    IF prioridad_precio_venta_neto = '1' THEN                                       
      SELECT 
        id_producto,
      	descripcion, 
      	precio_venta_neto*(1+(param_iva/100)) AS precio_con_iva, 
    	  precio_venta_neto AS precio_sin_iva, 
      	costo_pmp,
        IFNULL(stock,0) AS stock,
        permite_stock_negativo,
        prioridad_precio_venta_neto,
        disponible_venta;
    ELSE
      SELECT 
        id_producto,
      	descripcion, 
      	precio_con_iva,
      	precio_sin_iva,
      	costo_pmp,
        IFNULL(stock,0) AS stock,
        permite_stock_negativo,
        prioridad_precio_venta_neto,
        disponible_venta;
    END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoVentaConStockPrecioBruto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoVentaConStockPrecioBruto`(
	IN `param_mac` VARCHAR(100),
	IN `param_codigo_barra` VARCHAR(100),
	IN `param_iva` DECIMAL(10,4),
	IN `param_rut_cliente` VARCHAR(15)
)
    COMMENT 'busca al producto por la id o codigo relacionado para delver los datos necesarios para la venta'
BEGIN

    
    DECLARE id_producto int(11) DEFAULT idProductoDesdeCodigo(param_codigo_barra);
    DECLARE permite_stock_negativo CHAR(1);
    DECLARE prioridad_precio_venta_neto CHAR(1);
    DECLARE precio_venta_neto float(11,4);
    DECLARE id_lista_precio int(11);
    DECLARE bodega int(11);
    DECLARE sucursal int(11);
    DECLARE stock float(11,4);
    DECLARE id_categoria int(11);
    DECLARE margen_categoria int(11);
    DECLARE porcentaje_descuento int(11);
    DECLARE metodo_ajusta_precio CHAR(1);
    DECLARE disponible_venta CHAR(1);
    DECLARE precio_base_venta float(11,4);
    DECLARE margen_minimo int(11);
    DECLARE nivel_margen CHAR(1);
    DECLARE unidad_venta int(11);
    
    
    
    DECLARE descripcion VARCHAR(200);
    DEClARE precio_ultima_compra float(11,4);
    DECLARE costo_pmp float(11,4);
    DECLARE precio_con_iva float(11,4);
    DECLARE precio_sin_iva float(11,4);
       
    
    SET sucursal = idSucursalDesdeMac(param_mac);
    
    
    SET bodega = idBodegaDesdeSucursal(sucursal);
    
    
    
    IF param_rut_cliente != '' AND param_rut_cliente != "66666666" THEN
      SET id_lista_precio = (SELECT C.listasprecios FROM proveedores AS C WHERE C.rut = param_rut_cliente LIMIT 1);
    END IF;

    
    IF id_lista_precio IS NULL OR id_lista_precio = 0 THEN
      SET id_lista_precio = (SELECT S.id_lista_precio FROM sucursales AS S WHERE S.id = sucursal LIMIT 1);
    END IF;

    
    SET porcentaje_descuento = (SELECT L.porcentaje_sobre_lista_principal FROM lista_precio AS L WHERE L.id_lista_precio = id_lista_precio);
                                 
    
    SET stock = (SELECT S.stock FROM stock_bodegas AS S WHERE S.id_bodega = bodega AND S.id_producto = id_producto LIMIT 1);

    
    SELECT E.permite_stock_negativo , E.ajuste_precio, E.margen_minimo, E.margen_a_nivel
    INTO permite_stock_negativo, metodo_ajusta_precio, margen_minimo, nivel_margen
    FROM empresas AS E LIMIT 1;
    
    
    SELECT P.prioridad_precio_venta_neto, P.precio_venta_neto, idCategoriaNivelDesdeCodigoCategoria(P.codigo_categoria_producto, nivel_margen), P.nombre_producto_venta, P.precio_ultima_compra, P.costo_pmp, P.disponible_venta, P.unidad_venta
    INTO prioridad_precio_venta_neto, precio_venta_neto , id_categoria, descripcion, precio_ultima_compra, costo_pmp, disponible_venta, unidad_venta
    FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
    
    
    SET margen_categoria = (SELECT A.margen_categoria FROM arbol_categoria_productos AS A WHERE A.id = id_categoria LIMIT 1);
    
    IF metodo_ajusta_precio = "0" THEN 
      SET precio_base_venta = precio_ultima_compra;
    ELSEIF metodo_ajusta_precio = "1" THEN 
      SET precio_base_venta = costo_pmp;
    ELSE 
      IF precio_ultima_compra > costo_pmp THEN
        SET precio_base_venta = precio_ultima_compra;
      ELSE 
        SET precio_base_venta = costo_pmp;
      END IF;
    END IF;
    
    
    
    SET precio_con_iva = precio_base_venta*(1+(IF(margen_categoria-porcentaje_descuento < margen_minimo, margen_minimo, margen_categoria-porcentaje_descuento)/100))*(1+(param_iva/100));
    SET precio_sin_iva = precio_base_venta*(1+(IF(margen_categoria-porcentaje_descuento < margen_minimo, margen_minimo, margen_categoria-porcentaje_descuento)/100));

    IF prioridad_precio_venta_neto = '1' THEN                                       
      SELECT 
        id_producto,
      	descripcion,
      	ROUND(precio_venta_neto*(1+(param_iva/100)),-1) AS precio_con_iva, 
    	  precio_venta_neto AS precio_sin_iva, 
      	costo_pmp,
        IFNULL(stock,0) AS stock,
        permite_stock_negativo,
        prioridad_precio_venta_neto,
        disponible_venta,
        unidad_venta, 
        FUNCNombreUnidadDesdeId(unidad_venta) AS unidad_venta_descripcion;
    ELSE
      SELECT 
        id_producto,
      	descripcion,
      	precio_con_iva,
      	precio_sin_iva,
      	costo_pmp,
        IFNULL(stock,0) AS stock,
        permite_stock_negativo,
        prioridad_precio_venta_neto,
        disponible_venta,
        unidad_venta,
        FUNCNombreUnidadDesdeId(unidad_venta) AS unidad_venta_descripcion;
    END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProductoVentaConStockPrecioCostoTraspaso` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProductoVentaConStockPrecioCostoTraspaso`(
	IN `param_codigo_barra` VARCHAR(100),
	IN `param_iva` DECIMAL(10,4),
	IN `param_mac` VARCHAR(100)
)
BEGIN

    
    DECLARE id_producto int(11) DEFAULT idProductoDesdeCodigo(param_codigo_barra);
    DECLARE permite_stock_negativo CHAR(1);
    DECLARE prioridad_precio_venta_neto CHAR(1);
    DECLARE precio_venta_neto float(11,4);
    DECLARE id_lista_precio int(11);
    DECLARE bodega int(11);
    DECLARE sucursal int(11);
    DECLARE stock float(11,4);
    DECLARE id_categoria int(11);
    DECLARE margen_categoria int(11);
    DECLARE porcentaje_descuento int(11);
    DECLARE metodo_ajusta_precio CHAR(1);
    DECLARE disponible_venta CHAR(1);
    DECLARE precio_base_venta float(11,4);
    DECLARE margen_minimo int(11);
    DECLARE nivel_margen CHAR(1);
    DECLARE unidad_venta int(11);
    
    
    
    DECLARE descripcion VARCHAR(200);
    DEClARE precio_ultima_compra float(11,4);
    DECLARE costo_pmp float(11,4);
    DECLARE precio_con_iva float(11,4);
    DECLARE precio_sin_iva float(11,4);
       
    
    SET sucursal = idSucursalDesdeMac(param_mac);
    
    
    SET bodega = idBodegaDesdeSucursal(sucursal);
                                 
    
    SET stock = (SELECT S.stock FROM stock_bodegas AS S WHERE S.id_bodega = bodega AND S.id_producto = id_producto LIMIT 1);

    
    SELECT E.permite_stock_negativo
    INTO permite_stock_negativo
    FROM empresas AS E LIMIT 1;
    
    
    SELECT P.nombre_producto_venta, P.costo_pmp, P.unidad_venta
    INTO descripcion, costo_pmp, unidad_venta
    FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
    
    
    SET precio_con_iva = costo_pmp;
    SET precio_sin_iva = costo_pmp;

    SELECT 
        id_producto,
      	descripcion,
      	precio_con_iva,
      	precio_sin_iva,
      	costo_pmp,
        IFNULL(stock,0) AS stock,
        permite_stock_negativo,
        disponible_venta,
        unidad_venta,
        FUNCNombreUnidadDesdeId(unidad_venta) AS unidad_venta_descripcion;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProveedorLikeRS` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProveedorLikeRS`(
	IN `param_like` TEXT
)
BEGIN
	SELECT 
		proveedores.razon_social AS Nombre, 
		proveedores.rut AS Rut
	FROM proveedores
	WHERE razon_social LIKE CONCAT('%', param_like, '%')
	LIMIT 200;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarProveedorRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarProveedorRut`(
	IN `param_rut` INT(12)
)
    NO SQL
SELECT 
	C.rut,
	C.dv,
	C.razon_social,
	C.direccion,
	C.comuna,
	C.region,
	C.ciudad,
	C.telefono,
	C.email,
	C.giro,
	C.listasprecios,
	C.condicion_venta,
	C.forma_pago,
	C.cantidad_dias,
	C.credito_maximo,
	C.credito_utilizado,
	C.credito_disponible,
	C.estado_cliente,
	C.contacto,
  C.cta_contable,
  IFNULL((SELECT R.descripcion FROM ctas_contables AS R WHERE R.cta_contable = C.cta_contable LIMIT 1), '') AS cta_contable_descripcion,
	buscarComunaNombreByID(C.comuna) AS comuna_nombre, 
	buscarCiudadNombreByID(C.ciudad) AS ciudad_nombre,
  C.email_sii
FROM proveedores AS C WHERE rut = param_rut LIMIT 1 ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarRegionLikeDescripcion` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarRegionLikeDescripcion`(
	IN `param_like` VARCHAR(150)



)
BEGIN
  SELECT R.reg_id, R.reg_nombre FROM regiones AS R WHERE R.reg_nombre like CONCAT('%',param_like,'%');END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `BuscarSolicitudMercaderiaLikeIDSuc` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `BuscarSolicitudMercaderiaLikeIDSuc`(
	IN `param_like` VARCHAR(100)
)
BEGIN
  SELECT
    E.id,
    E.fecha,
    (SELECT CONCAT(S.nombre, ' ', S.direccion) FROM sucursales AS S WHERE S.id = E.id_sucursal LIMIT 1) AS Sucursal
  FROM
    encabezado_sol_mercaderia AS E
  WHERE
    E.id like CONCAT('%', param_like,'%')
    OR E.id_sucursal like CONCAT('%', param_like,'%')
    OR E.fecha like CONCAT('%', param_like,'%');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarSucursalesLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarSucursalesLikeNombre`(
	IN `param_like` VARCHAR(100)
)
BEGIN
  SELECT
    S.id,
    S.nombre
  FROM sucursales AS S
  WHERE
    S.nombre like CONCAT('%', param_like ,'%');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarTraspasoLikeFechaBogedas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarTraspasoLikeFechaBogedas`(
	IN `param_like` VARCHAR(100),
	IN `param_mac` VARCHAR(150)
)
BEGIN
  SELECT 
    E.id_mov_inv AS ID,
    E.fecha AS Fecha,
    FUNCNombrePersonalizadoBodegaDesdeID(E.id_bodega_origen) AS `Bodega Origen`,
    FUNCNombrePersonalizadoBodegaDesdeID(E.id_bodega_destino) AS `Bodega Destino`
  FROM encabezado_movimiento_inventario AS E
  WHERE E.mac = param_mac
  AND (
     E.fecha like CONCAT('%',param_like ,'%')
    OR E.id_bodega_origen like CONCAT('%',param_like ,'%')
    OR E.id_bodega_destino like CONCAT('%',param_like ,'%')
  )
  LIMIT 200; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarUltimaCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarUltimaCompra`(
	IN `param_rut` INT,
	IN `param_filter` VARCHAR(50)



)
BEGIN
	IF param_filter != "" AND param_filter IS NOT NULL THEN
		SELECT 
			D.codigo_producto AS Codigo,
			D.descripcion AS Descripcion,
			DATE_FORMAT(D.fecha, "%d-%m-%Y") AS Fecha,
			D.precio_bruto_unit AS Precio
		FROM 
			encabezado_movimientos AS E
		INNER JOIN detalle_movimientos AS D
			ON E.id = D.id_encabezado
		WHERE
			E.rut = param_rut
			AND D.descripcion LIKE CONCAT('%', param_filter, '%')
		LIMIT 50;
	ELSE
		SELECT 
			D.codigo_producto AS Codigo,
			D.descripcion AS Descripcion,
			DATE_FORMAT(D.fecha, "%d-%m-%Y") AS Fecha,
			D.precio_bruto_unit AS Precio  
		FROM 
			encabezado_movimientos AS E
		INNER JOIN detalle_movimientos AS D
			ON E.id = D.id_encabezado
		WHERE
			E.rut = param_rut
		LIMIT 50;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarUnidadLikeDescripcion` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarUnidadLikeDescripcion`(
	IN `param_like` VARCHAR(150)

)
BEGIN
  SELECT U.id_unidades, U.desc_unidades FROM unidades AS U WHERE U.desc_unidades like CONCAT('%',param_like,'%');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarUnidadNegocioLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `buscarUnidadNegocioLikeNombre`(
	IN `param_like` VARCHAR(200)
)
BEGIN
  SELECT
    UN.id,
    UN.descripcion
  FROM unidades_negocio AS UN
  WHERE
    UN.descripcion LIKE CONCAT('%', param_like ,'%');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarVendedor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarVendedor`(
	IN `param_id` INT
)
BEGIN
  SELECT
    V.id,
    V.nombrecorto,
    V.nombrelargo
  FROM vendedores AS V
  WHERE V.id = param_id
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `buscarVendedorLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `buscarVendedorLikeNombre`(
	IN `param_like` VARCHAR(100)


)
BEGIN
  SELECT 
    V.id, 
    V.nombrecorto,
    V.nombrelargo
  FROM vendedores AS V 
  WHERE V.nombrecorto LIKE CONCAT('%', param_like, '%') 
  OR V.nombrelargo LIKE CONCAT('%', param_like, '%') 
  LIMIT 1000;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `cafGetFolio` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `cafGetFolio`(
	IN `param_rut_emisor` VARCHAR(10),
	IN `param_tipo` INT










)
BEGIN
    
   
	DECLARE id_folio int(10) DEFAULT (
												SELECT F.id ID
													FROM hef_cafs_folios F 
														INNER JOIN hef_cafs C
															ON C.id = F.id_caf
													WHERE 
														F.rut_emisor	= param_rut_emisor
														AND F.tipo_DTE = param_tipo
														AND F.estado = 0
														ORDER BY F.id ASC 
														LIMIT 1
												); 
												
	SET @NumeroFolio = NULL;
	
	IF id_folio IS NOT NULL THEN
		UPDATE hef_cafs_folios F
		SET	F.estado = 1,
				F.fecha_consumo = NOW()
		WHERE
			F.id = id_folio
		;
		
		SELECT 
			F.id				ID,
			F.rut_emisor 	RUT_EMISOR,
			F.tipo_DTE		TIPO,
			@NumeroFolio := F.folio			FOLIO,
			C.xml				XML
		FROM
			hef_cafs_folios	F
		INNER JOIN
			hef_cafs				C
				ON C.id = F.id_caf
		WHERE
			F.id = id_folio
		;
	END IF;
			
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `cierraCartola` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `cierraCartola`(
	IN `param_cuenta_corriente` INT,
	IN `param_mes` INT,
	IN `param_ano` INT,
	IN `param_saldo_final` INT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	
    DECLARE contexto_var VARCHAR(300);
    DECLARE id_bancos_saldos_mensuales_var INT(11);
    DECLARE fecha_proximo_periodo_var DATE DEFAULT DATE_ADD(DATE(CONCAT(param_ano,'-',param_mes,'-', 1)), INTERVAL 1 MONTH);
    DECLARE mes_proximo_periodo_var INT(11) DEFAULT MONTH(fecha_proximo_periodo_var);
    DECLARE ano_proximo_periodo_var INT(11) DEFAULT YEAR(fecha_proximo_periodo_var);
    DECLARE fecha_hora_actual_var TIMESTAMP DEFAULT NOW();
    
    SET id_bancos_saldos_mensuales_var = (SELECT
                                            B.id 
                                          FROM bancos_saldos_mensuales AS B
                                          WHERE
                                            B.cta_cte_banco = param_cuenta_corriente
                                            AND B.mes = param_mes
                                            AND B.agno = param_ano
                                          LIMIT 1);
                                          
    IF id_bancos_saldos_mensuales_var IS NULL THEN
      CALL errorCR(contexto_var, 'No se encontro el periodo correspondiente a cerrar', 'Y');
    ELSE
      UPDATE bancos_saldos_mensuales AS B
      SET
        B.fecha_cierre_conciliacion = fecha_hora_actual_var
      WHERE
        B.id = id_bancos_saldos_mensuales_var;
        
      INSERT INTO bancos_saldos_mensuales (cta_cte_banco, agno, mes, saldo_bancario_inicial) 
      VALUES 
        (
        param_cuenta_corriente,
        ano_proximo_periodo_var,
        mes_proximo_periodo_var,
        param_saldo_final
        )
      ON DUPLICATE KEY UPDATE
      saldo_bancario_inicial = param_saldo_final;
      
      SELECT "SUCCESS", fecha_hora_actual_var;
    END IF;
 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CierreCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `CierreCaja`(
	IN `param_mac` VARCHAR(100)
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE id_caja int(11) DEFAULT FUNCidCajaDesdeMAC(param_mac);
  
      UPDATE apertura_caja AS A SET `fecha_cierre`=NOW() WHERE A.id_caja = id_caja AND A.fecha_cierre IS NULL;

      SELECT "SUCCESS";
  END;
  
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CierreCaja2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `CierreCaja2`(
	IN `param_xml` TEXT

)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    
      DECLARE xml TEXT(50000) DEFAULT param_xml;
    	
	    
      DECLARE numero int(11) DEFAULT ExtractValue(xml, '//DCaja/Numero');
	    DECLARE correlativo int(11) DEFAULT ExtractValue(xml, '//DCaja/NumeroApertura');
      
	    DECLARE cant_efectivo int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantEfectivo');
      DECLARE cant_debito int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantTarjetaDebito');
      DECLARE cant_credito int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantTarjetaCredito');
      DECLARE cant_transferencia int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantTransferencia');
      DECLARE cant_cheque int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantCheques');
      
      DECLARE efectivo int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Efectivo');
      DECLARE debito int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/TarjetaDebito');
      DECLARE credito int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/TarjetaCredito');
      DECLARE transferencia int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Transferencia');
      DECLARE cheque int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Cheques');
      
      DECLARE gastos int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Gastos');
      
      
      DECLARE id_caja_abierta int(11) DEFAULT (SELECT B.id_apertura FROM apertura_caja AS B WHERE B.id_caja = id_caja AND B.correlativo = correlativo AND B.fecha_cierre IS NULL LIMIT 1);
      
      IF id_caja_abierta IS NOT NULL THEN
        UPDATE apertura_caja AS A 
        SET 
          A.fecha_cierre = NOW(), 
          
          A.cant_efectivo = cant_efectivo,
          A.cant_debito = cant_debito,
          A.cant_credito = cant_credito,
          A.cant_transferencia = cant_transferencia,
          A.cant_cheque = cant_cheque,
          
          A.efectivo = efectivo,
          A.debito = debito,
          A.credito = credito,
          A.transferencia = transferencia,
          A.cheque = cheque,
          
          A.gastos = gastos
        WHERE A.id_apertura =  id_caja_abierta;
      
        SELECT "SUCCESS", "", "";
      ELSE
        SELECT CONCAT("No se encontro la apertura numero ", correlativo, "de la caja ", numero), "", "";
      END IF;
  END;
  
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CierreCaja3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `CierreCaja3`(
	IN `param_xml` TEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    
      DECLARE xml TEXT(50000) DEFAULT param_xml;
    	
	    
      DECLARE numero int(11) DEFAULT ExtractValue(xml, '//DCaja/Numero');
	    DECLARE correlativo int(11) DEFAULT ExtractValue(xml, '//DCaja/NumeroApertura');
      
	    DECLARE cant_efectivo int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantEfectivo');
      DECLARE cant_debito int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantTarjetaDebito');
      DECLARE cant_credito int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantTarjetaCredito');
      DECLARE cant_transferencia int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantTransferencia');
      DECLARE cant_cheque int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantCheques');
      DECLARE cant_convenio int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/CantConvenio');
      
      DECLARE efectivo int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Efectivo');
      DECLARE debito int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/TarjetaDebito');
      DECLARE credito int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/TarjetaCredito');
      DECLARE transferencia int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Transferencia');
      DECLARE cheque int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Cheques');
      DECLARE convenio int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Convenio');
      
      DECLARE gastos int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Gastos');
      DECLARE diferencia int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/Direferencia');
      DECLARE total_venta int(11) DEFAULT ExtractValue(xml, '//DCaja/Resumen/TotalVenta');
            
      DECLARE id_caja_abierta int(11) DEFAULT (SELECT B.id_apertura FROM apertura_caja AS B WHERE B.id_caja = id_caja AND B.correlativo = correlativo AND B.fecha_cierre IS NULL LIMIT 1);
      
      IF id_caja_abierta IS NOT NULL THEN
        UPDATE apertura_caja AS A 
        SET 
          A.fecha_cierre = NOW(), 
          
          A.cant_efectivo = cant_efectivo,
          A.cant_debito = cant_debito,
          A.cant_credito = cant_credito,
          A.cant_transferencia = cant_transferencia,
          A.cant_cheque = cant_cheque,
          A.cant_convenio = cant_convenio,
          
          A.efectivo = efectivo,
          A.debito = debito,
          A.credito = credito,
          A.transferencia = transferencia,
          A.cheque = cheque,
          A.convenio = convenio,
          
          A.gastos = gastos,
          A.diferencia = diferencia,
          A.venta = total_venta
        WHERE A.id_apertura =  id_caja_abierta;
          
        CALL ContabilizarAperturaCajaBoletas(id_caja_abierta ,'Y');
        CALL CursorContabilizaMovimientoCaja(id_caja_abierta, 'Y');
      
        SELECT "SUCCESS", "", "";
      ELSE
        SELECT CONCAT("No se encontro la apertura numero ", correlativo, "de la caja ", numero), "", "";
      END IF;
  END;
  
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `comboListaPrecios` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `comboListaPrecios`()
BEGIN
  SELECT 
    0 AS id,
    "NINGUNA" AS nombre
  UNION ALL
  SELECT 
    L.id_lista_precio AS id,
    L.nombre_lista_precio AS nombre
  FROM lista_precio AS L;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `compara_r_compra_diario` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `compara_r_compra_diario`()
BEGIN
SELECT *
  FROM data_base_ct
 WHERE codct NOT IN (SELECT codigo_ct
                       FROM data_inicio_primera_etapa);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `conciliarCartolaBancoDetalleDiario` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `conciliarCartolaBancoDetalleDiario`(
	IN `param_id_cartola` INT,
	IN `param_id_diario_detalle` INT
)
BEGIN

    DECLARE mes_var INT(11);
    DECLARE ano_var INT(11);
    DECLARE fecha_cobro_var DATE;
    
    DECLARE id_detalle_diario_var INT(11);
    DECLARE id_cartola_banco_var INT(11);
    
    SET id_detalle_diario_var = (SELECT C.id FROM contab_diario_detalle AS C WHERE C.id = param_id_diario_detalle LIMIT 1);
    SET id_cartola_banco_var = (SELECT C.id FROM cartolaBancos AS C WHERE C.id = param_id_cartola LIMIT 1);
  
    IF id_detalle_diario_var IS NOT NULL AND id_cartola_banco_var IS NOT NULL THEN
    
      SELECT
        C.fecha,
        MONTH(C.fecha),
        YEAR(C.fecha)
      INTO
        fecha_cobro_var,
        mes_var,
        ano_var
      FROM cartolaBancos AS C
      WHERE
        C.id = id_cartola_banco_var
      LIMIT 1;
    
      UPDATE cartolaBancos AS CB
        SET 
          CB.id_comprobante_contable_conciliado = id_detalle_diario_var
        WHERE 
          CB.id = id_cartola_banco_var
        LIMIT 1;
        
        UPDATE contab_diario_detalle AS CDD
        SET
          CDD.mes_cartola_banco = mes_var,
          CDD.`año_cartola_banco` = ano_var,
          CDD.fecha_cobro = fecha_cobro_var
        WHERE
          CDD.id = id_detalle_diario_var;
      
      
        SELECT
          D.id,
          D.id_diario_cabecera,
          D.id AS id_detalle,
          D.fecha_documento,
          D.documento,
          (SELECT B0.fecha FROM cartolaBancos AS B0 WHERE B0.id_comprobante_contable_conciliado = D.id LIMIT 1) AS numero_dte,
          D.debe,
          D.haber,
          D.glosa_detalle AS glosa,
          C.tipo_comprobante AS tipo_comprobante,
          C.numero_comprobante AS numero_comprobante
        FROM contab_diario_detalle AS D 
        INNER JOIN contab_diario_cabecera AS C
          ON C.id = D.id_diario_cabecera
        WHERE
          D.id = id_detalle_diario_var
        LIMIT 1;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Consultas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `Consultas`()
BEGIN

  -- cartolas no contabilizadas
  /*
  SELECT *
  FROM cartolaBancos AS B
  WHERE NOT EXISTS (
  
    SELECT 1 FROM contab_diario_detalle AS CDD 
    WHERE 
      CDD.documento = B.numero_movimiento
      -- AND CDD.
    )
  AND B.rut IS NOT NULL AND B.nombre IS NOT NULL
  AND abono = 0;
  */
  
  -- completar mover desde cartola a pago proveedor
  /*
  SELECT * FROM cabecera_pago_proveedores AS C

    ;*/
  
  -- comprobantes contables no cuadrados
  /*
  SELECT C.* FROM contab_diario_cabecera AS C WHERE EXISTS (
                                                    SELECT 1 FROM contab_diario_detalle AS D 
                                                        WHERE 
                                                          D.id_diario_cabecera = C.id
                                                        GROUP BY D.id_diario_cabecera
                                                        HAVING
                                                          SUM(D.debe) <> SUM(D.haber)
        
                                                  );*/
                                                  
  -- diferencias entre debe-haber contabilidad                                            
  /*
  SELECT 
    C.id,
    SUM(D.debe),
    SUM(D.haber),
    SUM(D.debe) - SUM(D.haber),
    (SUM(D.debe) - SUM(D.haber)) - SUM(D.haber)
    FROM contab_diario_detalle AS D 
    INNER JOIN contab_diario_cabecera AS C
      ON D.id_diario_cabecera = C.id
    GROUP BY C.id
    HAVING 
      SUM(D.debe) <> SUM(D.haber)
    ;*/
    
    BEGIN  -- traspaso de pagos desde envabezado_movimiento_compra -> r_compra_sii
    
    /*
      UPDATE r_compra_sii AS E
      INNER JOIN encabezado_movimientos_compra AS EM
      ON 
        EM.rut = E.rut
        AND EM.numero_documento = E.numero_doc
        AND EM.tipo_documento = E.tipo_doc
        
      SET
        E.monto_pagar = EM.monto_pagar,
        E.monto_pagado = EM.monto_pagado;
      */
  END;
  
  -- inserta todo el el testing en orden_2 de la tabla detalle_pago_proveedores
  BEGIN
  /*
    INSERT INTO `orden_2`.`detalle_pago_proveedores` (`id_cuenta`, `num_cheque`, `monto_documento`, `tipo_doc_ref`, `fecha_documento_ref`, `num_documento_ref`, `fecha_vcto_documento`) 
    SELECT D.id_cuenta, D.num_cheque, D.monto_documento, D.tipo_doc_ref, D.fecha_documento_ref, D.num_documento_ref, D.fecha_vcto_documento FROM pitagoras_testing_3.detalle_pago_proveedores AS D;
  */
  END;
  
  -- monto documetos pagados hacia r_compra_sii
  BEGIN
    
    SELECT 
    IFNULL((
      SELECT 
        SUM(D.monto_documento)
      FROM cabecera_pago_proveedores AS C
      INNER JOIN detalle_pago_proveedores AS D
        ON C.id_cta_cte_banco = D.id_cuenta AND C.num_cheque = D.num_cheque
      WHERE
        R.rut = C.rut AND R.numero_doc = D.num_documento_ref  AND R.tipo_doc = D.tipo_doc_ref
        AND C.fecha_anulacion IS NULL
      ), 0) AS pagos,
      R.monto_total
    FROM r_compra_sii AS R;

  END;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `consultasTemporales` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `consultasTemporales`()
BEGIN
  INSERT IGNORE INTO proveedores(`rut`, `dv`, `razon_social`, `direccion`, `comuna`, `ciudad`, `telefono`, `email`, `giro`)
  SELECT SUBSTRING_INDEX(REPLACE(P.per_rut, 'P', ''), '-', 1), SUBSTRING_INDEX(P.per_rut, '-', -1), P.per_nombre, P.per_direccion, P.comu_id, P.ciu_id, P.tel_contacto, P.email_contacto1, P.per_giro FROM contab_personas AS P;
  -- ('3', '3', 'prueba', 'direcion', '1', 'tegion', '1', '123123', 'dawdawd@asd21', 'giro');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizaCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `ContabilizaCompra`(
	IN `param_id_movimiento_compra` INT,
	IN `param_lanza_errores` ENUM('Y','N')
)
BEGIN

  DECLARE tipo_comprobante_var CHAR(1) DEFAULT 'T';
  DECLARE id_cabecera_var INT(11) DEFAULT FUNCIDSiguienteCabeceraContable();
  DECLARE numero_comprobante_var INT(11);
  
  DECLARE cuenta_contable_var INT(11);
  DECLARE cuenta_contable_proveedores INT(11);
  DECLARE cuenta_contable_neto INT(11);
  DECLARE cuenta_contable_iva INT(11);
  DECLARE cuenta_contable_existencia INT(11);
  DECLARE cuenta_contable_devolucion INT(11);
  DECLARE cuenta_contable_ajuste_inventario INT(11);
  DECLARE cuenta_contable_costo_compra INT(11) DEFAULT '00000';    
  
  DECLARE glosa_temporal varchar(500) DEFAULT '';
  DECLARE origen_var CHAR(1) DEFAULT 'C';
  
  DECLARE tipo_documento_var INT(11);
  DECLARE numero_documento_var INT(11);
  DECLARE razon_social_var VARCHAR(500);
  DECLARE total_documento_var INT(11);
  DECLARE iva_documento_var INT(11);
  DECLARE neto_documento_var INT(11);
  DECLARE rut_var INT(11);
  DECLARE fecha_emision_var DATE;
  DECLARE fecha_vencimiento_var DATE;
  
  DECLARE costo_guia_devolucion_referenciada_var INT(11);
  
  DECLARE id_guia_devolucion_referenciada_var INT(11);
  
  DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('ContabilizarCompra param_id_movimiento_compra:', param_id_movimiento_compra, ' param_lanza_errores:', param_lanza_errores);
  DECLARE costo_venta_var INT(11);
  
  IF (SELECT COUNT(1) FROM encabezado_movimientos_compra AS E WHERE E.id = param_id_movimiento_compra LIMIT 1) = 0 THEN
    CALL errorCR(contexto_var, CONCAT('No se encontro el movimiento compra de id ' , param_id_movimiento), param_lanza_errores);
  END IF;
  
  SELECT
    E.cta_contable_iva_credito,
    E.cta_contable_proveedores,
    E.cta_contable_devolucion_existencia,
    E.cta_contable_ajuste_inventario
  INTO
    cuenta_contable_iva,
    cuenta_contable_proveedores,
    cuenta_contable_devolucion,
    cuenta_contable_ajuste_inventario
  FROM empresas AS E
  LIMIT 1;
  
  SELECT
    E.tipo_documento,
    E.numero_documento,
    E.`razon social`,
    E.total_documento,
    E.`monto iva`,
    E.neto,
    E.rut,
    E.fecha,
    E.fecha_vencimiento
  INTO
    tipo_documento_var,
    numero_documento_var,
    razon_social_var,
    total_documento_var,
    iva_documento_var,
    neto_documento_var,
    rut_var,
    fecha_emision_var,
    fecha_vencimiento_var
  FROM encabezado_movimientos_compra AS E
  WHERE
    E.id = param_id_movimiento_compra
  LIMIT 1;
  
  SELECT
    Cu.cta_contable
  INTO
    cuenta_contable_neto
  FROM proveedores AS P
    INNER JOIN ctas_contables AS Cu
      ON P.cta_contable = Cu.cta_contable
  WHERE
  P.rut = rut_var
  LIMIT 1;
  
  SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_emision_var);
  
  
  IF cuenta_contable_proveedores IS NULL THEN
    CALL error("No esta la cuenta contable PROVEEDORES");
  END IF;
  IF cuenta_contable_neto IS NULL THEN
    CALL error("No esta la cuenta contable asociada a este RUT");
  END IF;
  IF cuenta_contable_iva IS NULL THEN
    CALL error("No esta la cuenta contable IVA");
  END IF;
  

  IF (
        SELECT 
          IFNULL(COUNT(1), 0) FROM contab_diario_detalle AS D 
        WHERE 
          D.rut = rut_var 
          AND D.tipo_dte = CAST(tipo_documento_var AS CHAR)
          AND D.numero_dte = CAST(numero_documento_var  AS CHAR)
          AND FUNCDiarioOrigen(D.id) = 'COMPRA' 
        LIMIT 1 
      ) = 0 THEN
  
     SET glosa_temporal = CONCAT('COMPRA ', razon_social_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
    
     INSERT INTO contab_diario_cabecera 
      (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
      VALUES (id_cabecera_var, tipo_comprobante_var, fecha_emision_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
    
    
    IF tipo_documento_var = 61 THEN
      
      SET id_guia_devolucion_referenciada_var = (SELECT EMG.id FROM  encabezado_movimientos_guias AS EMG
                                                WHERE
                                                  EMG.tipo_traspaso = 7
                                                  AND id_movimiento_referencia = param_id_movimiento_compra
                                                LIMIT 1);
    
      IF id_guia_devolucion_referenciada_var IS NULL THEN
        INSERT INTO contab_diario_detalle
        (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
        VALUES (id_cabecera_var, cuenta_contable_proveedores, glosa_temporal, total_documento_var, 0, tipo_documento_var, numero_documento_var, rut_var, tipo_documento_var, numero_documento_var, fecha_emision_var, fecha_vencimiento_var, tipo_comprobante_var, origen_var);
        INSERT INTO contab_diario_detalle
        (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
        VALUES (id_cabecera_var, cuenta_contable_neto, glosa_temporal, 0, neto_documento_var, numero_documento_var,tipo_comprobante_var, origen_var);
        INSERT INTO contab_diario_detalle
        (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
        VALUES (id_cabecera_var, cuenta_contable_iva, glosa_temporal,  0, iva_documento_var, numero_documento_var, tipo_comprobante_var, origen_var);
      ELSE
        -- proveedores e iva son los mismos, son los valores totales e iva de NC
        INSERT INTO contab_diario_detalle
        (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
        VALUES (id_cabecera_var, cuenta_contable_proveedores, glosa_temporal, total_documento_var, 0, tipo_documento_var, numero_documento_var, rut_var, tipo_documento_var, numero_documento_var, fecha_emision_var, fecha_vencimiento_var, tipo_comprobante_var, origen_var);
         INSERT INTO contab_diario_detalle
        (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
        VALUES (id_cabecera_var, cuenta_contable_iva, glosa_temporal,  0, iva_documento_var, numero_documento_var, tipo_comprobante_var, origen_var);
        
        
        -- suma del costo de la guia
        
        SET costo_guia_devolucion_referenciada_var = (SELECT SUM(D.pmp_linea) FROM detalle_movimientos_guias AS D WHERE D.id_encabezado = id_guia_devolucion_referenciada_var);
        
        INSERT INTO contab_diario_detalle
        (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
        VALUES (id_cabecera_var, cuenta_contable_devolucion, glosa_temporal, 0, costo_guia_devolucion_referenciada_var, numero_documento_var,tipo_comprobante_var, origen_var);
        
        IF (neto_documento_var - costo_guia_devolucion_referenciada_var) <> 0 THEN
          INSERT INTO contab_diario_detalle
          (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
          VALUES (id_cabecera_var, cuenta_contable_ajuste_inventario, glosa_temporal, 0, (neto_documento_var - costo_guia_devolucion_referenciada_var), numero_documento_var,tipo_comprobante_var, origen_var);
        END IF;
        
      END IF;
      
    ELSE
      INSERT INTO contab_diario_detalle
      (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
      VALUES (id_cabecera_var, cuenta_contable_proveedores, glosa_temporal, 0, total_documento_var, tipo_documento_var, numero_documento_var, rut_var, tipo_documento_var, numero_documento_var, fecha_emision_var, fecha_vencimiento_var, tipo_comprobante_var, origen_var);
      INSERT INTO contab_diario_detalle
      (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
      VALUES (id_cabecera_var, cuenta_contable_neto, glosa_temporal, neto_documento_var, 0, numero_documento_var, tipo_comprobante_var, origen_var);
      INSERT INTO contab_diario_detalle
      (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
      VALUES (id_cabecera_var, cuenta_contable_iva, glosa_temporal, iva_documento_var, 0, numero_documento_var, tipo_comprobante_var, origen_var);
    END IF;
  
  END IF;
  
  
        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizaMovimientoCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `ContabilizaMovimientoCaja`(
	IN `param_id_detalle_movimiento_caja` INT,
	IN `param_lanza_errores` ENUM('Y','N')
)
BEGIN
  DECLARE tipo_comprobante_var CHAR(1) DEFAULT 'T';
  DECLARE id_cabecera_var INT(11);
  
  -- se obtiene el numero siguiente del comprobante del tipo T
  DECLARE numero_comprobante_var INT(11);
  DECLARE contexto_var VARCHAR(400) DEFAULT CONCAT('ContabilizaMovimientoCaja param_id_detalle_movimiento_caja: ', param_id_detalle_movimiento_caja);
  
  
  -- Caja
  DECLARE fecha_cierre_caja_var DATE;
  DECLARE numero_caja_var INT(11);
  DECLARE correlativo_caja_var INT(11); 
  DECLARE id_apertura_caja_var INT(11);
  -- END Caja
  
  -- Detalle movimiento
  DECLARE tipo_var CHAR(1); -- E; I;
  DECLARE id_concepto_caja_var INT(11);
  DECLARE descripcion_mov_caja_var VARCHAR(300) DEFAULT '';
  DECLARE comentario_var VARCHAR(300) DEFAULT '';
  DECLARE monto_var INT(11);
  DECLARE num_documento_var INT(11);
  DECLARE rut_var VARCHAR(100);
  DECLARE fecha_movimiento_var DATE;
  -- END Detlle movimiento
  
  -- cuentas contables
  DECLARE cuenta_contable_venta INT(11); -- resultado ventas
  DECLARE cuenta_contable_ajuste_caja INT(11); -- resultado ventas
  DECLARE cuenta_contable_caja INT(11); -- resultado ventas
  
  DECLARE cuenta_contable_concepto INT(11); -- asiganda
  -- END cuentas contables
  
  -- otros datos empresa
  DECLARE rut_empresa_var INT(11);
  -- END otros datos empresa
  
  -- boleta
  DECLARE id_boleta_var INT(11);
  DECLARE iva_boleta_var INT(11);
  DECLARE neto_boleta_var INT(11);
  DECLARE total_boleta_var INT(11);
  -- END boleta
  
  DECLARE glosa_temporal VARCHAR(500) DEFAULT '';
  
  SELECT
    E.cta_contable_resultado_venta,
    E.cta_contable_ajuste_caja,
    E.cta_contable_caja,
    E.rut
  INTO
    cuenta_contable_venta,
    cuenta_contable_ajuste_caja,
    cuenta_contable_caja,
    rut_empresa_var
  FROM empresas AS E
  LIMIT 1;
  
  SELECT 
    D.id_apertura_caja,
    D.tipo_detalle_mov_caja,
    D.id_concepto_caja,
    D.descripcion_mov_caja,
    D.comentario,
    D.monto_mov_caja,
    D.num_documento,
    D.rut,
    D.fecha,
    D.comentario
  INTO
    id_apertura_caja_var,
    tipo_var,
    id_concepto_caja_var,
    descripcion_mov_caja_var,
    comentario_var,
    monto_var,
    num_documento_var,
    rut_var,
    fecha_movimiento_var,
    comentario_var
  FROM det_movimientos_caja AS D
  WHERE
    D.id_detalle_mov_caja = param_id_detalle_movimiento_caja
  LIMIT 1;
  
  SELECT
    AC.fecha_cierre,
    AC.id_caja,
    AC.correlativo
  INTO
    fecha_cierre_caja_var,
    numero_caja_var,
    correlativo_caja_var
  FROM apertura_caja AS AC
  WHERE
    AC.id_apertura = id_apertura_caja_var
  LIMIT 1;
  
  SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_cierre_caja_var);
  SET cuenta_contable_concepto = (SELECT C.cuenta_contable FROM conceptos_ingresos_egresos_caja AS C WHERE C.id = id_concepto_caja_var LIMIT 1);
  
 
  IF fecha_cierre_caja_var IS NULL THEN
    CALL errorCR(contexto_var, 'esta caja no esta cerrada', 'Y');
  END IF;
  IF cuenta_contable_caja IS NULL THEN
    CALL errorCR(contexto_var, 'No esta la cuenta contable del CAJA', 'Y');
  END IF;
  IF cuenta_contable_concepto IS NULL THEN
    CALL errorCR(contexto_var, 'No esta la cuenta contable del CONCEPTO CAJA', 'Y');
  END IF;
  
  
  IF rut_empresa_var = SUBSTRING_INDEX(rut_var, '-', 1) THEN -- Comprobante reversa Venta
    IF cuenta_contable_venta IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable RESULTADO VENTAS', 'Y');
    END IF;
    IF cuenta_contable_ajuste_caja IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable AJUSTE CAJA', 'Y');
    END IF;
    
    SET tipo_comprobante_var = 'T';
    SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
    SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_cierre_caja_var);
    
    SET glosa_temporal = CONCAT('REVERSA VENTA por GASTO ', numero_caja_var, 'N°', correlativo_caja_var, ' ', descripcion_mov_caja_var, ' ', comentario_var, ' ', rut_var, ' N°doc', num_documento_var);
    
    -- obtener datos reales de la boleta si no se pueden obtener fallar
    SET id_boleta_var = (SELECT E.id FROM encabezado_movimientos AS E WHERE E.tipo_documento = 39 AND E.numero_documento = num_documento_var LIMIT 1);
    
    IF id_boleta_var IS NULL THEN
      CALL errorCR(contexto_var, CONCAT('No se encontro la boleta ', num_documento_var), 'Y');
    END IF;
    
    SELECT
      E.`monto iva`,
      E.neto,
      E.total_documento
    INTO
      iva_boleta_var,
      neto_boleta_var,
      total_boleta_var
    FROM encabezado_movimientos AS E 
    WHERE
      E.id = id_boleta_var
     LIMIT 1;
    
    
    IF total_boleta_var <> monto_var THEN
      CALL errorCR(contexto_var, CONCAT('El monto de la boleta ', num_documento_var, ' es distinto al gasto ingresado (boleta:', total_boleta_var,')'), 'Y');
    END IF;
    
    IF tipo_var <> 'E' THEN
      CALL errorCR(contexto_var, CONCAT('La boleta ', num_documento_var, ' es no esta como un egreso'), 'Y');
    END IF;
    
    
    
    -- Se inserta la cabecera de la contabilidad 
    INSERT INTO contab_diario_cabecera 
    (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
    VALUES (id_cabecera_var, tipo_comprobante_var, fecha_cierre_caja_var, numero_comprobante_var, glosa_temporal, '1');
      
    INSERT INTO contab_diario_detalle
    (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `documento`, `debe`, `haber`, `tipo_comprobante`, `fecha_documento`) 
    VALUES (id_cabecera_var, cuenta_contable_ajuste_caja, glosa_temporal, num_documento_var, iva_boleta_var, 0 , tipo_comprobante_var, fecha_movimiento_var);  
    INSERT INTO contab_diario_detalle
    (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `documento`, `debe`, `haber`, `tipo_comprobante`, `fecha_documento`) 
    VALUES (id_cabecera_var, cuenta_contable_venta, glosa_temporal, num_documento_var, neto_boleta_var, 0, tipo_comprobante_var, fecha_movimiento_var);  
    INSERT INTO contab_diario_detalle
    (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `documento`, `debe`, `haber`, `tipo_comprobante`, `fecha_documento`) 
    VALUES (id_cabecera_var, cuenta_contable_caja, glosa_temporal, num_documento_var, 0, total_boleta_var, tipo_comprobante_var, fecha_movimiento_var);
  
  END IF; -- END Comprobante reversa Venta
  
  
  -- Comprobante GASTO
  SET tipo_comprobante_var = 'E';
  SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
  SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_cierre_caja_var);
  
  SET glosa_temporal = CONCAT('GASTO Caja ', numero_caja_var, 'N°', correlativo_caja_var, ' ', descripcion_mov_caja_var, ' ', comentario_var, ' ', rut_var, ' N°doc', num_documento_var);
  
  -- Se inserta la cabecera de la contabilidad 
  INSERT INTO contab_diario_cabecera 
  (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
  VALUES (id_cabecera_var, tipo_comprobante_var, fecha_cierre_caja_var, numero_comprobante_var, glosa_temporal, '1');
    
  INSERT INTO contab_diario_detalle
  (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `documento`, `debe`, `haber`, `tipo_comprobante`, `fecha_documento`) 
  VALUES (id_cabecera_var, cuenta_contable_caja, glosa_temporal, num_documento_var, 0, IF(tipo_var = 'E', monto_var, monto_var*-1), tipo_comprobante_var, fecha_movimiento_var);
  INSERT INTO contab_diario_detalle
  (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `documento`, `debe`, `haber`, `tipo_comprobante`, `fecha_documento`) 
  VALUES (id_cabecera_var, cuenta_contable_concepto, glosa_temporal, num_documento_var, IF(tipo_var = 'E', monto_var, monto_var*-1), 0, tipo_comprobante_var, fecha_movimiento_var);  

  -- END compprbante GATO
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizarAperturaCajaBoletas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `ContabilizarAperturaCajaBoletas`(
	IN `param_id_apertura` INT,
	IN `param_lanza_errores` ENUM('Y','N')
)
BEGIN
  -- variables contabilidad
      -- el tipo que será este comprobante
    DECLARE tipo_comprobante_var CHAR(1) DEFAULT 'T';
    
    -- se obtiene la id a insertar como cabecera
    DECLARE id_cabecera_var INT(11) DEFAULT FUNCIDSiguienteCabeceraContable();
    
    -- se obtiene el numero siguiente del comprobante del tipo T
    DECLARE numero_comprobante_var INT(11);
    
    -- se declaran las cuentas
    DECLARE cuenta_contable_iva_debito INT(11); -- iva debito
    DECLARE cuenta_contable_ventas INT(11); -- resultado ventas
    
    DECLARE cuenta_contable_existencia INT(11); -- para el calculo del costo
    DECLARE cuenta_contable_costo_venta INT(11); -- para el calculo del costo

    
    DECLARE cuenta_contable_transbank_debito INT(11); -- tipo pago 1
    DECLARE cuenta_contable_transbank_credito INT(11); -- tipo pago 2
    DECLARE cuenta_contable_caja INT(11);   -- tipo pago 0
    DECLARE cuenta_contable_transferencia INT(11);   -- tipo pago 4 transferencia -- esto viene en el mismo pago
    DECLARE cuenta_contable_documento_por_cobrar INT(11);   -- tipo pago 3 cheque
    
    DECLARE glosa_temporal VARCHAR(500) DEFAULT '';
    DECLARE origen_var CHAR(1) DEFAULT 'V';

    -- end variables contables
    
    -- variables apertura caja
    
    DECLARE id_caja_var INT(11);
    DECLARE correlativo_var INT(11);
    
    DECLARE sucursal_var INT(11);
    
    DECLARE fecha_cierre_var DATE;
    
    -- detalle montos
    DECLARE monto_caja int(11);
    DECLARE monto_transbank_debito int(11);
    DECLARE monto_transbank_credito int(11);
    DECLARE monto_transferencia int(11);
    DECLARE monto_costo int(11);
    DECLARE monto_cheque INT(11);
    
    DECLARE monto_iva_var int(11) DEFAULT 0;
    DECLARE monto_neto_var int(11) DEFAULT 0;
    
    DECLARE numero_boleta_minimo_var INT(11);
    DECLARE numero_boleta_maximo_var INT(11);
    
    DECLARE relacion_I_T DECIMAL(20,10);
    
    -- pagos
    DECLARE total_pagos_I_var INT(11);
    DECLARE total_pagos_T_var INT(11);
    
    DECLARE iva_T_var INT(11);
    DECLARE neto_T_var INT(11);

    DECLARE iva_I_var INT(11);
    DECLARE neto_I_var INT(11);   
     
    -- fin variables documento
    -- variables del procedimiento
    
    DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('ContabilizarAperturaCajaBoletas param_id_apertura:', param_id_apertura, ' param_lanza_errores:', param_lanza_errores);
    -- end variables del procedimiento
    
    -- comprueba que la apertira existe
    IF (SELECT COUNT(1) FROM apertura_caja AS E WHERE E.id_apertura = param_id_apertura LIMIT 1) = 0 THEN
      CALL errorCR(contexto_var, CONCAT('No se encontro la paertura caja de id ' , param_id_apertura), param_lanza_errores);
    END IF;
    
    -- comprueba que apertura este cerrada
    IF (SELECT COUNT(1) FROM apertura_caja AS E WHERE E.id_apertura = param_id_apertura AND E.fecha_cierre IS NULL LIMIT 1) > 0 THEN
      CALL errorCR(contexto_var, CONCAT('La caja no esta cerrada ' , param_id_apertura), param_lanza_errores);
    END IF;

    -- se obtienen las cuentas desde la empresa
    SELECT
      E.cta_contable_iva_debito,
      E.cta_contable_resultado_venta,
      E.cta_contable_caja,
      E.cta_contable_existencia,
      E.cta_contable_transbank_debito,
      E.cta_contable_transbank_credito,
      E.cta_contable_documentos_por_cobrar, -- evaluar si se esta usando
      E.cta_contable_costo_venta
    INTO
      cuenta_contable_iva_debito,
      cuenta_contable_ventas,
      cuenta_contable_caja,
      cuenta_contable_existencia,
      cuenta_contable_transbank_debito,
      cuenta_contable_transbank_credito,
      cuenta_contable_documento_por_cobrar,
      cuenta_contable_costo_venta
    FROM empresas AS E
    LIMIT 1;
    
    SET cuenta_contable_transferencia = 1;
      
    -- si hay alguna cuenta sin valor, saltara un error
    IF cuenta_contable_iva_debito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable IVA DEBITO', 'S');
    END IF;
    IF cuenta_contable_ventas IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable RESULTADO VENTAS', 'S');
    END IF;
    IF cuenta_contable_transbank_debito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA DEBITO', 'S');
    END IF;
     IF cuenta_contable_transbank_credito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA CREDITO', 'S');
    END IF;
     IF cuenta_contable_documento_por_cobrar IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable DOCUMENTOS POR COBRAR', 'S');
    END IF;
    IF cuenta_contable_caja IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable CAJA', 'S');
    END IF;
    IF cuenta_contable_existencia IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable EXISTENCIA POR DEFECTO', 'S');
    END IF;
    
    -- recolectar valores de la cabecera
    SELECT
      E.id_caja,
      E.correlativo,
      E.fecha_cierre
    INTO
      id_caja_var,
      correlativo_var,
      fecha_cierre_var
    FROM apertura_caja AS E
    WHERE 
      E.id_apertura = param_id_apertura 
    LIMIT 1;
    
    SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_cierre_var);
    
    SET sucursal_var = (SELECT
                          IFNULL(Ca.id_sucursal, 0)
                        FROM 
                          cajas AS Ca
                        WHERE
                          Ca.id_caja = id_caja_var
                        LIMIT 1
                        );
    
    -- RECOLEXCION DE RESUMENTES
      
          -- costo
        SELECT
          IFNULL(SUM(D.pmp_linea), 0),
          MIN(E.numero_documento),
          MAX(E.numero_documento)
        INTO
          monto_costo,
          numero_boleta_minimo_var,
          numero_boleta_maximo_var
        FROM encabezado_movimientos AS E
        INNER JOIN detalle_movimientos AS D
        ON D.id_encabezado = E.id
        WHERE 
          E.correlativo = correlativo_var
          AND E.caja_id = id_caja_var
          AND E.tipo_documento = 39;
     
          -- EFECTIVO 
        SELECT
          IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_caja
        FROM encabezado_movimientos AS E
        RIGHT JOIN pagos_movimientos AS P
        ON P.id_movimiento = E.id
        WHERE 
          P.forma_pago = 0
          AND P.correlativo_caja = correlativo_var
          AND P.id_caja = id_caja_var
          AND E.tipo_documento = 39;
                      
          -- monto_transBack debito      
        SELECT
           IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_transbank_debito
        FROM encabezado_movimientos AS E
        RIGHT JOIN pagos_movimientos AS P
        ON P.id_movimiento = E.id
        WHERE 
          P.forma_pago = 2
          AND P.correlativo_caja = correlativo_var
          AND P.id_caja = id_caja_var
          AND E.tipo_documento = 39;
          
            -- monto_transBack  credito       
        SELECT
           IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_transbank_credito
        FROM encabezado_movimientos AS E
        RIGHT JOIN pagos_movimientos AS P
        ON P.id_movimiento = E.id
        WHERE 
          P.forma_pago = 1
          AND P.correlativo_caja = correlativo_var
          AND P.id_caja = id_caja_var
          AND E.tipo_documento = 39;
          
         -- monto_cheque
        SELECT
            IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_cheque
        FROM encabezado_movimientos AS E
        RIGHT JOIN pagos_movimientos AS P
        ON P.id_movimiento = E.id
        WHERE 
          P.forma_pago = 3
          AND P.correlativo_caja = correlativo_var
          AND P.id_caja = id_caja_var
          AND E.tipo_documento = 39;

         -- monto_transferencia
        SELECT
            IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_transferencia
        FROM encabezado_movimientos AS E
        RIGHT JOIN pagos_movimientos AS P
        ON P.id_movimiento = E.id
        WHERE 
          P.forma_pago = 4
          AND P.correlativo_caja = correlativo_var
          AND P.id_caja = id_caja_var
          AND E.tipo_documento = 39;
                                  
      
       -- monto_neto_iva
        SELECT
          IFNULL(SUM(E.`monto iva`), 0),
          IFNULL(SUM(E.neto),0)
        INTO
          monto_iva_var,
          monto_neto_var
        FROM encabezado_movimientos AS E
        WHERE
          EXISTS (
            SELECT 
              1 
            FROM pagos_movimientos AS P 
            WHERE 
              P.forma_pago = 0
              OR P.forma_pago = 4
            )
          AND E.correlativo = correlativo_var
          AND E.caja_id = id_caja_var
          AND E.tipo_documento = 39
          ;

          SET total_pagos_I_var = monto_transferencia + monto_caja;
          SET total_pagos_T_var = monto_transbank_debito + monto_transbank_credito + monto_cheque;
          
          IF total_pagos_T_var = 0 THEN
            SET relacion_I_T = 0;
          ELSE
            SET relacion_I_T = (total_pagos_T_var*100)/(total_pagos_I_var + total_pagos_T_var);
          END IF;
          
          
          SET iva_T_var = ROUND(monto_iva_var * (relacion_I_T/100));
          SET neto_T_var = total_pagos_T_var - iva_T_var;
          
          SET iva_I_var = monto_iva_var - iva_T_var;
          SET neto_I_var = total_pagos_I_var - iva_I_var;

     -- END RECOLECCION DE RESUMENTEs
    
               
        -- CONTABILIZA COSTO
        IF monto_costo > 0 THEN
        SET glosa_temporal = CONCAT('COSTO VENTA Caja ', id_caja_var, 'N° ', correlativo_var, ' SUC ', sucursal_var);
        
          -- Se inserta la cabecera de la contabilidad 
          INSERT INTO contab_diario_cabecera 
          (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
          VALUES (id_cabecera_var, tipo_comprobante_var, fecha_cierre_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
            
          INSERT INTO contab_diario_detalle
          (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
          VALUES (id_cabecera_var, cuenta_contable_costo_venta, glosa_temporal, 0, -1*monto_costo, tipo_comprobante_var, origen_var);
          INSERT INTO contab_diario_detalle
          (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
          VALUES (id_cabecera_var, cuenta_contable_existencia, glosa_temporal, -1*monto_costo, 0, tipo_comprobante_var, origen_var);
        END IF;
        -- END CONTABILIZA COSTO
    

        -- se contabiliza pagos solo efectivo y transferencia
        
        
        IF total_pagos_I_var > 0 THEN
            SET tipo_comprobante_var = 'I';
            SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
            SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_cierre_var);
            
            SET glosa_temporal = CONCAT('CIERRE Caja ', id_caja_var, 'N° ', correlativo_var, ' SUC ', sucursal_var, ' BOLETA ',numero_boleta_minimo_var , ' - ', numero_boleta_maximo_var, ' (EFECTIVO - TRANSFERENCIA)');
            
            -- Se inserta la cabecera de la contabilidad 
            INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
            VALUES (id_cabecera_var, tipo_comprobante_var, fecha_cierre_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
            
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
            VALUES (id_cabecera_var, cuenta_contable_iva_debito, glosa_temporal, 0, iva_I_var, tipo_comprobante_var, origen_var);
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
            VALUES (id_cabecera_var, cuenta_contable_ventas, glosa_temporal,  0, neto_I_var, tipo_comprobante_var, origen_var);
      
            
            IF monto_caja > 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_caja, glosa_temporal, monto_caja, 0, tipo_comprobante_var, origen_var);
            END IF;
            
            IF monto_transferencia > 0 THEN
            
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`,`origen`)         
              
              SELECT id_cabecera_var, FUNCCuentaContablePagoMovimiento(P.id, 'Y'), glosa_temporal, 0, -1*P.monto_pagado, tipo_comprobante_var, origen_var
              FROM encabezado_movimientos AS E
              RIGHT JOIN pagos_movimientos AS P
                ON P.id_movimiento = E.id 
              WHERE 
                P.forma_pago = 4
                AND P.correlativo_caja = correlativo_var
                AND P.id_caja = id_caja_var
                AND E.tipo_documento = 39
              ;
              
            END IF;

        END IF;
        
        -- END CONTABILIZACION PAGOS INGRESO
        
        -- CONTABILZIACION PAGOS TRASPASO
        
        IF total_pagos_T_var > 0 THEN
            SET tipo_comprobante_var = 'T';
            SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
            SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_cierre_var);
            
            SET glosa_temporal = CONCAT('CIERRE Caja ', id_caja_var, 'N° ', correlativo_var, ' SUC ', sucursal_var, ' BOLETA ',numero_boleta_minimo_var , ' - ', numero_boleta_maximo_var, ' (TARJETAS - CHEQUES)');
            
            -- Se inserta la cabecera de la contabilidad 
            INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
            VALUES (id_cabecera_var, tipo_comprobante_var, fecha_cierre_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
          
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
            VALUES (id_cabecera_var, cuenta_contable_iva_debito, glosa_temporal, 0, iva_T_var, tipo_comprobante_var, origen_var);
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
            VALUES (id_cabecera_var, cuenta_contable_ventas, glosa_temporal,  0, neto_T_var, tipo_comprobante_var, origen_var);
            
            /*
              cuenta_contable_iva_debito,
              cuenta_contable_ventas,
              cuenta_contable_caja,
              cuenta_contable_existencia,
              cuenta_contable_transbank_debito,
              cuenta_contable_transbank_credito,
              cuenta_contable_documento_por_cobrar,
              cuenta_contable_costo_venta
            */
            
            
            
            IF monto_transbank_debito > 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_transbank_debito, glosa_temporal, monto_transbank_debito, 0, tipo_comprobante_var, origen_var);        
            END IF;


             IF monto_transbank_credito > 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_transbank_credito, glosa_temporal, monto_transbank_credito, 0, tipo_comprobante_var, origen_var);        
            END IF;  
            
            IF monto_cheque > 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_documento_por_cobrar, glosa_temporal, monto_cheque, 0, tipo_comprobante_var, origen_var);        
            END IF;            
        END IF;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizaRCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `ContabilizaRCompra`(
	IN `param_id_r_compra` INT
)
BEGIN
    
      DECLARE contexto_var VARCHAR(300) DEFAULT CONCAT('ContabilizaRCompra param_id_r_compra: ', param_id_r_compra);
      
      DECLARE tipo_comprobante_var CHAR(1) DEFAULT 'T';
      
      
      DECLARE id_cabecera_var INT(11) DEFAULT FUNCIDSiguienteCabeceraContable();
      
      
      DECLARE numero_comprobante_var INT(11);
      
      DECLARE cuenta_contable_rut_var VARCHAR(11);
        
      DECLARE cuenta_contable_proveedores INT(11); 
      DECLARE cuenta_contable_neto INT(11); 
      DECLARE cuenta_contable_iva INT(11); 
      
      DECLARE glosa_temporal VARCHAR(2000) DEFAULT '';
      DECLARE origen_var CHAR(1) DEFAULT 'C';
      
      DECLARE rut_var INT(11);
      DECLARE razon_social_var VARCHAR(500);
      DECLARE tipo_documento_var INT(11);
      DECLARE numero_documento_var INT(11);
      DECLARE total_documento_var INT(11);
      DECLARE neto_var INT(11);
      DECLARE iva_var INT(11); 
      DECLARE exento_var INT(11);
      DECLARE fecha_emision_var DATETIME;
      DECLARE fecha_vencimiento_var DATETIME DEFAULT NULL;
              
      IF (
          SELECT COUNT(1) FROM r_compra_sii AS R WHERE R.id = param_id_r_compra LIMIT 1
        ) > 0 THEN
        SELECT
          R.rut,
          R.razon_social,
          R.tipo_doc,
          R.numero_doc,
          R.monto_total,
          R.m_neto,
          R.m_iva_recuperable,
          R.m_exento,
          R.fecha_doc
        INTO
          rut_var,
          razon_social_var,
          tipo_documento_var,
          numero_documento_var,
          total_documento_var,
          neto_var,
          iva_var ,
          exento_var,
          fecha_emision_var
        FROM r_compra_sii AS R
        WHERE
          R.id = param_id_r_compra
        LIMIT 1;
        
        SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_emision_var);
        
        SET cuenta_contable_rut_var = (SELECT P.cta_contable FROM proveedores AS P WHERE P.rut = rut_var LIMIT 1);
          
        IF cuenta_contable_rut_var <> 0
          AND cuenta_contable_rut_var IS NOT NULL
          AND (
            SELECT 
              IFNULL(COUNT(1), 0) FROM contab_diario_detalle AS D 
            WHERE 
              D.rut = rut_var 
              AND D.tipo_dte = CAST(tipo_documento_var AS CHAR)
              AND D.numero_dte = CAST(numero_documento_var  AS CHAR)
              AND FUNCDiarioOrigen(D.id) = 'COMPRA' 
            LIMIT 1 
          ) = 0 THEN
          
          
          
          SELECT
            E.cta_contable_iva_credito,
            E.cta_contable_proveedores
          INTO
            cuenta_contable_iva,
            cuenta_contable_proveedores
          FROM empresas AS E
          LIMIT 1;
          
          
          SELECT
            Cu.cta_contable
          INTO
            cuenta_contable_neto
          FROM proveedores AS P
            INNER JOIN ctas_contables AS Cu
              ON P.cta_contable = Cu.cta_contable
          WHERE
            P.rut = rut_var
          LIMIT 1;
          
          
          IF cuenta_contable_proveedores IS NULL THEN
            CALL errorCR(contexto_var, 'No esta la cuenta contable PROVEEDORES', 'Y');
          END IF;
          IF cuenta_contable_neto IS NULL THEN
            CALL errorCR(contexto_var, 'No esta la cuenta contable asociada a este RUT', 'Y');
          END IF;
          IF cuenta_contable_iva IS NULL THEN
            CALL errorCR(contexto_var, 'No esta la cuenta contable IVA CREDITOa', 'Y');
          END IF;
          
           
          SET glosa_temporal = CONCAT('COMPRA ', razon_social_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
          
           INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
            VALUES (id_cabecera_var, tipo_comprobante_var, fecha_emision_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
          
          
          IF tipo_documento_var = 61 THEN
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
            VALUES (id_cabecera_var, cuenta_contable_proveedores, glosa_temporal, total_documento_var, 0, tipo_documento_var, numero_documento_var, rut_var, tipo_documento_var, numero_documento_var, fecha_emision_var, fecha_vencimiento_var, tipo_comprobante_var, origen_var);
            IF neto_var <> 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_neto, glosa_temporal, 0, neto_var, numero_documento_var,tipo_comprobante_var, origen_var);
            END IF;
            IF iva_var <> 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_iva, glosa_temporal,  0, iva_var, numero_documento_var, tipo_comprobante_var, origen_var);
            END IF;
            IF exento_var <> 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_neto, CONCAT(glosa_temporal, ' exento'),  0, exento_var, numero_documento_var, tipo_comprobante_var, origen_var);
            END IF;
          ELSE
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
            VALUES (id_cabecera_var, cuenta_contable_proveedores, glosa_temporal, 0, total_documento_var, tipo_documento_var, numero_documento_var, rut_var, tipo_documento_var, numero_documento_var, fecha_emision_var, fecha_vencimiento_var, tipo_comprobante_var, origen_var);
            IF neto_var <> 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_neto, glosa_temporal, neto_var, 0, numero_documento_var, tipo_comprobante_var, origen_var);
            END IF;
            IF iva_var <> 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_iva, glosa_temporal, iva_var, 0, numero_documento_var, tipo_comprobante_var, origen_var);
            END IF;
            IF exento_var <> 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_neto, CONCAT(glosa_temporal, ' exento'), exento_var, 0, numero_documento_var, tipo_comprobante_var, origen_var);
            END IF;
          END IF;
          
        ELSE
        
          IF cuenta_contable_rut_var = 0 OR cuenta_contable_rut_var IS NULL THEN
            CALL errorCR(contexto_var, 'El rut no esta en proveedores', 'N');
          ELSE
            CALL errorCR(contexto_var, 'Parece que ya esta contabilizado', 'N');
          END IF;
          
        END IF;
       
      ELSE
      
        CALL errorCR(contexto_var, 'No existe el r_compra', 'Y');
        
      END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizarGuia` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `ContabilizarGuia`(
	IN `param_id_movimiento` INT,
	IN `param_lanza_errores` ENUM('Y','N')
)
BEGIN
      
    -- variables contabilidad
      -- el tipo que será este comprobante
    DECLARE tipo_comprobante_var CHAR(1) DEFAULT 'T';
    
    -- se obtiene la id a insertar como cabecera
    DECLARE id_cabecera_var INT(11) DEFAULT FUNCIDSiguienteCabeceraContable();
    
    -- se obtiene el numero siguiente del comprobante del tipo T
    DECLARE numero_comprobante_var INT(11);
    
    -- se declaran las cuentas
    DECLARE cuenta_contable_iva_debito INT(11); -- iva debito
    DECLARE cuenta_contable_ventas INT(11); -- resultado ventas
    
    DECLARE cuenta_contable_existencia INT(11);
    DECLARE cuenta_contable_costo_venta INT(11);
    DECLARE cuenta_contable_devolucion INT(11); 
    
    DECLARE glosa_temporal VARCHAR(500) DEFAULT '';
    DECLARE origen_var CHAR(1) DEFAULT 'V';
    -- end variables contables
    
    -- variables documento
    
    DECLARE tipo_traslado_var INT(11);
    
    DECLARE tipo_documento_var INT(11);
    DECLARE numero_documento_var INT(11);
    
    DECLARE tipo_documento_referencia_var INT(11);
    DECLARE numero_documento_referencia_var INT(11);
    
    DECLARE rut_documento_var INT(11);
    DECLARE razon_social_documento_var VARCHAR(500);
    
    DECLARE fecha_movimiento_var DATE;
    DECLARE fecha_vencimiento_movimiento_var DATE;
    
    DECLARE total_documento_var INT(11);
    DECLARE neto_documento_var INT(11);
    DECLARE iva_documento_var INT(11);
    
    DECLARE caja_documento_var INT(11);
    DECLARE sucursal_documento_var INT(11);
    
    -- detalle
    DECLARE costo_venta_var INT(11);
    
    -- pagos
    DECLARE total_pagos_var INT(11);
    
    -- fin variables documento
    -- variables del procedimiento
    
    DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('ContabilizarGuia param_id_movimiento:', param_id_movimiento, ' param_lanza_errores:', param_lanza_errores);
    -- end variables del procedimiento
    
    -- comprueba que el movimiento existe
    IF (SELECT COUNT(1) FROM encabezado_movimientos_guias AS E WHERE E.id = param_id_movimiento LIMIT 1) = 0 THEN
      CALL errorCR(contexto_var, CONCAT('No se encontro la guia de id ' , param_id_movimiento), param_lanza_errores);
    END IF;

    -- se obtienen las cuentas desde la empresa
    SELECT
      E.cta_contable_existencia,
      E.cta_contable_costo_venta,
      E.cta_contable_devolucion_existencia
    INTO
      cuenta_contable_existencia,
      cuenta_contable_costo_venta,
      cuenta_contable_devolucion
    FROM empresas AS E
    LIMIT 1;
      
    -- si hay alguna cuenta sin valor, saltara un error
    
    IF cuenta_contable_existencia IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable EXISTENCIA POR DEFECTO', 'S');
  	END IF;
    IF cuenta_contable_costo_venta IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable COSTO', 'S');
  	END IF;
    
    -- recolectar valores de la cabecera
    SELECT 
      E.tipo_traspaso,
      E.fecha_documento,
      E.fecha_vencimiento,
      E.tipo_documento,
      E.numero_documento,
      E.total_documento,
      E.neto,
      E.`monto iva`,
      E.rut,
      E.razon_social,
      E.caja_id,
      E.sucursal_id,
      E.numero_documento_referencia,
      E.tipo_documento_referencia
    INTO
      tipo_traslado_var,
      fecha_movimiento_var,
      fecha_vencimiento_movimiento_var,
      tipo_documento_var,
      numero_documento_var,
      total_documento_var,
      neto_documento_var,
      iva_documento_var,
      rut_documento_var,
      razon_social_documento_var,
      caja_documento_var,
      sucursal_documento_var,
      numero_documento_referencia_var,
      tipo_documento_referencia_var
    FROM encabezado_movimientos_guias AS E
    WHERE 
      E.id = param_id_movimiento 
    LIMIT 1;
    
    SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);

      -- se contabiliza el costo
      SET costo_venta_var = (SELECT SUM(D.pmp_linea) FROM detalle_movimientos_guias AS D WHERE D.id_encabezado = param_id_movimiento);
      
      IF costo_venta_var > 0 THEN
      
        IF tipo_traslado_var = 1 THEN
        
            SET tipo_comprobante_var = 'T';
            SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
            SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
            
            SET glosa_temporal = CONCAT('COSTO ', razon_social_documento_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
            
            -- Se inserta la cabecera de la contabilidad 
        	  INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
            VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1');
              
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`) 
            VALUES (id_cabecera_var, cuenta_contable_costo_venta, glosa_temporal, 0, IF(tipo_documento_var = 61, costo_venta_var, -1*costo_venta_var), tipo_comprobante_var);
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`) 
            VALUES (id_cabecera_var, cuenta_contable_existencia, glosa_temporal, IF(tipo_documento_var = 61, costo_venta_var, -1*costo_venta_var), 0, tipo_comprobante_var);
        
        ELSEIF tipo_traslado_var = 7 THEN
            SET tipo_comprobante_var = 'T';
            SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
            SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
            
            SET glosa_temporal = CONCAT('DEVOLUCION ', razon_social_documento_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
            
            -- Se inserta la cabecera de la contabilidad 
        	  INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
            VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1');
              
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`) 
            VALUES (id_cabecera_var, cuenta_contable_devolucion, glosa_temporal, 0, IF(tipo_documento_var = 61, costo_venta_var, -1*costo_venta_var), tipo_comprobante_var);
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`) 
            VALUES (id_cabecera_var, cuenta_contable_existencia, glosa_temporal, IF(tipo_documento_var = 61, costo_venta_var, -1*costo_venta_var), 0, tipo_comprobante_var);
            
        
        END IF;
        
       
      ELSE
        CALL errorCR(contexto_var, 'El costo de la venta se detecta como cero', param_lanza_errores);
      END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizarMovimientoPagosClientesDetalle` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `ContabilizarMovimientoPagosClientesDetalle`(
	IN `param_id_encabezado_pagos` INT,
	IN `param_id_movimiento` INT,
	IN `param_lanza_errores` ENUM('Y','N')
)
BEGIN
    
    DECLARE fecha_encabezado_pago DATE;
    -- variables contabilidad
      -- el tipo que será este comprobante
    DECLARE tipo_comprobante_var CHAR(1) DEFAULT 'T';
    
    -- se obtiene la id a insertar como cabecera
    DECLARE id_cabecera_var INT(11) DEFAULT FUNCIDSiguienteCabeceraContable();
    
    -- se obtiene el numero siguiente del comprobante del tipo T
    DECLARE numero_comprobante_var INT(11);
    
    -- se declaran las cuentas
    DECLARE cuenta_contable_iva_debito INT(11); -- iva debito
    DECLARE cuenta_contable_ventas INT(11); -- resultado ventas
    
    DECLARE cuenta_contable_existencia INT(11); -- para el calculo del costo
    DECLARE cuenta_contable_costo_venta INT(11); -- para el calculo del costo
    
    DECLARE cuenta_contable_cliente INT(11);  -- se hara un doble movimiento como si siempre fuera convenio y luego se paga
    
    DECLARE cuenta_contable_transbank_debito INT(11); -- tipo pago 2
    DECLARE cuenta_contable_transbank_credito INT(11); -- tipo pago 1
    DECLARE cuenta_contable_caja INT(11);   -- tipo pago 0
    DECLARE cuenta_contable_banco INT(11);   -- tipo pago 4 transferencia -- esto viene en el mismo pago
    DECLARE cuenta_contable_documento_por_cobrar INT(11);   -- tipo pago 3 cheque
    
    
    DECLARE glosa_temporal VARCHAR(500) DEFAULT '';
    DECLARE origen_var CHAR(1) DEFAULT 'V';
    -- end variables contables
    
    -- variables documento
    
    DECLARE tipo_documento_var INT(11);
    DECLARE numero_documento_var INT(11);
    
    DECLARE tipo_documento_referencia_var INT(11);
    DECLARE numero_documento_referencia_var INT(11);
    
    DECLARE rut_documento_var INT(11);
    DECLARE razon_social_documento_var VARCHAR(500);
    
    DECLARE fecha_movimiento_var DATE;
    DECLARE fecha_vencimiento_movimiento_var DATE;
    
    DECLARE total_documento_var INT(11);
    DECLARE neto_documento_var INT(11);
    DECLARE iva_documento_var INT(11);
    
    DECLARE caja_documento_var INT(11);
    DECLARE sucursal_documento_var INT(11);
    
    -- detalle
    DECLARE costo_venta_var INT(11);
    
    -- pagos
    DECLARE total_pagos_var INT(11);
    
    -- fin variables documento
    
    -- variables de uncion con la venta
    DECLARE id_pago_diario_var INT(11);
    DECLARE id_venta_diario_var INT(11);
    -- fin variables de union con la venta
    -- variables del procedimiento
    
    DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('ContabilizarVentas param_id_movimiento:', param_id_movimiento, ' param_lanza_errores:', param_lanza_errores);
    -- end variables del procedimiento
    
    -- comprueba que el movimiento existe
    IF (SELECT COUNT(1) FROM encabezado_movimientos AS E WHERE E.id = param_id_movimiento LIMIT 1) = 0 THEN
      CALL errorCR(contexto_var, CONCAT('No se encontro el movimiento de id ' , param_id_movimiento), param_lanza_errores);
    END IF;
    
    -- compurba que el pago exista
    IF (SELECT COUNT(1) FROM encabezado_pagos AS E WHERE E.id = param_id_encabezado_pagos LIMIT 1) = 0 THEN
      CALL errorCR(contexto_var, CONCAT('No se encontro el encabezado pago de id ' , param_id_encabezado_pagos), param_lanza_errores);
    END IF;
    
    SET fecha_encabezado_pago = (SELECT E.fecha FROM encabezado_pagos AS E WHERE E.id = param_id_encabezado_pagos LIMIT 1);

    -- se obtienen las cuentas desde la empresa
    SELECT
      E.cta_contable_clientes,
      E.cta_contable_caja,
      E.cta_contable_transbank_debito,
      E.cta_contable_transbank_credito,
      E.cta_contable_documentos_por_cobrar
    INTO
      cuenta_contable_cliente,
      cuenta_contable_caja,
      cuenta_contable_transbank_debito,
      cuenta_contable_transbank_credito,
      cuenta_contable_documento_por_cobrar
    FROM empresas AS E
    LIMIT 1;
      
    -- si hay alguna cuenta sin valor, saltara un error
    IF cuenta_contable_cliente IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable CLIENTE', 'S');
    END IF;
    IF cuenta_contable_transbank_debito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA DEBITO', 'S');
    END IF;
     IF cuenta_contable_transbank_credito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA CREDITO', 'S');
    END IF;
     IF cuenta_contable_documento_por_cobrar IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable DOCUMENTOS POR COBRAR', 'S');
    END IF;
    IF cuenta_contable_caja IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable CAJA', 'S');
    END IF;

    -- recolectar valores de la cabecera
    SELECT 
      E.fecha_documento,
      E.fecha_vencimiento,
      E.tipo_documento,
      E.numero_documento,
      E.rut,
      E.razon_social,
      E.caja_id,
      E.sucursal_id,
      E.numero_documento_referencia,
      E.tipo_documento_referencia
    INTO
      fecha_movimiento_var,
      fecha_vencimiento_movimiento_var,
      tipo_documento_var,
      numero_documento_var,
      rut_documento_var,
      razon_social_documento_var,
      caja_documento_var,
      sucursal_documento_var,
      numero_documento_referencia_var,
      tipo_documento_referencia_var
    FROM encabezado_movimientos AS E
    WHERE 
      E.id = param_id_movimiento 
    LIMIT 1;
    
    SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_encabezado_pago);
    
    SET id_venta_diario_var = (SELECT CDD.id FROM contab_diario_detalle AS CDD
                                WHERE
                                  CDD.cuenta_contable = cuenta_contable_cliente
                                  AND CDD.numero_dte = numero_documento_var
                                  AND CDD.tipo_dte = tipo_documento_var
                                  AND CDD.rut = rut_documento_var
                                  LIMIT 1);
   -- no se considean las boletas

        -- se contabiliza pagos solo efectivo y transferencia
        SET total_pagos_var = (SELECT SUM(P.monto_pagado) FROM vista_pagos_movimientos_detalle_pagos AS P WHERE 
                                                                                              P.id_movimiento = param_id_movimiento 
                                                                                              AND P.id_encabezado = param_id_encabezado_pagos AND 
                                                                                            (
                                                                                              P.forma_pago = 0
                                                                                              OR P.forma_pago = 4
                                                                                            ));
        
        IF total_pagos_var > 0 THEN
            SET tipo_comprobante_var = 'I';
            SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
            SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_encabezado_pago);
            
            SET glosa_temporal = CONCAT('PAGA ', razon_social_documento_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
            
            INSERT INTO contab_diario_cabecera 
              (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
              VALUES (id_cabecera_var, tipo_comprobante_var, fecha_encabezado_pago, numero_comprobante_var, glosa_temporal, '1', origen_var);
            
              
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_cliente, glosa_temporal, IF(tipo_documento_var = 61, total_pagos_var, -1*total_pagos_var), 0, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var);
              
              SET id_pago_diario_var = LAST_INSERT_ID();

              IF id_pago_diario_var IS NULL THEN
                CALL errorCR(contexto_var, 'No se encontro el id del diario detalle, verifique la contabilizacion del pago', param_lanza_errores);
              END IF;

              IF id_venta_diario_var IS NULL THEN
                CALL errorCR(contexto_var, 'No se encontro el id del diario detalle, verifique la contabilizacion de la venta', param_lanza_errores);
              END IF;

              INSERT INTO relacion_comprobantes_compra_pagos_dte (`id_contab_diario_detalle_1`, `id_contab_diario_detalle_2`, fecha_documento_1)
              VALUES (id_venta_diario_var, id_pago_diario_var, DATE(fecha_movimiento_var));
              
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
              SELECT id_cabecera_var, FUNCCuentaContablePagoMovimiento(P.id, param_lanza_errores), glosa_temporal, 0, IF(tipo_documento_var = 61, P.monto_pagado, -1*P.monto_pagado), tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var
              FROM pagos_movimientos AS P WHERE P.id_movimiento = param_id_movimiento AND 
                                                                                              (
                                                                                                P.forma_pago = 0
                                                                                                OR P.forma_pago = 4
                                                                                              );
          
        END IF;
        
        SET total_pagos_var = (SELECT SUM(P.monto_pagado) FROM vista_pagos_movimientos_detalle_pagos AS P WHERE 
                                                                                            P.id_movimiento = param_id_movimiento AND 
                                                                                            P.id_encabezado = param_id_encabezado_pagos AND 
                                                                                            (
                                                                                              P.forma_pago <> 0
                                                                                              AND P.forma_pago <> 4
                                                                                            ));
        
        IF total_pagos_var > 0 THEN
            SET tipo_comprobante_var = 'T';
            SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
            SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_encabezado_pago);
            
            SET glosa_temporal = CONCAT('PAGA ', razon_social_documento_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
            
            -- Se inserta la cabecera de la contabilidad 
            INSERT INTO contab_diario_cabecera 
              (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
              VALUES (id_cabecera_var, tipo_comprobante_var, fecha_encabezado_pago, numero_comprobante_var, glosa_temporal, '1', origen_var);
            
              
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_cliente, glosa_temporal, IF(tipo_documento_var = 61, total_pagos_var, -1*total_pagos_var), 0, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var);
              
              SET id_pago_diario_var = LAST_INSERT_ID();

              IF id_pago_diario_var IS NULL THEN
                CALL errorCR(contexto_var, 'No se encontro el id del diario detalle, verifique la contabilizacion del pago', param_lanza_errores);
              END IF;

              IF id_venta_diario_var IS NULL THEN
                CALL errorCR(contexto_var, 'No se encontro el id del diario detalle, verifique la contabilizacion de la venta', param_lanza_errores);
              END IF;

              INSERT INTO relacion_comprobantes_compra_pagos_dte (`id_contab_diario_detalle_1`, `id_contab_diario_detalle_2`, fecha_documento_1)
              VALUES (id_venta_diario_var, id_pago_diario_var, DATE(fecha_movimiento_var));
              
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento_var`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`)
              SELECT id_cabecera_var, FUNCCuentaContablePagoMovimiento(P.id, param_lanza_errores), glosa_temporal, 0, IF(tipo_documento_var = 61, P.monto_pagado, -1*P.monto_pagado), tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var
              FROM pagos_movimientos AS P WHERE P.id_movimiento = param_id_movimiento AND 
                                                                                              (
                                                                                                P.forma_pago <> 0
                                                                                                AND P.forma_pago <> 4
                                                                                              );
        END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizarPagoCheques` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `ContabilizarPagoCheques`(
	IN `param_id_cabecera_pago` INT
)
BEGIN
        DECLARE id_cta_banco_var INT(11);
        DECLARE numero_cheque_var INT(11);
        DECLARE fecha_emision_cheque_var DATE;
        DECLARE fecha_vencimiento_cheque_var DATE;
        DECLARE monto_cheque_var INT(11);
        DECLARE rut_var VARCHAR(50);
        DECLARE glosa_principal_var VARCHAR(1000) DEFAULT '';
        DECLARE fecha_anulacion_cheque_var DATE;
        
        DECLARE tipo_entidad_var CHAR(1);
        
        DECLARE tipo_comprobante_var CHAR(1) DEFAULT 'E';
        DECLARE id_cabecera_comprobante_var INT(11) DEFAULT FUNCIDSiguienteCabeceraContable();
        DECLARE numero_comprobante_var INT(11);
        DECLARE cuenta_contable_contraparte INT(11);
        DECLARE cuenta_contable_cuenta_banco INT(11);
        DECLARE vigente_var CHAR(1) DEFAULT '1';
        DECLARE contexto_var VARCHAR(500) DEFAULT CONCAT('ContabilizarPagoCheques param_id_cabecera_pago: ', param_id_cabecera_pago);
        
        
        IF (
            SELECT COUNT(1) FROM cabecera_pago_proveedores AS C WHERE C.id = param_id_cabecera_pago LIMIT 1
          ) > 0
        THEN
        
          SELECT
            C.id_cta_cte_banco,
            C.num_cheque,
            C.fecha_emision,
            C.fecha_vencimiento,
            C.monto_cheque,
            C.glosa_cabecera,
            C.rut,
            C.fecha_anulacion,
            C.tipo_pago
          INTO 
            id_cta_banco_var,
            numero_cheque_var,
            fecha_emision_cheque_var,
            fecha_vencimiento_cheque_var,
            monto_cheque_var,
            glosa_principal_var,
            rut_var,
            fecha_anulacion_cheque_var,
            tipo_entidad_var
          FROM cabecera_pago_proveedores AS C 
          WHERE 
            C.id = param_id_cabecera_pago 
          LIMIT 1;
          
          -- R remuneracines por pagar
          -- H honorario por pagar
          -- S retiro socio
          -- G gasto comun
          -- A arriendo
          
          -- T transferenacia es un caso especial donde se le dice a que banco va
          
          -- P proveedores 

          
          IF tipo_entidad_var = 'P' THEN
          
            SELECT
              E.cta_contable_proveedores
            INTO
              cuenta_contable_contraparte
            FROM empresas AS E
            LIMIT 1;
            
          ELSEIF tipo_entidad_var = 'R' THEN
          
            SELECT
              E.cta_contable_remuneraciones
            INTO
              cuenta_contable_contraparte
            FROM empresas AS E
            LIMIT 1;
            
          ELSEIF tipo_entidad_var = 'T' THEN
          
           CALL errorCR(contexto_var, 'Tipo traspaso aun no refinindo', 'Y');
           /*
           
            Se sugirio crear un cuadro emergente para llevar la cuenta contable del banco o el banco de destino
            de la transfeencia
            
            Se evalua que venga en la mismo detalle del pago
          */
            
          ELSEIF tipo_entidad_var = 'H' THEN
          
            SELECT
              E.cta_contable_honorarios
            INTO
              cuenta_contable_contraparte
            FROM empresas AS E
            LIMIT 1;
            
          ELSEIF tipo_entidad_var = 'S' THEN
          
            SET cuenta_contable_contraparte = (SELECT
                                                P.cta_contable
                                              FROM proveedores AS P
                                              WHERE
                                                P.rut = rut_var 
                                              LIMIT 1);
          
          ELSEIF tipo_entidad_var = 'G' THEN
          
            SELECT
              E.cta_contable_gasto
            INTO
              cuenta_contable_contraparte
            FROM empresas AS E
            LIMIT 1;
            
          ELSEIF tipo_entidad_var = 'A' THEN
          
            SELECT
              E.cta_contable_arriendo
            INTO
              cuenta_contable_contraparte
            FROM empresas AS E
            LIMIT 1;
            
          ELSE
            CALL errorCR(contexto_var, 'Tipo entidad no reconocida', 'Y');
          END IF;
          
          SELECT
            CC.cta_contable
          INTO
            cuenta_contable_cuenta_banco
          FROM ctas_ctes_bancos AS CC
          WHERE
            CC.id_cta_cte_banco = id_cta_banco_var
          LIMIT 1;
          
          
          SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_emision_cheque_var);
          
          IF 
          rut_var IS NOT NULL
          AND (
            SELECT COUNT(1) FROM contab_diario_detalle AS D 
            WHERE 
              D.documento = numero_cheque_var 
              AND D.cuenta_contable = cuenta_contable_cuenta_banco 
              AND FUNCDiarioOrigen(D.id) = 'PAGOPROVEEDOR'
            LIMIT 1
          ) = 0
          THEN

            
            IF cuenta_contable_contraparte IS NULL THEN
              CALL errorCR(contexto_var, 'No esta la cuenta contable contable', 'Y');
            END IF;
            IF cuenta_contable_cuenta_banco IS NULL THEN
              CALL errorCR(contexto_var, 'No esta la cuenta contable asociada a la CUENTA BANCARIA', 'Y');
            END IF;
            
            IF fecha_anulacion_cheque_var IS NOT NULL THEN
              SET vigente_var = '0';
            END IF;
        
            INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
            VALUES (id_cabecera_comprobante_var, tipo_comprobante_var, fecha_emision_cheque_var, numero_comprobante_var, glosa_principal_var, vigente_var);
          
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`)
            VALUES (id_cabecera_comprobante_var, cuenta_contable_cuenta_banco, glosa_principal_var, 0, monto_cheque_var, numero_cheque_var, rut_var, '', id_cta_banco_var, fecha_emision_cheque_var, fecha_vencimiento_cheque_var, tipo_comprobante_var);
        
  
            INSERT INTO contab_diario_detalle
            (      `id_diario_cabecera`,       `cuenta_contable`,           `glosa_detalle`,      `debe`,                                           `haber`,                                        `documento`,          `rut`,   `tipo_dte`,     `numero_dte`,   `fecha_documento`,          `fecha_vencimiento`, `tipo_comprobante`) 
            SELECT id_cabecera_comprobante_var, cuenta_contable_contraparte, glosa_principal_var, IF(D.tipo_doc_ref != 61 , D.monto_documento, 0),  IF(D.tipo_doc_ref != 61 , 0, D.monto_documento), numero_cheque_var, rut_var, D.tipo_doc_ref, D.num_documento_ref, fecha_emision_cheque_var, fecha_vencimiento_cheque_var, tipo_comprobante_var
            FROM detalle_pago_proveedores AS D 
            WHERE 
              D.id_cuenta = id_cta_banco_var 
              AND D.num_cheque = numero_cheque_var
            ;
            
            CALL VincularPagoConCompra(id_cabecera_comprobante_var);
            
          ELSE
          
            IF rut_var IS NULL THEN
              CALL errorCR(contexto_var, 'El rut esta NULO', 'N');
            ELSE
              CALL errorCR(contexto_var, 'Cheque ya contabilizado', 'N');
            END IF;
            
          END IF;
          
        ELSE
            CALL errorCR(contexto_var, 'No se encontro el cheque', 'Y');
        END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizarPagoChequesCatola` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `ContabilizarPagoChequesCatola`(
	IN `param_id_cabecera_pago` INT
)
BEGIN 
   DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
        ROLLBACK;
    END;
      DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
        ROLLBACK;
      END;
    START TRANSACTION;
   BEGIN

        DECLARE id_cta_banco_var INT(11);
        DECLARE numero_cheque_var INT(11);
        DECLARE fecha_emision_cheque_var DATE;
        DECLARE fecha_vencimiento_cheque_var DATE;
        DECLARE monto_cheque_var INT(11);
        DECLARE rut_var VARCHAR(50);
        DECLARE glosa_principal_var VARCHAR(1000) DEFAULT '';
        DECLARE fecha_anulacion_cheque_var DATE;
        
        DECLARE tipo_comprobante_var CHAR(1) DEFAULT 'E';
        DECLARE id_cabecera_comprobante_var INT(11) DEFAULT FUNCIDSiguienteCabeceraContable();
        DECLARE numero_comprobante_var INT(11) DEFAULT FUNCSiguienteNumeroComprobante(tipo_comprobante_var);
        DECLARE cuenta_contable_proveedores INT(11);
        DECLARE cuenta_contable_cuenta_banco INT(11);
        
        CALL errorCR(contexto_var, 'No usar por verficacion, manda todo a proveedores', 'Y');
        
        IF (
            SELECT COUNT(1) FROM cartolaBancos AS C WHERE C.id = param_id_cabecera_pago LIMIT 1
          ) > 0
        THEN
        
          SELECT
            C.id_banco,
            C.numero_movimiento,
            C.fecha,
            C.cargo,
            CONCAT('PAGO CARTOLA ', C.numero_movimiento, ' ', C.nombre),
            IF(C.nombre = '' OR C.nombre IS NULL, null, C.rut)
          INTO 
            id_cta_banco_var,
            numero_cheque_var,
            fecha_emision_cheque_var,
            monto_cheque_var,
            glosa_principal_var,
            rut_var
          FROM cartolaBancos AS C 
          WHERE 
            C.id = param_id_cabecera_pago 
          LIMIT 1;
          
          SELECT
            E.cta_contable_proveedores
          INTO
            cuenta_contable_proveedores
          FROM empresas AS E
          LIMIT 1;
          
          SELECT
            CC.cta_contable
          INTO
            cuenta_contable_cuenta_banco
          FROM ctas_ctes_bancos AS CC
          WHERE
            CC.id_cta_cte_banco = id_cta_banco_var
          LIMIT 1;
          
          
          IF 
          rut_var IS NOT NULL
          AND monto_cheque_var > 0
          AND monto_cheque_var IS NOT NULL
          AND (
            SELECT COUNT(1) FROM contab_diario_detalle AS D 
            WHERE 
              D.documento = numero_cheque_var 
              AND D.cuenta_contable = cuenta_contable_cuenta_banco 
              AND FUNCDiarioOrigen(D.id) = 'PAGOPROVEEDOR'
            LIMIT 1
          ) = 0
          THEN

            
            IF cuenta_contable_proveedores IS NULL THEN
              CALL error("No esta la cuenta contable PROVEEDORES");
            END IF;
            IF cuenta_contable_cuenta_banco IS NULL THEN
              CALL error("No esta la cuenta contable asociada a la CUENTA BANCARIA");
            END IF;
        
        
            INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
            VALUES (id_cabecera_comprobante_var, tipo_comprobante_var, fecha_emision_cheque_var, numero_comprobante_var, glosa_principal_var, '1');
          
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `tipo_comprobante`)
            VALUES (id_cabecera_comprobante_var, cuenta_contable_cuenta_banco, glosa_principal_var, 0, monto_cheque_var, numero_cheque_var, rut_var, '', id_cta_banco_var, fecha_emision_cheque_var, tipo_comprobante_var);
        
  
            INSERT INTO contab_diario_detalle
            (      `id_diario_cabecera`,       `cuenta_contable`,           `glosa_detalle`,      `debe`,                                           `haber`,                                        `documento`,          `rut`,   `tipo_dte`,     `numero_dte`,   `fecha_documento`,         `tipo_comprobante`) 
            VALUES (id_cabecera_comprobante_var, cuenta_contable_proveedores, glosa_principal_var, monto_cheque_var, 0, numero_cheque_var, rut_var, '', id_cta_banco_var, fecha_emision_cheque_var, tipo_comprobante_var);

          END IF;
          
        END IF;
      END;
    COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizarRCompraPorLLave` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `ContabilizarRCompraPorLLave`(
	IN `param_llave` VARCHAR(50)
)
BEGIN
  DECLARE id_r_compra_var INT(11) DEFAULT (SELECT R.id FROM r_compra_sii AS R WHERE CONCAT(R.rut, R.tipo_doc, R.numero_doc) = param_llave LIMIT 1);
  
  IF id_r_compra_var IS NOT NULL THEN
    CALL ContabilizaRCompra(id_r_compra_var);
  END IF;
  
  SELECT "SUCCESS";
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ContabilizarVenta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `ContabilizarVenta`(
	IN `param_id_movimiento` INT,
	IN `param_lanza_errores` ENUM('Y','N')
)
    COMMENT 'Contabiliza del movimientos de venta, lo que se guarda en el encabezado_movimiento y que no es una boleta'
BEGIN
      
    
      
    DECLARE tipo_comprobante_var CHAR(1) DEFAULT 'T';
    
    
    DECLARE id_cabecera_var INT(11) DEFAULT FUNCIDSiguienteCabeceraContable();
    
    
    DECLARE numero_comprobante_var INT(11);
    DECLARE id_venta_diario_var INT(11);
    DECLARE id_pago_diario_var INT(11);
    
    
    DECLARE cuenta_contable_iva_debito INT(11); 
    DECLARE cuenta_contable_ventas INT(11); 
    
    DECLARE cuenta_contable_existencia INT(11); 
    DECLARE cuenta_contable_costo_venta INT(11); 
    
    DECLARE cuenta_contable_cliente INT(11);  
    
    DECLARE cuenta_contable_transbank_debito INT(11); 
    DECLARE cuenta_contable_transbank_credito INT(11); 
    DECLARE cuenta_contable_caja INT(11);   
    DECLARE cuenta_contable_banco INT(11);   
    DECLARE cuenta_contable_documento_por_cobrar INT(11);   
    
    DECLARE glosa_temporal VARCHAR(500) DEFAULT '';
    DECLARE origen_var CHAR(11) DEFAULT 'V';
    
    
    
    DECLARE tipo_documento_var INT(11);
    DECLARE numero_documento_var INT(11);
    
    DECLARE tipo_documento_referencia_var INT(11);
    DECLARE numero_documento_referencia_var INT(11);
    
    DECLARE is_convenio_var CHAR(1);
    
    DECLARE rut_documento_var INT(11);
    DECLARE razon_social_documento_var VARCHAR(500);
    
    DECLARE fecha_movimiento_var DATE;
    DECLARE fecha_vencimiento_movimiento_var DATE;
    
    DECLARE total_documento_var INT(11);
    DECLARE neto_documento_var INT(11);
    DECLARE iva_documento_var INT(11);
    
    DECLARE caja_documento_var INT(11);
    DECLARE sucursal_documento_var INT(11);
    
    DECLARE factura_guias_var CHAR(1);
    
    
    DECLARE costo_venta_var INT(11);
    
    
    DECLARE total_pagos_var INT(11);
    
    
     -- detalle montos
    DECLARE monto_caja int(11);
    DECLARE monto_transbank_debito int(11);
    DECLARE monto_transbank_credito int(11);
    DECLARE monto_transferencia int(11);
    DECLARE monto_costo int(11);
    DECLARE monto_cheque INT(11);
    
    DECLARE relacion_I_T DECIMAL(20,10);
    
    -- pagos
    DECLARE total_pagos_I_var INT(11);
    DECLARE total_pagos_T_var INT(11);
    
    DECLARE iva_T_var INT(11);
    DECLARE neto_T_var INT(11);

    DECLARE iva_I_var INT(11);
    DECLARE neto_I_var INT(11);  
    
    
    
    
    DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('ContabilizarVentas param_id_movimiento:', param_id_movimiento, ' param_lanza_errores:', param_lanza_errores);
    
    
    
    IF (SELECT COUNT(1) FROM encabezado_movimientos AS E WHERE E.id = param_id_movimiento LIMIT 1) = 0 THEN
      CALL errorCR(contexto_var, CONCAT('No se encontro el movimiento de id ' , param_id_movimiento), param_lanza_errores);
    END IF;

    
    SELECT
      E.cta_contable_iva_debito,
      E.cta_contable_resultado_venta,
      E.cta_contable_clientes,
      E.cta_contable_caja,
      E.cta_contable_existencia,
      E.cta_contable_transbank_debito,
      E.cta_contable_transbank_credito,
      E.cta_contable_documentos_por_cobrar, 
      E.cta_contable_costo_venta
    INTO
      cuenta_contable_iva_debito,
      cuenta_contable_ventas,
      cuenta_contable_cliente,
      cuenta_contable_caja,
      cuenta_contable_existencia,
      cuenta_contable_transbank_debito,
      cuenta_contable_transbank_credito,
      cuenta_contable_documento_por_cobrar,
      cuenta_contable_costo_venta
    FROM empresas AS E
    LIMIT 1;
      
    
    IF cuenta_contable_iva_debito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable IVA DEBITO', 'S');
    END IF;
    IF cuenta_contable_ventas IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable RESULTADO VENTAS', 'S');
    END IF;
    IF cuenta_contable_cliente IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable CLIENTE', 'S');
    END IF;
    IF cuenta_contable_transbank_debito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA DEBITO', 'S');
    END IF;
    IF cuenta_contable_transbank_credito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA CREDITO', 'S');
    END IF;
     IF cuenta_contable_documento_por_cobrar IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable DOCUMENTOS POR COBRAR', 'S');
    END IF;
    IF cuenta_contable_caja IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable CAJA', 'S');
    END IF;
    IF cuenta_contable_existencia IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable EXISTENCIA POR DEFECTO', 'S');
    END IF;
    
    IF cuenta_contable_costo_venta IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable COSTO', 'S');
    END IF;
    
    
    
    SELECT 
      E.fecha_documento,
      E.fecha_vencimiento,
      E.tipo_documento,
      E.numero_documento,
      E.total_documento,
      E.neto,
      E.`monto iva`,
      E.rut,
      E.razon_social,
      E.caja_id,
      E.sucursal_id,
      E.numero_documento_referencia,
      E.tipo_documento_referencia,
      E.is_factura_guias,
      E.is_convenio
    INTO
      fecha_movimiento_var,
      fecha_vencimiento_movimiento_var,
      tipo_documento_var,
      numero_documento_var,
      total_documento_var,
      neto_documento_var,
      iva_documento_var,
      rut_documento_var,
      razon_social_documento_var,
      caja_documento_var,
      sucursal_documento_var,
      numero_documento_referencia_var,
      tipo_documento_referencia_var,
      factura_guias_var,
      is_convenio_var
    FROM encabezado_movimientos AS E
    WHERE 
      E.id = param_id_movimiento 
    LIMIT 1;
    
    SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
    
    
    IF tipo_documento_var = 61 AND tipo_documento_referencia_var = 39 THEN
        
        -- recoleccion datos
           -- EFECTIVO 
        SELECT
          IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_caja
        FROM pagos_movimientos AS P
        WHERE 
          P.forma_pago = 0
          AND P.id_movimiento = param_id_movimiento;

          -- monto_transBack debito      
        SELECT
           IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_transbank_debito
        FROM pagos_movimientos AS P
        WHERE 
          P.forma_pago = 2
          AND P.id_movimiento = param_id_movimiento;
          
            -- monto_transBack  credito       
        SELECT
           IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_transbank_credito
        FROM pagos_movimientos AS P
        WHERE 
          P.forma_pago = 1
          AND P.id_movimiento = param_id_movimiento;
          
         -- monto_cheque
        SELECT
            IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_cheque
        FROM pagos_movimientos AS P
        WHERE 
          P.forma_pago = 3
          AND P.id_movimiento = param_id_movimiento;

         -- monto_transferencia
        SELECT
            IFNULL(SUM(P.monto_pagado), 0)
        INTO
          monto_transferencia
        FROM pagos_movimientos AS P
        WHERE 
          P.forma_pago = 4
          AND P.id_movimiento = param_id_movimiento;
        -- end recolecion datos
      
      -- calculo neto iva parcial
        SET total_pagos_I_var = monto_transferencia + monto_caja;
        SET total_pagos_T_var = monto_transbank_debito + monto_transbank_credito + monto_cheque;
        
        IF total_pagos_T_var = 0 THEN
          SET relacion_I_T = 0;
        ELSE
          SET relacion_I_T = (total_pagos_T_var*100)/(total_pagos_I_var + total_pagos_T_var);
        END IF;
          
        SET iva_T_var = ROUND(iva_documento_var * (relacion_I_T/100));
        SET neto_T_var = total_pagos_T_var - iva_T_var;
        
        SET iva_I_var = iva_documento_var - iva_T_var;
        SET neto_I_var = total_pagos_I_var - iva_I_var;
          
        -- END calculo iva neto parcial 
        
        
        SET glosa_temporal = CONCAT('PAGO Caja ', caja_documento_var, ' SUC ', sucursal_documento_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), ' BOLETAS');
        
        
        -- contabiliza costo se repite por la otra via ojo
        IF tipo_documento_var <> 39 THEN
         
         
        -- se contabiliza pagos solo efectivo y transferencia
        IF total_pagos_I_var > 0 THEN
            SET tipo_comprobante_var = 'I';
            SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
            SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
            
            -- Se inserta la cabecera de la contabilidad 
            INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
            VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
            
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`)   
            VALUES (id_cabecera_var, cuenta_contable_ventas, glosa_temporal, iva_I_var, 0, tipo_comprobante_var, origen_var);
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`)
            VALUES (id_cabecera_var, cuenta_contable_iva_debito, glosa_temporal, neto_I_var, 0, tipo_comprobante_var, origen_var);
      
            
            IF monto_caja > 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`)
              VALUES (id_cabecera_var, cuenta_contable_caja, glosa_temporal,  0, monto_caja, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var);
            END IF;
            
            IF monto_transferencia > 0 THEN
            
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`)
              
              SELECT id_cabecera_var, FUNCCuentaContablePagoMovimiento(P.id, 'Y'), glosa_temporal, 0, P.monto_pagado, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var
              FROM encabezado_movimientos AS E
              RIGHT JOIN pagos_movimientos AS P
                ON P.id_movimiento = E.id 
              WHERE 
                P.forma_pago = 4
                AND P.id_movimiento = param_id_movimiento;
              
              
            END IF;

        END IF;
        
        -- END CONTABILIZACION PAGOS INGRESO
        
        -- CONTABILZIACION PAGOS TRASPASO
        
        IF total_pagos_T_var > 0 THEN
            SET tipo_comprobante_var = 'T';
            SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
            SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
            
            -- Se inserta la cabecera de la contabilidad 
            INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
            VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
          
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
            VALUES (id_cabecera_var, cuenta_contable_ventas, glosa_temporal, iva_T_var, 0, tipo_comprobante_var, origen_var);
            INSERT INTO contab_diario_detalle
            (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
            VALUES (id_cabecera_var, cuenta_contable_iva_debito, glosa_temporal, neto_T_var,  0, tipo_comprobante_var, origen_var);

            
            
            IF monto_transbank_debito > 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_transbank_debito, glosa_temporal, 0, monto_transbank_debito, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var);
            END IF;


             IF monto_transbank_credito > 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_transbank_credito, glosa_temporal, 0, monto_transbank_credito, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var);
            END IF;  
            
            IF monto_cheque > 0 THEN
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_documento_por_cobrar, glosa_temporal,  0, monto_cheque, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var);
            END IF;            
        END IF;
        
        
         
          IF factura_guias_var = '0' THEN
          
            SET costo_venta_var = (SELECT SUM(D.pmp_linea) FROM detalle_movimientos AS D WHERE D.id_encabezado = param_id_movimiento);
            
            IF costo_venta_var > 0 THEN
              SET tipo_comprobante_var = 'T';
              SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
              SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
              
              SET glosa_temporal = CONCAT('COSTO ', razon_social_documento_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
              
              
              INSERT INTO contab_diario_cabecera 
              (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
              VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
                
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_costo_venta, glosa_temporal, 0, IF(tipo_documento_var = 61, costo_venta_var, -1*costo_venta_var), tipo_comprobante_var, origen_var);
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_existencia, glosa_temporal, IF(tipo_documento_var = 61, costo_venta_var, -1*costo_venta_var), 0, tipo_comprobante_var, origen_var);
            
            ELSE
              CALL errorCR(contexto_var, 'El costo de la venta se detecta como cero', param_lanza_errores);
            END IF;
            
          END IF;
        END IF;
      
    ELSE -- todo menos 61 con refrencia 39
      IF tipo_documento_var <> 39 AND tipo_documento_var <> 52 THEN 
        
        SET glosa_temporal = CONCAT('VENTA Caja ', caja_documento_var, ' SUC ', sucursal_documento_var, ' ' ,razon_social_documento_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var));
        
        INSERT INTO contab_diario_cabecera 
        (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
        VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
        INSERT INTO contab_diario_detalle
        (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
        VALUES (id_cabecera_var, cuenta_contable_cliente, glosa_temporal, IF(tipo_documento_var = 61, -1*total_documento_var, total_documento_var), 0, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var);
        
        SET id_venta_diario_var = LAST_INSERT_ID();
        
        INSERT INTO contab_diario_detalle
        (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
        VALUES (id_cabecera_var, cuenta_contable_ventas, glosa_temporal, 0, IF(tipo_documento_var = 61, -1*neto_documento_var, neto_documento_var), tipo_comprobante_var, origen_var);
        INSERT INTO contab_diario_detalle
        (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
        VALUES (id_cabecera_var, cuenta_contable_iva_debito, glosa_temporal,  0, IF(tipo_documento_var = 61, -1*iva_documento_var, iva_documento_var), tipo_comprobante_var, origen_var);
        
      END IF;
    
     
      IF tipo_documento_var <> 39 THEN
          IF factura_guias_var = '0' THEN
          
            SET costo_venta_var = (SELECT SUM(D.pmp_linea) FROM detalle_movimientos AS D WHERE D.id_encabezado = param_id_movimiento);
            
            IF costo_venta_var > 0 THEN
              SET tipo_comprobante_var = 'T';
              SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
              SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
              
              SET glosa_temporal = CONCAT('COSTO ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
              
              
              INSERT INTO contab_diario_cabecera 
              (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
              VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
                
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_costo_venta, glosa_temporal, 0, IF(tipo_documento_var = 61, costo_venta_var, -1*costo_venta_var), tipo_comprobante_var, origen_var);
              INSERT INTO contab_diario_detalle
              (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_comprobante`, `origen`) 
              VALUES (id_cabecera_var, cuenta_contable_existencia, glosa_temporal, IF(tipo_documento_var = 61, costo_venta_var, -1*costo_venta_var), 0, tipo_comprobante_var, origen_var);
            
            ELSE
              CALL errorCR(contexto_var, 'El costo de la venta se detecta como cero', param_lanza_errores);
            END IF;
            
          END IF;
          
          IF is_convenio_var = '0' THEN -- no contabiliza paga convenio
            SET total_pagos_var = (SELECT SUM(P.monto_pagado) FROM pagos_movimientos AS P WHERE P.id_movimiento = param_id_movimiento AND 
                                                                                                (
                                                                                                  P.forma_pago = 0
                                                                                                  OR P.forma_pago = 4
                                                                                                ));
            
            IF total_pagos_var > 0 THEN
                SET tipo_comprobante_var = 'I';
                SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
                SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
                
                SET glosa_temporal = CONCAT('PAGA ', razon_social_documento_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
                
                
                INSERT INTO contab_diario_cabecera 
                (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
                VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
              
                
                INSERT INTO contab_diario_detalle
                (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
                VALUES (id_cabecera_var, cuenta_contable_cliente, glosa_temporal, IF(tipo_documento_var = 61, total_pagos_var, -1*total_pagos_var), 0, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var);
                
                SET id_pago_diario_var = LAST_INSERT_ID();

                IF id_pago_diario_var IS NULL THEN
                  CALL errorCR(contexto_var, 'No se encontro el id del diario detalle, verifique la contabilizacion del pago', param_lanza_errores);
                END IF;

                IF id_venta_diario_var IS NULL THEN
                  CALL errorCR(contexto_var, 'No se encontro el id del diario detalle, verifique la contabilizacion de la venta', param_lanza_errores);
                END IF;

                INSERT INTO relacion_comprobantes_compra_pagos_dte (`id_contab_diario_detalle_1`, `id_contab_diario_detalle_2`, `fecha_documento_1`)
                VALUES (id_venta_diario_var, id_pago_diario_var, DATE(fecha_movimiento_var));
                
                INSERT INTO contab_diario_detalle
                (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
                SELECT id_cabecera_var, FUNCCuentaContablePagoMovimiento(P.id, param_lanza_errores), glosa_temporal, 0, IF(tipo_documento_var = 61, P.monto_pagado, -1*P.monto_pagado), tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var
                FROM pagos_movimientos AS P WHERE P.id_movimiento = param_id_movimiento AND 
                                                                                                (
                                                                                                  P.forma_pago = 0
                                                                                                  OR P.forma_pago = 4
                                                                                                );
              
            END IF;
            
            SET total_pagos_var = (SELECT SUM(P.monto_pagado) FROM pagos_movimientos AS P WHERE P.id_movimiento = param_id_movimiento AND 
                                                                                                (
                                                                                                  P.forma_pago <> 0
                                                                                                  AND P.forma_pago <> 4
                                                                                                ));
            
            IF total_pagos_var > 0 THEN
                SET tipo_comprobante_var = 'T';
                SET id_cabecera_var = FUNCIDSiguienteCabeceraContable();
                SET numero_comprobante_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_comprobante_var, fecha_movimiento_var);
                
                SET glosa_temporal = CONCAT('PAGA ', razon_social_documento_var, ' ',FUNCTipoDocumentoTextoAbreviadoCorta(tipo_documento_var), numero_documento_var);
                
                
                INSERT INTO contab_diario_cabecera 
                (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`, `origen`) 
                VALUES (id_cabecera_var, tipo_comprobante_var, fecha_movimiento_var, numero_comprobante_var, glosa_temporal, '1', origen_var);
              
                
                INSERT INTO contab_diario_detalle
                (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`) 
                VALUES (id_cabecera_var, cuenta_contable_cliente, glosa_temporal, IF(tipo_documento_var = 61, total_pagos_var, -1*total_pagos_var), 0, tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var);
                
                SET id_pago_diario_var = LAST_INSERT_ID();

                IF id_pago_diario_var IS NULL THEN
                  CALL errorCR(contexto_var, 'No se encontro el id del diario detalle, verifique la contabilizacion del pago', param_lanza_errores);
                END IF;

                IF id_venta_diario_var IS NULL THEN
                  CALL errorCR(contexto_var, 'No se encontro el id del diario detalle, verifique la contabilizacion de la venta', param_lanza_errores);
                END IF;

                INSERT INTO relacion_comprobantes_compra_pagos_dte (`id_contab_diario_detalle_1`, `id_contab_diario_detalle_2`, fecha_documento_1)
                VALUES (id_venta_diario_var, id_pago_diario_var, DATE(fecha_movimiento_var));
                
                INSERT INTO contab_diario_detalle
                (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `origen`)
                SELECT id_cabecera_var, FUNCCuentaContablePagoMovimiento(P.id, param_lanza_errores), glosa_temporal, 0, IF(tipo_documento_var = 61, P.monto_pagado, -1*P.monto_pagado), tipo_documento_var, numero_documento_var, rut_documento_var, IF(tipo_documento_var = 61, tipo_documento_referencia_var, tipo_documento_var), IF(tipo_documento_var = 61, numero_documento_referencia_var, numero_documento_var), DATE(fecha_movimiento_var), fecha_vencimiento_movimiento_var, tipo_comprobante_var, origen_var
                FROM pagos_movimientos AS P WHERE P.id_movimiento = param_id_movimiento AND 
                                                                                                (
                                                                                                  P.forma_pago <> 0
                                                                                                  AND P.forma_pago <> 4
                                                                                                );
            END IF;
          
          END IF; -- END no contabilzia paga convenio
      
      END IF;
    END IF; -- si es nota credito referencia a boleta

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CrearPagoChequeDesdeComprobante` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `CrearPagoChequeDesdeComprobante`(
	IN `param_id_comprobante` INT
)
BEGIN
  -- !!!METODO SIN TRANSATICION

  -- general
  DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('CrearPagoChequeDesdeComprobante param_id_comprobante: ' , param_id_comprobante);
  
  -- cabecera_pago
  DECLARE id_banco_var INT(11);
  DECLARE numero_cheque_var INT(11);
  
  DECLARE fecha_emision_var DATE;
  DECLARE fecha_vencimiento_var DATE;
  DECLARE rut_var INT(11);
  DECLARE monto_cheque_var INT(11);
  
  IF NOT EXISTS (SELECT 1 FROM contab_diario_cabecera AS CDC WHERE CDC.id = param_id_comprobante LIMIT 1) THEN
    CALL errorCR(contexto_var, 'No se encontro el comprobante', 'Y');
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM contab_diario_detalle  AS CDD WHERE CDD.id_diario_cabecera = param_id_comprobante AND CDD.tipo_dte = FUNCCodigoCheque() LIMIT 1) THEN
    CALL errorCR(contexto_var, 'No se encontro el cheque en el detalle del comprobante', 'Y');
  END IF;
  
  SELECT
    FUNCIDCuentaCorrienteDesdeCuentaContable(CDD.cuenta_contable),
    CDD.numero_dte,
    CDD.fecha_documento,
    CDD.fecha_vencimiento,
    CDD.debe
  INTO
    id_banco_var,
    numero_cheque_var,
    fecha_emision_var,
    fecha_vencimiento_var,
    monto_cheque_var
  FROM contab_diario_detalle  AS CDD 
  WHERE
    CDD.id_diario_cabecera = param_id_comprobante 
    AND CDD.tipo_dte = FUNCCodigoCheque() LIMIT 1;
    
  IF id_banco_var IS NULL THEN
    CALL errorCR(contexto_var, 'No se detecto el banco del cheque', 'Y');
  END IF;
  
  SELECT id_banco_var, numero_cheque_var, fecha_emision_var, fecha_vencimiento_var, monto_cheque_var;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorContabilizaMovimientoCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `CursorContabilizaMovimientoCaja`(
	IN `param_id_apertura_caja` INT,
	IN `param_lanza_errores` ENUM('Y','N')
)
BEGIN
  DECLARE contexto_var VARCHAR(300) DEFAULT CONCAT('ContabilizaMovimientoCaja param_id_apertura_caja: ', param_id_apertura_caja);
  DECLARE id_movimiento INT(11);
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE movimientos_cursor CURSOR FOR (
                                      SELECT
                                        D.id_detalle_mov_caja
                                      FROM det_movimientos_caja AS D
                                      WHERE
                                        D.id_apertura_caja = param_id_apertura_caja
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN movimientos_cursor;
 
    ciclo: LOOP
    
    FETCH movimientos_cursor INTO id_movimiento;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    CALL ContabilizaMovimientoCaja(id_movimiento, 'Y');

    END LOOP ciclo;
  
  CLOSE movimientos_cursor;
  

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorContabilizarPagosClientes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `CursorContabilizarPagosClientes`(
	IN `param_id_pagos_cliente` INT,
	IN `param_lanza_errores` ENUM('Y','N')
)
    COMMENT 'contabilzia pagos individualemtne, es un cursor por lo complejo de la contabilizacion'
BEGIN
-- PAGO CONVENIOS
  DECLARE id_movimiento INT(11);
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE pago_cursor CURSOR FOR (
                                      SELECT DISTINCT P.id_movimiento FROM detalle_pagos AS P WHERE P.id_encabezado = param_id_pagos_cliente
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN pago_cursor;
 
    ciclo: LOOP
    
    FETCH pago_cursor INTO id_movimiento;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    CALL ContabilizarMovimientoPagosClientesDetalle(param_id_pagos_cliente, id_movimiento, param_lanza_errores);

    END LOOP ciclo;
  
  CLOSE pago_cursor;
  

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorContabilizaTodoAperturaCajaBoletas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `CursorContabilizaTodoAperturaCajaBoletas`()
BEGIN
 DECLARE id_apertura_caja INT(11);
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE apertura_caja_cursor CURSOR FOR (
                                      SELECT
                                        A.id_apertura
                                      FROM apertura_caja AS A
                                      LIMIT 10
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN apertura_caja_cursor;
 
    ciclo: LOOP
    
    FETCH apertura_caja_cursor INTO id_apertura_caja;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    CALL ContabilizarAperturaCajaBoletas(id_apertura_caja, 'Y');

    END LOOP ciclo;
  
  CLOSE apertura_caja_cursor;
  

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorContabilizaTodoMovimientoCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `CursorContabilizaTodoMovimientoCompra`()
BEGIN
 DECLARE id_movimiento INT(11);
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE movimientos_cursor CURSOR FOR (
                                      SELECT R.id FROM encabezado_movimientos_compra AS R 
                                      LIMIT 10
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN movimientos_cursor;
 
    ciclo: LOOP
    
    FETCH movimientos_cursor INTO id_movimiento;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    CALL `ContabilizaCompra`(id_movimiento, 'Y');

    END LOOP ciclo;
  
  CLOSE movimientos_cursor;
  


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorContabilizaTodoPagoClientes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `CursorContabilizaTodoPagoClientes`()
BEGIN
 DECLARE id_encacezado_pagos INT(11);
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE pago_clientes_cursor CURSOR FOR (
                                      SELECT
                                        B.id
                                      FROM encabezado_pagos AS B
                                      LIMIT 10
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN pago_clientes_cursor;
 
    ciclo: LOOP
    
    FETCH pago_clientes_cursor INTO id_encacezado_pagos;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    CALL CursorContabilizarPagosClientes(id_encacezado_pagos, 'N');

    END LOOP ciclo;
  
  CLOSE pago_clientes_cursor;
  

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorContabilizaTodoPagosCabeceraProveedores` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `CursorContabilizaTodoPagosCabeceraProveedores`()
BEGIN
 DECLARE id_pago INT(11);
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE pago_cursor CURSOR FOR (
                                      SELECT R.id FROM cabecera_pago_proveedores AS R 
                                    --  WHERE 
                                    --    YEAR(R.fecha_emision) = 2019 
                                    --    AND 
                                   --       (
                                   --         MONTH(R.fecha_emision) = 10
                                   --         OR  MONTH(R.fecha_emision) = 10
                                   --     )
                                        ORDER BY R.fecha_emision ASC
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN pago_cursor;
 
    ciclo: LOOP
    
    FETCH pago_cursor INTO id_pago;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    CALL `ContabilizarPagoCheques`(id_pago);

    END LOOP ciclo;
  
  CLOSE pago_cursor;
  


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorContabilizaTodoPagosCartolaBanco` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `CursorContabilizaTodoPagosCartolaBanco`()
BEGIN
 DECLARE id_pago INT(11);
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE pago_cursor CURSOR FOR (
                                      SELECT
                                        B.id
                                      FROM cartolaBancos AS B
                                      WHERE 
                                        B.cargo > 0
                                      ORDER BY B.fecha ASC
                                      LIMIT 10
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN pago_cursor;
 
    ciclo: LOOP
    
    FETCH pago_cursor INTO id_pago;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    CALL `ContabilizarPagoChequesCatola`(id_pago);

    END LOOP ciclo;
  
  CLOSE pago_cursor;
  

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorContabilizaTodoRCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `CursorContabilizaTodoRCompra`()
BEGIN 

  DECLARE id_r_compra INT(11);
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE r_compra_cursor CURSOR FOR (
                                      SELECT 
                                        R.id 
                                      FROM r_compra_sii AS R 
                                      WHERE 
                                        R.fecha_doc BETWEEN'2016-12-31' AND '2019-11-30'
                                      ORDER BY R.fecha_doc ASC
                                     -- LIMIT 10
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN r_compra_cursor;
 
    ciclo: LOOP
    
    FETCH r_compra_cursor INTO id_r_compra;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    CALL `ContabilizaRCompra`(id_r_compra);

    END LOOP ciclo;
  
  CLOSE r_compra_cursor;
   
   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorContabilizaTodoVenta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `CursorContabilizaTodoVenta`()
BEGIN
 DECLARE id_movimiento INT(11);
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE movimientos_cursor CURSOR FOR (
                                      SELECT
                                        B.id
                                      FROM encabezado_movimientos AS B
                                      LIMIT 10
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN movimientos_cursor;
 
    ciclo: LOOP
    
    FETCH movimientos_cursor INTO id_movimiento;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    CALL ContabilizarVenta(id_movimiento, 'N');

    END LOOP ciclo;
  
  CLOSE movimientos_cursor;
  

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `cursorGrabarInventarioTablaPaso` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `cursorGrabarInventarioTablaPaso`(
	IN `param_id_tabla_general_paso_encabezado` INT,
	IN `param_id_bodega` INT











,
	IN `param_mac` VARCHAR(50)
)
BEGIN 
  
      
  DECLARE producto_stock_general decimal(18,4);
  DECLARE producto_stock_valorizado float(18,4);
  DECLARE pmp decimal(18,4);
  DECLARE cantidad float(20,4);
                           
  
  DECLARE finished INTEGER DEFAULT 0;
  DECLARE id_producto_inventario INT(20) DEFAULT 0;
  DECLARE stock_inventario FLOAT(20,4) DEFAULT 0;
  DECLARE stock_bodega FLOAT(20,4) DEFAULT 0;
  DEClARE inventario_cursor CURSOR FOR (
                                    SELECT P.id_producto, (
                                          SELECT 
                                            IFNULL(SUM(D.stock_inventario_tabla_paso_detalle),0) 
                                          FROM inventario_tabla_general_paso_detalle AS D 
                                          WHERE 
                                            D.id_producto_inventario_tabla_paso_detalle = P.id_producto 
                                            AND D.id_inventario_tabla_paso_encabezado = param_id_tabla_general_paso_encabezado) AS stock_invnetario
                                    FROM productos AS P
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN inventario_cursor;
 
    ciclo: LOOP
    
    FETCH inventario_cursor INTO id_producto_inventario, stock_inventario;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;
    
    SELECT P.stock_general, P.costo_pmp INTO producto_stock_general, pmp FROM productos AS P WHERE P.id_producto = id_producto_inventario LIMIT 1;
    SELECT S.stock INTO stock_bodega FROM stock_bodegas AS S WHERE id_bodega = param_id_bodega AND S.id_producto = id_producto_inventario LIMIT 1; 
    
    SET cantidad = stock_inventario - stock_bodega;
    SET producto_stock_general = producto_stock_general + cantidad;
    SET producto_stock_valorizado = producto_stock_general * pmp;
    
    
    IF cantidad < 0 THEN 
      SET cantidad = ABS(cantidad);
      INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
      VALUES             (id_producto_inventario,   param_id_bodega, 1            , 0                 ,'0'       , '0'          , '0'   , cantidad,  pmp         , pmp*cantidad, producto_stock_general, pmp, producto_stock_valorizado, DATE_FORMAT(NOW(),"%Y-%m-%d"), param_mac);
      
    ELSEIF cantidad > 0 THEN 
      INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
      VALUES             (id_producto_inventario, param_id_bodega,               0,                  0, cantidad,            pmp, pmp*cantidad, '0', '0', '0', producto_stock_general, pmp, producto_stock_valorizado, DATE_FORMAT(NOW(),"%Y-%m-%d"), param_mac);
      
    END IF;
    
    UPDATE productos AS P SET P.stock_general = producto_stock_general, P.stock_valorizado = producto_stock_valorizado WHERE P.id_producto = id_producto_inventario;
    UPDATE stock_bodegas SET stock = stock_inventario WHERE id_bodega = param_id_bodega AND id_producto = id_producto_inventario;

    END LOOP ciclo;
  
  CLOSE inventario_cursor;
   
   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CursorRevertirGuiaDespacho` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `CursorRevertirGuiaDespacho`(
	IN `param_id_guia` INT,
	IN `param_numero_documento` INT,
	IN `param_mac` VARCHAR(50)

,
	IN `param_id_bodega` INT
)
BEGIN
  DECLARE id_producto_var INT(11);
  DECLARE id_bodega_var INT(11) DEFAULT param_id_bodega;
  DECLARE cantidad_var DECIMAL(20,4);
  DECLARE valor_var DECIMAL(20,4);
  
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE detalle_guias_cursor CURSOR FOR (
                                       SELECT D.producto_id, D.cantidad, D.pmp FROM detalle_movimientos_guias AS D WHERE D.id_encabezado = param_id_guia
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN detalle_guias_cursor;
 
    ciclo: LOOP
    
    FETCH detalle_guias_cursor INTO id_producto_var, cantidad_var, valor_var;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;


    CALL `InsertarKardex`('+', id_producto_var, id_bodega_var, '52', param_numero_documento, cantidad_var, valor_var, CURDATE(), param_mac);

    END LOOP ciclo;
  
  CLOSE detalle_guias_cursor;
  


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DesvincularPagoConCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `DesvincularPagoConCompra`(
	IN `param_id_comprobante` INT
)
BEGIN
-- Elimina vinculacion anterior de este mismo comnprobante contable
  DELETE R FROM relacion_comprobantes_compra_pagos_dte AS R 
  WHERE EXISTS (
  
    SELECT 
      1
    FROM contab_diario_detalle AS C 
    INNER JOIN contab_diario_detalle AS C2
    ON
      C.tipo_dte = C2.tipo_dte
      AND C.numero_dte = C2.numero_dte
      AND C.rut = C2.rut
    WHERE  
      C.id_diario_cabecera  = param_id_comprobante
      -- AND FUNCDiarioOrigen(C.id) = 'PAGOPROVEEDORPARCIAL'
      -- AND FUNCDiarioOrigen(C2.id) = 'COMPRA'
      AND C2.id = R.id_contab_diario_detalle_1
      AND C.id = R.id_contab_diario_detalle_2
  );
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Diferencia` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `Diferencia`()
SELECT 
(SELECT SUM(IF(D.tipo_doc_ref = 61, D.monto_documento*-1, D.monto_documento)) FROM detalle_pago_proveedores AS D WHERE E.num_cheque = D.num_cheque AND D.id_cuenta = E.id_cta_cte_banco) AS suma,
E.id,
E.tipo_pago,
E.rut,
E.num_cheque,
E.fecha_emision,
E.monto_cheque,
E.fecha_anulacion,
E.glosa_cabecera
FROM cabecera_pago_proveedores AS E
WHERE 
  E.rut is not null
  AND (
    SELECT SUM(IF(D.tipo_doc_ref = 61, D.monto_documento*-1, D.monto_documento)) FROM detalle_pago_proveedores AS D WHERE E.num_cheque = D.num_cheque AND D.id_cuenta = E.id_cta_cte_banco
    ) <> E.monto_cheque ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DiferenciasPagoProveedoresCabeceraDetalle` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `DiferenciasPagoProveedoresCabeceraDetalle`()
BEGIN
  SELECT
    (SELECT IFNULL(SUM(IF(D.tipo_doc_ref = '61', D.monto_documento*-1, D.monto_documento)), 0) FROM detalle_pago_proveedores AS D WHERE D.id_cuenta = C.id_cta_cte_banco AND D.num_cheque = C.num_cheque) AS suma,
    C.*
  FROM cabecera_pago_proveedores AS C
  WHERE
    C.rut IS NOT NULL
  HAVING
    C.monto_cheque <> suma
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarBanco` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `eliminarBanco`(
	IN `param_id` INT
)
BEGIN
  DECLARE contexto VARCHAR(200) DEFAULT CONCAT('eliminarBanco param_id: ', param_id);
  DECLARE razones_no_eliminar int(11) DEFAULT (SELECT COUNT(1) FROM ctas_ctes_bancos AS C WHERE C.id_bancos = param_id);
  
  IF razones_no_eliminar > 0 THEN
    CALL errorCR(contexto, CONCAT('Existen ', razones_no_eliminar, ' cuentas corrientes asociadas a este banco'), 'Y');
  ELSE
    DELETE B FROM bancos AS B WHERE B.id_bancos = param_id;
  END IF;
  
  SELECT 'SUCCESS';
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `eliminarCaja`(
	IN `param_id_caja` INT
)
BEGIN
  DECLARE errores varchar(120) DEFAULT "";
  DECLARE movimeinto_caja int(11) DEFAULT (SELECT COUNT(*) FROM apertura_caja AS A WHERE A.id_caja = param_id_caja);
  
  IF movimeinto_caja > 0 THEN
    SET errores = "No se puede eliminar porque esta caja ya tiene movimeinto";
  ELSE
    DELETE FROM cajas WHERE `id_caja`=param_id_caja;
  END IF;
  
  SELECT "SUCCESS", errores AS errores;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarCartola` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `eliminarCartola`(
	IN `param_cuenta_corriente` INT,
	IN `param_mes` INT,
	IN `param_ano` INT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	
    DECLARE contexto_var VARCHAR(300);
    DECLARE id_bancos_saldos_mensuales_var INT(11);
    DECLARE fecha_proximo_periodo_var DATE DEFAULT DATE_ADD(DATE(CONCAT(param_ano,'-',param_mes,'-', 1)), INTERVAL 1 MONTH);
    DECLARE mes_proximo_periodo_var INT(11) DEFAULT MONTH(fecha_proximo_periodo_var);
    DECLARE ano_proximo_periodo_var INT(11) DEFAULT YEAR(fecha_proximo_periodo_var);
    DECLARE fecha_hora_actual_var TIMESTAMP DEFAULT NOW();
    
    SET id_bancos_saldos_mensuales_var = (SELECT
                                            B.id 
                                          FROM bancos_saldos_mensuales AS B
                                          WHERE
                                            B.cta_cte_banco = param_cuenta_corriente
                                            AND B.mes = param_mes
                                            AND B.agno = param_ano
                                          LIMIT 1);
                                          
    IF id_bancos_saldos_mensuales_var IS NULL THEN
      CALL errorCR(contexto_var, 'No se encontro el periodo correspondiente a eliminar', 'Y');
    ELSE
    
      UPDATE bancos_saldos_mensuales AS B
      SET
        B.fecha_cierre_conciliacion = NULL
      WHERE
        B.id = id_bancos_saldos_mensuales_var
      LIMIT 1;
        
      UPDATE bancos_saldos_mensuales AS B0
      SET 
        B0.saldo_bancario_inicial = 0
      WHERE
        B0.cta_cte_banco = param_cuenta_corriente
        AND B0.agno = ano_proximo_periodo_var
        AND B0.mes = mes_proximo_periodo_var
      LIMIT 1;
      
      UPDATE contab_diario_detalle AS D
      INNER JOIN cartolaBancos AS B
        ON B.id_comprobante_contable_conciliado = D.id
      SET
        D.mes_cartola_banco = NULL,
        D.`año_cartola_banco` = NULL
      WHERE
        B.id_banco = param_cuenta_corriente
        AND MONTH(B.fecha) = param_mes
        AND YEAR(B.fecha) = param_ano;
        
      DELETE B1 FROM cartolaBancos AS B1
      WHERE
        B1.id_banco = param_cuenta_corriente
        AND MONTH(B1.fecha) = param_mes
        AND YEAR(B1.fecha) = param_ano;
      
      SELECT "SUCCESS";
    END IF;
 
   END;
   
   -- ROLLBACK;
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarChequera` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `eliminarChequera`(
	IN `param_id` INT
)
BEGIN
  DECLARE contexto VARCHAR(200) DEFAULT CONCAT('eliminarChequera param_id: ', param_id);
  DECLARE razones_no_eliminar int(11) DEFAULT (SELECT COUNT(1) FROM cheques_chequera AS C WHERE C.chequera_id = param_id AND C.fecha_consumo IS NOT NULL);
  DECLARE razones_no_eliminar2 int(11) DEFAULT 0;
  
  DECLARE id_cta_cte_banco_var INT(11);
  DECLARE cheque_menor_var INT(11);
  DECLARE cheque_mayor_var INT(11);
  
  SELECT
      Ch.id_cta_cte_banco,
      Ch.numero_inicial,
      Ch.numero_final
    INTO
      id_cta_cte_banco_var,
      cheque_menor_var,
      cheque_mayor_var
    FROM chequeras AS Ch WHERE Ch.id = param_id;
    
  SET razones_no_eliminar2 = (SELECT COUNT(1) FROM cabecera_pago_proveedores AS E 
                              WHERE 
                                E.id_cta_cte_banco = id_cta_cte_banco_var 
                                AND E.num_cheque BETWEEN cheque_menor_var AND cheque_mayor_var
                                AND E.fecha_emision IS NOT NULL);
    
  IF razones_no_eliminar > 0 THEN
    CALL errorCR(contexto, CONCAT('Existen ', razones_no_eliminar, ' cheques emitidos asociados a esta chequera'), 'Y');
  ELSEIF razones_no_eliminar2 THEN
    CALL errorCR(contexto, CONCAT('Existen ', razones_no_eliminar2, ' cheques emitidos asociados a esta chequera'), 'Y');
  ELSE
    DELETE Ch FROM chequeras AS Ch WHERE Ch.id = param_id;
    DELETE CCh FROM cheques_chequera AS CCh WHERE CCh.chequera_id = param_id;
    DELETE E FROM cabecera_pago_proveedores AS E WHERE E.id_cta_cte_banco = id_cta_cte_banco_var AND E.num_cheque BETWEEN cheque_menor_var AND cheque_mayor_var;
  END IF;
  
  SELECT 'SUCCESS';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarComprobanteContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `eliminarComprobanteContable`(
	IN `param_fecha` DATE,
	IN `param_tipo` CHAR(1),
	IN `param_numero` INT
)
    COMMENT 'Elimina el comprobante mediante sus 3 valroes principales, año, tipo, numero'
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;
  END;
  DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;
  END;
  BEGIN
    DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('eliminarComprobanteContable param_fecha:', param_fecha, ' param_tipo: ', param_tipo, ' param_numero: ', param_numero);
    DECLARE id_comprobante_contable_var INT(11) DEFAULT FUNCGetIDComprobante(param_tipo, param_numero, param_fecha);
                                                              
    IF id_comprobante_contable_var IS NULL THEN
      CALL errorCR(contexto_var, 'No se encontro el comprobante', 'Y');
    END IF;
    
    IF FUNCGetEstadoPeriodoContable(MONTH(param_fecha), YEAR(param_fecha)) = 1 THEN
      CALL errorCR(contexto_var, 'Este periodo ya esta cerrado', 'Y');
    END IF;
    
    -- se actualizan los montos de los documetos, solo si son son de egreso
    IF (SELECT CSC.tipo_comprobante FROM contab_diario_cabecera AS CSC WHERE CSC.id = id_comprobante_contable_var LIMIT 1) = 'E' THEN
    
     UPDATE contab_diario_detalle AS D
                INNER JOIN r_compra_sii AS E
                  ON E.tipo_doc = D.tipo_dte AND E.numero_doc = D.numero_dte AND E.rut = D.rut
              SET
                E.monto_pagado = E.monto_pagado - ABS(D.debe - D.haber),
                E.monto_adeudado = E.monto_adeudado + ABS(D.debe - D.haber)
              WHERE 
                D.id_diario_cabecera = id_comprobante_contable_var
                AND FUNCDocumentoTributarioDisponibleCompra(D.tipo_dte) = '1';
                
    END IF;
            
    CALL eliminarComprobanteContableDesdeID(id_comprobante_contable_var);
    
    SELECT 'SUCCESS';
  END;
 
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarComprobanteContableDesdeID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `eliminarComprobanteContableDesdeID`(
	IN `param_id_comprobante_contable` INT
)
    COMMENT 'Elimina el comprbante desde la id unica'
BEGIN
  DECLARE contexto_var VARCHAR(200) DEFAULT CONCAT('eliminarComprobanteContableDesdeID id_comprobante_contable: ', param_id_comprobante_contable);

  IF param_id_comprobante_contable IS NOT NULL THEN     
  
    UPDATE cartolaBancos AS B
    SET
      B.id_comprobante_contable_conciliado = 0
    WHERE EXISTS ( SELECT 1 
                    FROM contab_diario_detalle AS D
                    INNER JOIN contab_diario_cabecera  AS C
                      ON C.id = D.id_diario_cabecera
                    WHERE 
                      D.id = B.id_comprobante_contable_conciliado 
                      AND C.id = param_id_comprobante_contable
                    );
  
  
    DELETE FROM contab_diario_cabecera WHERE contab_diario_cabecera.id = param_id_comprobante_contable;
    DELETE FROM contab_diario_detalle WHERE contab_diario_detalle.id_diario_cabecera = param_id_comprobante_contable;
  ELSE
  
    CALL errorCR(contexto_var, 'No se encontro el comporbante', 'N');
    
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarConcepto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `eliminarConcepto`(
	IN `param_id` INT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    
       DECLARE sigla_concepto CHAR(1) DEFAULT (SELECT Co.sigla FROM conceptos AS Co WHERE Co.id = param_id LIMIT 1);
    	 DECLARE veces_usado INT(11) DEFAULT (SELECT COUNT(1) FROM cabecera_pago_proveedores C WHERE C.tipo_pago = sigla_concepto);

       
       IF veces_usado > 0 THEN 
        CALL error(CONCAT("Este concepto a sido usado ", veces_usado, " en pagos con cheques"));
	     END IF;
       
       
       DELETE FROM conceptos WHERE id = param_id;
       
		   SELECT 'SUCCESS';
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarConceptoCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `eliminarConceptoCaja`(
	IN `param_id` INT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
  
    	DECLARE veces_usado INT(11) DEFAULT (SELECT COUNT(1) FROM det_movimientos_caja AS D WHERE D.id_concepto_caja = param_id);

       
       IF veces_usado > 0 THEN 
        CALL error(CONCAT('No se puede eliminar el concepto porque ya fue usando ', veces_usado, ' veces en caja'));
	     END IF;
       
       
       DELETE FROM conceptos_ingresos_egresos_caja WHERE id = param_id;
       
		   SELECT 'SUCCESS';
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarCtaCteBanco` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `eliminarCtaCteBanco`(
	IN `param_id` INT
)
BEGIN
  DECLARE contexto VARCHAR(200) DEFAULT CONCAT('eliminarCtaCteBanco param_id: ', param_id);
  DECLARE razones_no_eliminar int(11) DEFAULT (SELECT COUNT(1) FROM chequeras AS Ch WHERE Ch.id_cta_cte_banco = param_id);
  
  IF razones_no_eliminar > 0 THEN
    CALL errorCR(contexto, CONCAT('Existen ', razones_no_eliminar, ' chequeras asociadas a esta cuenta corriente'), 'Y');
  ELSE
    DELETE C FROM ctas_ctes_bancos AS C WHERE C.id_cta_cte_banco = param_id;
  END IF;
  
  SELECT 'SUCCESS';
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `EliminarCuentaContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `EliminarCuentaContable`(
	IN `param_numero_cuenta_contable` INT

)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    
    	 DECLARE nodos_hijo INT(11) DEFAULT (SELECT COUNT(*) FROM ctas_contables C WHERE C.padre_cta_contable = param_numero_cuenta_contable);DECLARE movimiento INT(11);IF nodos_hijo > 0 THEN 
        CALL error(CONCAT("Este nodo tiene ", nodos_hijo, " hijos, eliminalos primero antes de poder eliminar este nodo"));END IF;SET movimiento = (SELECT COUNT(*) FROM contab_diario_detalle AS D WHERE D.cuenta_contable = param_numero_cuenta_contable);IF movimiento > 0 THEN 
        CALL error(CONCAT("Este nodo tiene ", movimiento, " movimientos, no se puede eliminar"));END IF;DELETE FROM ctas_contables WHERE cta_contable = param_numero_cuenta_contable;SELECT "SUCCESS";END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarDetalleInventarioTablaPaso` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `eliminarDetalleInventarioTablaPaso`(
	IN `param_mac` VARCHAR(100),
	IN `param_id_producto` INT

)
BEGIN
  DECLARE id_cabezera int(11) DEFAULT (SELECT I.id_inventario_tabla_paso_encabezado FROM inventario_tabla_paso_encabezado AS I WHERE I.mac_inventario_tabla_paso_encabezado = param_mac LIMIT 1);
  
  DELETE FROM inventario_tabla_paso_detalle WHERE  `id_inventario_tabla_paso_encabezado` = id_cabezera AND id_producto_inventario_tabla_paso_detalle = param_id_producto;

  SELECT "SUCCESS";
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarInventarioTablaPaso` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `eliminarInventarioTablaPaso`(
	IN `param_mac` VARCHAR(100)

)
BEGIN
  DECLARE id_cabezera int(11) DEFAULT (SELECT I.id_inventario_tabla_paso_encabezado FROM inventario_tabla_paso_encabezado AS I WHERE I.mac_inventario_tabla_paso_encabezado = param_mac LIMIT 1);
  
  DELETE FROM inventario_tabla_paso_encabezado WHERE  `id_inventario_tabla_paso_encabezado`=id_cabezera;
  DELETE FROM inventario_tabla_paso_detalle WHERE  `id_inventario_tabla_paso_encabezado`=id_cabezera;

  SELECT "SUCCESS";
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarMoneda` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `eliminarMoneda`(
	IN `param_id` INT
)
BEGIN
  DECLARE contexto VARCHAR(200) DEFAULT CONCAT('eliminarMoneda param_id: ', param_id);
  DECLARE razones_no_eliminar int(11) DEFAULT (SELECT COUNT(1) FROM ctas_ctes_bancos AS CC WHERE CC.id_moneda = param_id);
  
  IF razones_no_eliminar > 0 THEN
    CALL errorCR(contexto, CONCAT('Existen ', razones_no_eliminar, ' cuentas corrientes asociadas a esta moneda'), 'Y');
  ELSE
    DELETE M FROM monedas AS M WHERE M.id = param_id;
  END IF;
  
  SELECT 'SUCCESS';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarProducto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `eliminarProducto`(
	IN `param_codigo` INT
)
BEGIN
  DECLARE cantidad_movimiento int(11) DEFAULT (SELECT COUNT(*) FROM kardex AS K WHERE K.id_producto = param_codigo);
  
  
  IF cantidad_movimiento > 0 THEN
    SELECT CONCAT("Este producto no se puede eliminar, cuenta con " , cantidad_movimiento, " movimientos");
  ELSE
    DELETE P FROM productos AS P WHERE P.id_producto = param_codigo;
    DELETE B FROM stock_bodegas AS B WHERE B.id_producto = param_codigo;
    DELETE R FROM relacion_codigos_alternativos_productos AS R WHERE R.producto_id = param_codigo;
    
    SELECT "SUCCESS";
  END IF;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `eliminarRelacionSucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `eliminarRelacionSucursal`(
	IN `param_mac` VARCHAR(50)

)
BEGIN
  DELETE FROM relacion_sucursal_pc WHERE  mac_address = param_mac;
  UPDATE cajas SET `mac_address_asignada` = '' WHERE `mac_address_asignada` = param_mac;
  SELECT "SUCCESS";
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `error` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `error`(
	IN `param_text` VARCHAR(250)
)
BEGIN
 SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = param_text;
      
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `errorCR` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `errorCR`(
	IN `param_contexto` VARCHAR(200),
	IN `param_text` VARCHAR(500),
	IN `param_salta_error` ENUM('Y','N')
)
    COMMENT 'guarda un mensaje, ademas de lanzar un error si se configura'
BEGIN
  INSERT INTO mensaje_log (`contexto`, `mensaje`, `lanzo_error`) 
  VALUES (param_contexto, param_text, param_salta_error);
  
  IF param_salta_error = 'Y' THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = param_text;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `generarDetalleConsumoFolioPorDia` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `generarDetalleConsumoFolioPorDia`(
	IN `param_fecha` DATE


)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
      
      DECLARE forzar_reobtencion char(1) DEFAULT '0';
    	DECLARE tipo_documento int(2);
      DECLARE numero_inicial int(11) DEFAULT 0;
      DECLARE numero_final int(11) DEFAULT 0;
      
      DECLARE folio_actual int(11);
      DECLARE folio_siguiente int(11);
      DECLARE contador int(11);      
      DECLARE termino_secuencia bool DEFAULT false;
      
      
      DELETE P FROM folios_pitagoras AS P WHERE P.fecha = param_fecha;
      
      
      
      SET tipo_documento = 39;
      
      
      SELECT 
          min(E.numero_documento),
          max(E.numero_documento)
        INTO
          numero_inicial,
          numero_final
        FROM encabezado_movimientos AS E 
        WHERE 
          E.tipo_documento = tipo_documento 
          AND E.fecha_documento = param_fecha;
      
      
      IF numero_inicial IS NOT NULL THEN
      
        SET folio_actual = numero_inicial;
        SET contador = numero_inicial;
        
        WHILE contador <= numero_final DO
      
        
        SET folio_siguiente = (SELECT E2.numero_documento FROM encabezado_movimientos AS E2 WHERE E2.numero_documento = (contador + 1) AND E2.tipo_documento = tipo_documento AND E2.fecha_documento = param_fecha);
        
        IF termino_secuencia = true THEN
          SET numero_inicial = folio_actual;
        END IF;
        
        IF folio_actual IS NOT NULL THEN
        
          IF folio_siguiente IS NULL THEN
            INSERT INTO folios_pitagoras (`fecha`, `tipo_documento`, `monto_neto`, `numero_inicial`, `numero_final`, `folios_emitidos`, `folios_anulados`, `folios_usados`)
            SELECT param_fecha, tipo_documento, ROUND(SUM(E.neto)) AS neto, numero_inicial, folio_actual, COUNT(*), 0, COUNT(*) FROM encabezado_movimientos AS E WHERE E.tipo_documento = 39 AND E.numero_documento BETWEEN numero_inicial AND folio_actual;
                        
            SET termino_secuencia = true;
          ELSE
            SET termino_secuencia = false;
          END IF;
          
        END IF;
        
        

        SET folio_actual = folio_siguiente;
        SET contador = contador + 1;
        
        END WHILE;
      ELSE
        INSERT INTO folios_pitagoras (`fecha`, `tipo_documento`, `monto_neto`, `numero_inicial`, `numero_final`, `folios_emitidos`, `folios_anulados`, `folios_usados`)
        VALUES (param_fecha, tipo_documento, '0', '0', '0', '0', '0', '0');
      END IF;
      
      
      
      SET tipo_documento = 41;
      
      
      SELECT 
          min(E.numero_documento),
          max(E.numero_documento)
        INTO
          numero_inicial,
          numero_final
        FROM encabezado_movimientos AS E 
        WHERE 
          E.tipo_documento = tipo_documento 
          AND E.fecha_documento = param_fecha
          AND E.tipo_documento_referencia = 39;
      
      
      IF numero_inicial IS NOT NULL THEN
      
        SET folio_actual = numero_inicial;
        SET contador = numero_inicial;
        SET termino_secuencia = false;
        
        WHILE contador <= numero_final DO
      
        
        SET folio_siguiente = (SELECT E2.numero_documento FROM encabezado_movimientos AS E2 WHERE E2.numero_documento = (contador + 1) AND E2.tipo_documento = tipo_documento AND E2.tipo_documento_referencia = 39 AND E2.fecha_documento = param_fecha);
        
        IF termino_secuencia = true THEN
          SET numero_inicial = folio_actual;
        END IF;
        
        IF folio_actual IS NOT NULL THEN
        
          IF folio_siguiente IS NULL THEN
            INSERT INTO folios_pitagoras (`fecha`, `tipo_documento`, `monto_neto`, `numero_inicial`, `numero_final`, `folios_emitidos`, `folios_anulados`, `folios_usados`)
            SELECT param_fecha, tipo_documento, ROUND(SUM(E.neto)) AS neto, numero_inicial, folio_actual, COUNT(*), 0, COUNT(*) FROM encabezado_movimientos AS E WHERE E.tipo_documento = tipo_documento AND E.tipo_documento_referencia = 39 AND E.numero_documento BETWEEN numero_inicial AND folio_actual;
                        
            SET termino_secuencia = true;
          ELSE
            SET termino_secuencia = false;
          END IF;
          
        END IF;
        
        

        SET folio_actual = folio_siguiente;
        SET contador = contador + 1;
        
        END WHILE;
      ELSE
        INSERT INTO folios_pitagoras (`fecha`, `tipo_documento`, `monto_neto`, `numero_inicial`, `numero_final`, `folios_emitidos`, `folios_anulados`, `folios_usados`)
        VALUES (param_fecha, tipo_documento, '0', '0', '0', '0', '0', '0');
      END IF;
      
      
      
      
      SET tipo_documento = 61;
      
      
      SELECT 
          min(E.numero_documento),
          max(E.numero_documento)
        INTO
          numero_inicial,
          numero_final
        FROM encabezado_movimientos AS E 
        WHERE 
          E.tipo_documento = tipo_documento 
          AND E.fecha_documento = param_fecha
          AND E.tipo_documento_referencia = 39;
      
      
      IF numero_inicial IS NOT NULL THEN
      
        SET folio_actual = numero_inicial;
        SET contador = numero_inicial;
        SET termino_secuencia = false;
        
        WHILE contador <= numero_final DO
      
        
        SET folio_siguiente = (SELECT E2.numero_documento FROM encabezado_movimientos AS E2 WHERE E2.numero_documento = (contador + 1) AND E2.tipo_documento = tipo_documento AND E2.tipo_documento_referencia = 39 AND E2.fecha_documento = param_fecha);
        
        IF termino_secuencia = true THEN
          SET numero_inicial = folio_actual;
        END IF;
        
        IF folio_actual IS NOT NULL THEN
        
          IF folio_siguiente IS NULL THEN
            INSERT INTO folios_pitagoras (`fecha`, `tipo_documento`, `monto_neto`, `numero_inicial`, `numero_final`, `folios_emitidos`, `folios_anulados`, `folios_usados`)
            SELECT param_fecha, tipo_documento, ROUND(SUM(E.neto)) AS neto, numero_inicial, folio_actual, COUNT(*), 0, COUNT(*) FROM encabezado_movimientos AS E WHERE E.tipo_documento = tipo_documento AND E.tipo_documento_referencia = 39 AND E.numero_documento BETWEEN numero_inicial AND folio_actual;
                        
            SET termino_secuencia = true;
          ELSE
            SET termino_secuencia = false;
          END IF;
          
        END IF;
        
        

        SET folio_actual = folio_siguiente;
        SET contador = contador + 1;
        
        END WHILE;
      ELSE
        INSERT INTO folios_pitagoras (`fecha`, `tipo_documento`, `monto_neto`, `numero_inicial`, `numero_final`, `folios_emitidos`, `folios_anulados`, `folios_usados`)
        VALUES (param_fecha, tipo_documento, '0', '0', '0', '0', '0', '0');
      END IF;
    
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `generarOrdenCompraXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `generarOrdenCompraXML`(
	IN `param_xml` MEDIUMTEXT

)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml MEDIUMTEXT DEFAULT param_xml;
    	 
	    
      DECLARE contador int(11) DEFAULT 1;
      
	    
	    DECLARE id int(11);
	    DECLARE rut char(11) DEFAULT ExtractValue(xml, '//DOrdenCompra/Rut_proveedor');
	    DECLARE dv	char(1) DEFAULT ExtractValue(xml, '//DOrdenCompra/Dv_proveedor');
      DECLARE glosa_var	varchar(500) DEFAULT ExtractValue(xml, '//DOrdenCompra/Glosa');
      DECLARE fecha_var	DATE DEFAULT STR_TO_DATE(ExtractValue(xml, '//DOrdenCompra/Fecha_db'), '%Y-%m-%d');

	    
		 DECLARE id_encabezado int(11);
		 DECLARE codigo_proveedor char(20);
     DECLARE id_producto int(11);
		 DECLARE descripcion_interno varchar(100);
		 DECLARE cantidad float(11,4);
     DECLARE precio decimal(18,4);
     

	  INSERT INTO encabezado_oc (`rut`, `dv`, `glosa`, `fecha`) VALUES (rut, dv, glosa_var, fecha_var);
    SET id = LAST_INSERT_ID();
			 
		   WHILE ((contador < 10000) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[',contador,']/Id_producto')) != ''))  DO
		   
      	
      	SET id_encabezado = id;
        SET codigo_proveedor = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Codigo_proveedor'));
      	SET id_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Id_producto'));
      	SET descripcion_interno = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Descripcion_interno'));
      	SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Cantidad_pedido'));
      	SET precio = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Precio'));
        
      	
      	INSERT INTO detalle_oc (`id_encabezado`, `codigo_proveedor`, `id_producto`, `descripcion_interno`, `cantidad`, `precio`, `total_linea`, `id_unidad`) 
        VALUES (id_encabezado, codigo_proveedor, id_producto, descripcion_interno, cantidad, precio, CAST(cantidad * precio AS DECIMAL(18,4)) , (SELECT P.unidad_venta FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1));
       
        SET contador = contador + 1;
      
      END WHILE;
		   
		   SELECT "SUCCESS", id;
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getBanco` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getBanco`(
	IN `param_id` INT




)
BEGIN
  SELECT B.id_bancos AS id, B.cod_banco, B.nom_banco AS descripcion FROM bancos AS B WHERE B.id_bancos = param_id LIMIT 1;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getBancos` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getBancos`()
BEGIN
  SELECT
    B.id_bancos,
    B.cod_banco,
    B.nom_banco
  FROM bancos AS B
  WHERE
    (SELECT COUNT(*) FROM ctas_ctes_bancos AS C WHERE C.id_bancos = B.id_bancos) > 0
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getBodega` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getBodega`(
	IN `param_numero_bodega` INT,
	IN `param_id_sucursal` INT
)
BEGIN

  SELECT 
			S.id, 
			S.id_sucursal, 
			S.numero_bodega, 
			S.nombre_bodega, 
			S.estado_bodega
	
	FROM bodegas AS S
  WHERE S.numero_bodega = param_numero_bodega
  AND S.id_sucursal = param_id_sucursal
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getBodegaByID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getBodegaByID`(
	IN `param_id` INT

)
BEGIN
  SELECT B.id, B.id_sucursal, B.numero_bodega, B.nombre_bodega, B.estado_bodega FROM bodegas AS B WHERE B.id = param_id LIMIT 1;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GETCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `GETCaja`(
	IN `param_numero_caja` INT,
	IN `param_correlativo` INT

)
BEGIN
  
  DECLARE id_caja int(11) DEFAULT param_numero_caja;
  DECLARE id_apertura_caja int(11);
  DECLARE correlativo int(11) DEFAULT param_correlativo;
  DECLARE fecha_apertura datetime;
  DECLARE monto_apertura float(11,4);
  
  DECLARE monto_efectivo float(18,4);
  DECLARE monto_TC float(18,4);
  DECLARE monto_TD float(18,4);
  DECLARE monto_cheque float(18,4);
  DECLARE monto_transferncia float(18,4);
  
  DECLARE count_monto_efectivo int(11);
  DECLARE count_monto_TC int(11);
  DECLARE count_monto_TD int(11);
  DECLARE count_monto_cheque int(11);
  DECLARE count_monto_transferncia int(11); 
  
  SET id_apertura_caja = (SELECT C.id_apertura FROM apertura_caja AS C WHERE C.id_caja = id_caja AND C.correlativo = correlativo AND C.fecha_cierre IS NOT NULL);     
  
  SELECT 
    DATE_FORMAT(A.fecha_apertura, "%d-%m-%Y") AS fecha_apertura,
    DATE_FORMAT(A.fecha_apertura, "%d-%m-%Y %H:%m:%s") AS fecha_apertura_new,
    DATE_FORMAT(A.fecha_cierre, "%d-%m-%Y %H:%m:%s") AS fecha_cierre_new,
    id_caja,
    correlativo,
    A.efectivo AS monto_efectivo,
    A.credito AS monto_TC,
    A.debito AS monto_TD,
    A.cheque AS monto_cheque,
    A.transferencia AS monto_transferncia,
    A.monto_apertura AS monto_apertura,
    A.cant_efectivo AS count_monto_efectivo,
    A.cant_credito AS count_monto_TC,
    A.cant_debito AS count_monto_TD,
    A.cant_cheque AS count_monto_cheque,
    A.cant_transferencia AS count_monto_transferncia
  FROM apertura_caja AS A WHERE A.id_apertura = id_apertura_caja;
    
  SELECT
    D.id_tipo_detalle_mov_caja,
    D.descripcion_mov_caja,
    D.monto_mov_caja,
    D.num_documento,
    D.comentario,
    D.rut,
    D.fecha
  FROM 
    det_movimientos_caja AS D
  WHERE 
    D.id_apertura_caja = id_apertura_caja;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GETCaja3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `GETCaja3`(
	IN `param_numero_caja` INT,
	IN `param_correlativo` INT
)
BEGIN
  
  DECLARE id_caja int(11) DEFAULT param_numero_caja;
  DECLARE id_apertura_caja int(11);
  DECLARE correlativo int(11) DEFAULT param_correlativo;
  DECLARE fecha_apertura datetime;
  DECLARE monto_apertura float(11,4);
  
  DECLARE monto_efectivo float(18,4);
  DECLARE monto_TC float(18,4);
  DECLARE monto_TD float(18,4);
  DECLARE monto_cheque float(18,4);
  DECLARE monto_transferncia float(18,4);
  
  DECLARE count_monto_efectivo int(11);
  DECLARE count_monto_TC int(11);
  DECLARE count_monto_TD int(11);
  DECLARE count_monto_cheque int(11);
  DECLARE count_monto_transferncia int(11); 
  
  SET id_apertura_caja = (SELECT C.id_apertura FROM apertura_caja AS C WHERE C.id_caja = id_caja AND C.correlativo = correlativo AND C.fecha_cierre IS NOT NULL);     
  
  SELECT 
    DATE_FORMAT(A.fecha_apertura, "%d-%m-%Y") AS fecha_apertura,
    DATE_FORMAT(A.fecha_apertura, "%d-%m-%Y %H:%m:%s") AS fecha_apertura_new,
    DATE_FORMAT(A.fecha_cierre, "%d-%m-%Y %H:%m:%s") AS fecha_cierre_new,
    id_caja,
    correlativo,
    A.efectivo AS monto_efectivo,
    A.credito AS monto_TC,
    A.debito AS monto_TD,
    A.cheque AS monto_cheque,
    A.transferencia AS monto_transferncia,
    A.convenio AS monto_convenio, 
    A.monto_apertura AS monto_apertura,
    A.cant_efectivo AS count_monto_efectivo,
    A.cant_credito AS count_monto_TC,
    A.cant_debito AS count_monto_TD,
    A.cant_cheque AS count_monto_cheque,
    A.cant_transferencia AS count_monto_transferncia,
    A.cant_convenio AS count_monto_convenio,
    A.venta AS monto_venta,
    A.diferencia
  FROM apertura_caja AS A WHERE A.id_apertura = id_apertura_caja;
    
  SELECT
    D.descripcion_mov_caja,
    D.monto_mov_caja,
    D.num_documento,
    D.comentario,
    D.rut,
    D.fecha,
    D.tipo_detalle_mov_caja,
    D.id_concepto_caja     
  FROM 
    det_movimientos_caja AS D
  WHERE 
    D.id_apertura_caja = id_apertura_caja;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCajaID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCajaID`(
	IN `param_id` INT



)
BEGIN
  SELECT
    C.id_caja,
    C.nombre_caja,
    C.id_sucursal,
    C.monto_apertura
  FROM cajas AS C
  WHERE 
    C.id_caja = param_id
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCargarDartosSolicitudMercaderia` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCargarDartosSolicitudMercaderia`(
	IN `param_mac` VARCHAR(100)

)
BEGIN
  DECLARE sucursal_var int(11) DEFAULT idSucursalDesdeMac(param_mac);
  
  DECLARE direccion_sucursal varchar(250) DEFAULT (SELECT S.direccion FROM sucursales AS S WHERE S.id = sucursal_var LIMIT 1);
  
  SELECT direccion_sucursal;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCartolaBancoParaConciliacionPorPeriodoCuentaCorriente` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCartolaBancoParaConciliacionPorPeriodoCuentaCorriente`(
	IN `param_cuenta_corriente` INT,
	IN `param_mes` INT,
	IN `param_ano` INT
)
BEGIN
  DECLARE fecha_primer_dia_mes_var DATE DEFAULT DATE(CONCAT(param_ano,'-',param_mes,'-', 1));
  DECLARE fecha_periodo_anterior_var DATE DEFAULT DATE_SUB(DATE(CONCAT(param_ano,'-',param_mes,'-', 1)), INTERVAL 3 MONTH);
  DECLARE fecha_creacion_cta_cte DATE;
  DECLARE saldo_inicial_cta_cte INT(11);
  
  
  DECLARE id_bancos_saldos_mensuales_var INT(11);
  DECLARE fecha_conciliacion_var DATETIME;
  
  DECLARE saldo_inicial_cartola_var INT(11) DEFAULT 0;
  DECLARE saldo_final_cartola_var INT(11) DEFAULT 0;
  DECLARE total_debe_cartola_var INT(11) DEFAULT 0;
  DECLARE total_haber_cartola_var INT(11) DEFAULT 0;
  
  DECLARE saldo_inicial_contable_var INT(11) DEFAULT 0;
  DECLARE saldo_final_contable_var INT(11) DEFAULT 0;
  DECLARE total_debe_contable_var INT(11) DEFAULT 0;
  DECLARE total_haber_contable_var INT(11) DEFAULT 0;
  
  DECLARE cuenta_contable_var INT(11);      
 
  CALL `insertLog`(CONCAT('getCartolaBancoPorPeriodoCuentaCorriente ', ' mes ', param_mes, ' año ', param_ano));
  
  IF (SELECT COUNT(1) FROM ctas_ctes_bancos AS CCB WHERE CCB.id_cta_cte_banco = param_cuenta_corriente LIMIT 1) = 0 THEN
    CALL error('No se encontro la cuenta corriente');
  END IF; 
  
  SELECT
    CCB.created_at,
    CCB.saldo_inicial,
    CCB.cta_contable        
  INTO
    fecha_creacion_cta_cte,
    saldo_inicial_cta_cte,
    cuenta_contable_var
  FROM ctas_ctes_bancos AS CCB WHERE CCB.id_cta_cte_banco = param_cuenta_corriente LIMIT 1;
  
  (SELECT
    'B' AS origen,
    C.id,
    0 AS id_diario_detalle,
    0 AS tipo_comprobante,
    0 AS numero_comprobante,
    C.fecha,
    C.numero_movimiento,
    C.fecha_dte AS numero_dte,
    C.cargo,
    C.abono,
    C.descripcion_movimiento AS glosa,
    C.id_comprobante_contable_conciliado,
    C.fecha as fecha_temporal
  FROM cartolaBancos AS C
  WHERE
    C.id_banco = param_cuenta_corriente
    AND MONTH(C.fecha) = param_mes
    AND YEAR(C.fecha) = param_ano
  )
  UNION ALL
  (SELECT 
    'C', 
    D.id_diario_cabecera, 
    D.id,
    CDC.tipo_comprobante,
    CDC.numero_comprobante,
    D.fecha_documento, 
    D.documento, 
    (SELECT B0.fecha FROM cartolaBancos AS B0 WHERE B0.id_comprobante_contable_conciliado = D.id LIMIT 1) AS numero_dte, 
    D.debe,
    D.haber,
    D.glosa_detalle, 
    D.id,
    (SELECT B0.fecha FROM cartolaBancos AS B0 WHERE B0.id_comprobante_contable_conciliado = D.id LIMIT 1) AS fecha_temporal
  FROM contab_diario_detalle AS D 
  INNER JOIN contab_diario_cabecera AS CDC
    ON D.id_diario_cabecera = CDC.id
  WHERE EXISTS (SELECT 1 FROM cartolaBancos AS B WHERE
                                                      B.id_banco = param_cuenta_corriente
                                                      AND MONTH(B.fecha) = param_mes
                                                      AND YEAR(B.fecha) = param_ano
                                                      AND B.id_comprobante_contable_conciliado = D.id)
                                            AND D.cuenta_contable = cuenta_contable_var
                                                                                                                                                         
  )
  
  ORDER BY 
    fecha_temporal ASC,
    id_comprobante_contable_conciliado ASC,
    IF(origen = 'B', 0, 1) ASC
    ;
  
  SET id_bancos_saldos_mensuales_var = (
                  SELECT
                      C.id
                    FROM bancos_saldos_mensuales AS C
                    WHERE
                      C.agno = param_ano
                      AND C.mes = param_mes
                      AND C.cta_cte_banco = param_cuenta_corriente
                    LIMIT 1
                    );
        
  SELECT
    C.saldo_bancario_inicial,
    C.fecha_cierre_conciliacion
  INTO
    saldo_inicial_cartola_var,
    fecha_conciliacion_var
  FROM bancos_saldos_mensuales AS C
  WHERE
    C.id = id_bancos_saldos_mensuales_var
  LIMIT 1;
  
  SET saldo_inicial_contable_var = (SELECT
                                    IFNULL(SUM(FUNCSumarDebeHaberDependiendoCuenta(CDD.debe, CDD.haber, CDD.cuenta_contable)), 0)
                                  FROM contab_diario_detalle AS CDD
                                  INNER JOIN contab_diario_cabecera AS CDC
                                  ON CDD.id_diario_cabecera = CDC.id
                                  WHERE
                                    CDD.cuenta_contable = cuenta_contable_var
                                    AND CDC.vigente = '1'
                                    AND YEAR(CDC.fecha_comprobante) = param_ano
                                    AND ( 
                                          CDC.fecha_comprobante < fecha_primer_dia_mes_var
                                           OR 
                                          ( CDC.tipo_comprobante = 'T'
                                          AND CDC.numero_comprobante = 1)    
                                    )
                                  );
    
  SELECT
    IFNULL(SUM(C.cargo), 0),
    IFNULL(SUM(C.abono), 0)
  INTO
    total_debe_cartola_var,
    total_haber_cartola_var
  FROM cartolaBancos AS C
  WHERE
    C.id_banco = param_cuenta_corriente
    AND MONTH(C.fecha) = param_mes
    AND YEAR(C.fecha) = param_ano
  ;
  
  SELECT
    IFNULL(SUM(CDD.haber), 0),
    IFNULL(SUM(CDD.debe), 0)
  INTO
    total_debe_contable_var,
    total_haber_contable_var
  FROM contab_diario_detalle AS CDD
  INNER JOIN contab_diario_cabecera AS CDC
  ON CDD.id_diario_cabecera = CDC.id
  WHERE
    CDD.cuenta_contable = cuenta_contable_var
    AND CDC.vigente = '1'
    AND MONTH(CDC.fecha_comprobante) = param_mes
    AND YEAR(CDC.fecha_comprobante) = param_ano
    AND CONCAT(CDC.tipo_comprobante, CDC.numero_comprobante) <> 'T1';
  
  SET saldo_final_cartola_var = saldo_inicial_cartola_var - total_debe_cartola_var + total_haber_cartola_var;
  
  SET saldo_final_contable_var = saldo_inicial_contable_var - total_debe_contable_var + total_haber_contable_var;
  
  SELECT 
      saldo_inicial_cartola_var AS saldo_inicial, 
      total_debe_cartola_var AS total_debe,
      total_haber_cartola_var AS total_haber,
      saldo_final_cartola_var AS saldo_final,
      IF(fecha_conciliacion_var IS NULL, '0', '1') AS is_periodo_cerrado,
      fecha_conciliacion_var AS fecha_cierre_conciliacion,
      
      saldo_inicial_contable_var AS saldo_inicial_contable,
      total_debe_contable_var AS total_debe_contable,
      total_haber_contable_var AS total_haber_contable,
      saldo_final_contable_var AS saldo_final_contable,
      (
      SELECT
        COUNT(1)
      FROM cartolaBancos AS C
      WHERE
        C.id_banco = param_cuenta_corriente 
        AND MONTH(C.fecha) = MONTH(fecha_periodo_anterior_var)
        AND YEAR(C.fecha) = YEAR(fecha_periodo_anterior_var)
        AND C.id_comprobante_contable_conciliado = 0
        ) 
        AS cant_sin_conciliar_mes_anterior
      ;
      
    SELECT
      CDC.id AS id_comprobante,
      CDC.tipo_comprobante,
      CDC.fecha_comprobante,
      CDC.numero_comprobante,
      CDC.glosa_comprobante,
      CDD.id AS id_detalle,
      CDD.cuenta_contable,
      CDD.glosa_detalle,
      CDD.debe,
      CDD.haber,
      CDD.tipo_documento,
      CDD.documento,
      CDD.rut,
      CDD.tipo_dte,
      CDD.numero_dte,
      IFNULL(CDD.fecha_documento, CDC.fecha_comprobante) AS fecha_documento,
      IFNULL(CDD.fecha_vencimiento, IFNULL(CDD.fecha_documento, CDC.fecha_comprobante)) AS fecha_vencimiento,
      CDD.tipo_comprobante,
      CDD.fecha_cobro,
      CDD.mes_cartola_banco,
      CDD.`año_cartola_banco`
    FROM contab_diario_detalle AS CDD
    INNER JOIN contab_diario_cabecera AS CDC
    ON CDD.id_diario_cabecera = CDC.id
    WHERE
      CDD.cuenta_contable = cuenta_contable_var
      AND CDC.vigente = '1'
      AND CDD.mes_cartola_banco IS NULL
      AND NOT EXISTS (SELECT 1 FROM cartolaBancos AS CB WHERE CB.id_comprobante_contable_conciliado = CDD.id LIMIT 1)
      AND CONCAT(CDC.tipo_comprobante, CDC.numero_comprobante) <> 'T1'
    ;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCartolaBancoPorPeriodoCuentaCorriente` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCartolaBancoPorPeriodoCuentaCorriente`(
	IN `param_cuenta_corriente` INT,
	IN `param_mes` INT,
	IN `param_ano` INT
)
BEGIN
  DECLARE fecha_primer_dia_mes_var DATE DEFAULT DATE(CONCAT(param_ano,'-',param_mes,'-', 1));
  DECLARE fecha_periodo_anterior_var DATE DEFAULT DATE_SUB(DATE(CONCAT(param_ano,'-',param_mes,'-', 1)), INTERVAL 3 MONTH);
  DECLARE fecha_creacion_cta_cte DATE;
  DECLARE saldo_inicial_cta_cte INT(11);
  
  DECLARE saldo_inicial_cartola_var INT(11) DEFAULT 0;
  DECLARE saldo_final_cartola_var INT(11) DEFAULT 0;
  DECLARE total_debe_cartola_var INT(11) DEFAULT 0;
  DECLARE total_haber_cartola_var INT(11) DEFAULT 0;
 
  CALL `insertLog`(CONCAT('getCartolaBancoPorPeriodoCuentaCorriente ', ' mes ', param_mes, ' año ', param_ano));
  
  IF (SELECT COUNT(1) FROM ctas_ctes_bancos AS CCB WHERE CCB.id_cta_cte_banco = param_cuenta_corriente LIMIT 1) = 0 THEN
    CALL error('No se encontro la cuenta corriente');
  END IF; 
  
  SELECT
    CCB.created_at,
    CCB.saldo_inicial
  INTO
    fecha_creacion_cta_cte,
    saldo_inicial_cta_cte
  FROM ctas_ctes_bancos AS CCB WHERE CCB.id_cta_cte_banco = param_cuenta_corriente LIMIT 1;
  
  (SELECT
    'B' AS origen,
    C.id,
    C.fecha,
    C.numero_movimiento,
    C.fecha_dte AS numero_dte,
    C.cargo,
    C.abono,
    C.descripcion_movimiento AS glosa,
    C.id_comprobante_contable_conciliado,
    C.fecha as fecha_temporal
  FROM cartolaBancos AS C
  WHERE
    C.id_banco = param_cuenta_corriente
    AND MONTH(C.fecha) = param_mes
    AND YEAR(C.fecha) = param_ano
  )
  UNION ALL
  (SELECT 
    'C', 
    D.id_diario_cabecera, 
    D.fecha_documento, 
    D.documento, 
    (SELECT B0.fecha FROM cartolaBancos AS B0 WHERE B0.id_comprobante_contable_conciliado = D.id LIMIT 1) AS numero_dte, 
    D.debe,
    D.haber,
    D.glosa_detalle, 
    D.id,
    (SELECT B0.fecha FROM cartolaBancos AS B0 WHERE B0.id_comprobante_contable_conciliado = D.id LIMIT 1) AS fecha_temporal
  FROM contab_diario_detalle AS D WHERE EXISTS (SELECT 1 FROM cartolaBancos AS B WHERE
                                                      B.id_banco = param_cuenta_corriente
                                                      AND MONTH(B.fecha) = param_mes
                                                      AND YEAR(B.fecha) = param_ano
                                                      AND B.id_comprobante_contable_conciliado = D.id)
                                            AND D.cuenta_contable = (SELECT CCB.cta_contable FROM ctas_ctes_bancos AS CCB WHERE CCB.id_cta_cte_banco = param_cuenta_corriente LIMIT 1)
                                                                                                                                                         
  )
  
  ORDER BY 
    fecha_temporal ASC,
    id_comprobante_contable_conciliado ASC,
    IF(origen = 'B', 0, 1) ASC
    ;
  
  SET saldo_inicial_cartola_var =  IFNULL(
        (
      SELECT
          C.saldo_bancario_inicial
        FROM bancos_saldos_mensuales AS C
        WHERE
          C.agno = param_ano
          AND C.mes = param_mes
          AND C.cta_cte_banco = param_cuenta_corriente
        LIMIT 1
        ),
      0
      );
    
  SELECT
    IFNULL(SUM(C.cargo), 0),
    IFNULL(SUM(C.abono), 0)
  INTO
    total_debe_cartola_var,
    total_haber_cartola_var
  FROM cartolaBancos AS C
  WHERE
    C.id_banco = param_cuenta_corriente
    AND MONTH(C.fecha) = param_mes
    AND YEAR(C.fecha) = param_ano
  ;
  
  SET saldo_final_cartola_var = saldo_inicial_cartola_var - total_debe_cartola_var + total_haber_cartola_var;
  
  SELECT 
      saldo_inicial_cartola_var AS saldo_inicial, 
      total_debe_cartola_var AS total_debe,
      total_haber_cartola_var AS total_haber,
      saldo_final_cartola_var AS saldo_final,
      
      (
      SELECT
        COUNT(1)
      FROM cartolaBancos AS C
      WHERE
        C.id_banco = param_cuenta_corriente 
        AND MONTH(C.fecha) = MONTH(fecha_periodo_anterior_var)
        AND YEAR(C.fecha) = YEAR(fecha_periodo_anterior_var)
        AND C.id_comprobante_contable_conciliado = 0
        ) 
        AS cant_sin_conciliar_mes_anterior
      ;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCheque` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCheque`(
	IN `param_id` INT,
	IN `param_id_cuenta_bancaria` INT







)
BEGIN
  SELECT
    E.id,
    IFNULL(E.tipo_pago, "P") AS tipo_pago,
    E.rut,
    (SELECT P.dv FROM proveedores AS P WHERE P.rut = E.rut LIMIT 1) AS dv,
    (SELECT P.razon_social FROM proveedores AS P WHERE P.rut = E.rut LIMIT 1) AS nombre_entidad,      
    E.fecha_emision,
    E.fecha_vencimiento,
    E.fecha_cobro,
    E.monto_cheque,
    E.fecha_anulacion,
    E.glosa_anulacion,
    E.glosa_cabecera,
    E.id_cta_cte_banco,
    (SELECT CC.id_bancos FROM ctas_ctes_bancos AS CC WHERE CC.id_cta_cte_banco =  E.id_cta_cte_banco) AS id_bancos
  FROM cabecera_pago_proveedores AS E
  WHERE 
    E.id_cta_cte_banco = param_id_cuenta_bancaria
    AND E.num_cheque = param_id;
    
  SELECT
    true,
		D.num_documento_ref AS numero_documento,
    D.tipo_doc_ref AS tipo_documento,
    tipoDocumentoTextoAbreviado(D.tipo_doc_ref) AS tipo_documento_text,
    DATE_FORMAT(D.fecha_documento_ref, "%d-%m-%Y") AS fecha_documento,
    IF(D.fecha_vcto_documento = '0000-00-00' OR D.fecha_documento_ref IS NULL , DATE_FORMAT(D.fecha_documento_ref, "%d-%m-%Y"), DATE_FORMAT(D.fecha_vcto_documento, "%d-%m-%Y")) AS fecha_vencimiento,
    D.monto_documento AS monto_adeudado,
    D.monto_documento AS monto_adeudado_2,
    D.id
  FROM detalle_pago_proveedores AS D
  WHERE
    D.id_cuenta = param_id_cuenta_bancaria
    AND D.num_cheque = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getChequera` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getChequera`(
	IN `param_id` INT
)
BEGIN
  SELECT
    C.numero_inicial,
    C.numero_final,
    (SELECT CC.id_bancos FROM ctas_ctes_bancos AS CC WHERE CC.id_cta_cte_banco = C.id_cta_cte_banco LIMIT 1) AS id_bancos,
    C.id_cta_cte_banco
  FROM chequeras AS C
  WHERE C.id = param_id
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getChequesOpcionalmenteNoCobrados` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getChequesOpcionalmenteNoCobrados`(
	IN `param_id_cta_cte_banco` INT,
	IN `param_solo_cheques_no_cobrados` CHAR,
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE,
	IN `param_numero_cheque` INT
)
BEGIN
  
  DECLARE contexto VARCHAR(300) DEFAULT CONCAT('getChequesOpcionalmenteNoCobrados param_id_cta_cte_banco: ', param_id_cta_cte_banco, ' param_solo_cheques_no_cobrados: ', param_solo_cheques_no_cobrados, ' param_fecha_inicio: ', param_fecha_inicio, ' param_fecha_termino: ', param_fecha_termino, ' param_numero_cheque: ', param_numero_cheque);
  
  IF param_id_cta_cte_banco = '0' THEN
    CALL errorCR(contexto, 'El id cuenta bancaria es es cero', 'Y');
  END IF; 
  
  SELECT  
    C.tipo_pago, 
    C.num_cheque,
    C.rut, 
    (SELECT P.razon_social FROM proveedores AS P WHERE P.rut = C.rut LIMIT 1) AS razon_social, 
    C.fecha_emision, 
    C.fecha_vencimiento, 
    C.monto_cheque,
    C.fecha_cobro,
    C.id_cta_cte_banco
  FROM cabecera_pago_proveedores  AS C
  WHERE 
    IF(param_numero_cheque <> 0, 1=1, IF(param_solo_cheques_no_cobrados = '1', C.fecha_cobro IS NULL, 1=1))
    AND C.fecha_anulacion IS NULL
    AND C.fecha_emision IS NOT NULL
    AND C.id_cta_cte_banco = param_id_cta_cte_banco
    AND IF(param_numero_cheque <> 0, 1=1, C.fecha_vencimiento <= param_fecha_termino)
    AND IF(param_numero_cheque <> 0, C.num_cheque = param_numero_cheque, 1=1)
  ORDER BY C.fecha_vencimiento ASC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCiudad` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCiudad`(
	IN `param_id` INT



)
BEGIN

  SELECT 
			S.ciu_id AS id, 
			S.ciu_nombre, 
			S.pais_id AS id_pais

	FROM ciudades AS S
  WHERE S.ciu_id = param_id
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCiudad2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCiudad2`(
	IN `param_id` INT



)
BEGIN
  SELECT C.ciu_id AS id, C.ciu_nombre AS descripcion FROM ciudades AS C WHERE C.ciu_id = param_id LIMIT 1;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getcompras_sii_entrefechas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getcompras_sii_entrefechas`(
	IN `param_fecha_min` DATE,
	IN `param_fecha_max` DATE
)
BEGIN
  DECLARE cuenta_contable_existencia INT(11) DEFAULT (SELECT E.cta_contable_existencia FROM empresas AS E LIMIT 1);

  SELECT 
    CONCAT(C.rut, C.tipo_doc, C.numero_doc) AS id_doc,
    IF(
        (
          SELECT COUNT(1) 
          FROM contab_diario_detalle AS D
          WHERE
            C.tipo_doc = D.tipo_dte
            AND C.numero_doc = D.numero_dte
            AND C.rut = D.rut
            AND FUNCDiarioOrigen(D.id) = 'COMPRA' 
        ) > 0,
        "1",
        "0"
    ) AS contabilizado,
    IF(
        (
          SELECT 
            P.cta_contable 
          FROM proveedores AS P 
          WHERE 
            P.rut = C.rut 
          LIMIT 1
        ) = cuenta_contable_existencia,
        "0",
        "1"
      ) AS is_proveedor
  FROM r_compra_sii AS C
  WHERE
    C.fecha_doc BETWEEN param_fecha_min AND param_fecha_max
  ;
  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getComprobanteContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getComprobanteContable`(
	IN `param_numero` INT,
	IN `param_tipo` CHAR(1),
	IN `param_fecha` DATE
)
BEGIN
  DECLARE id_comprobante_contable_var INT(11) DEFAULT FUNCGetIDComprobante(param_tipo, param_numero, param_fecha);
  
  IF id_comprobante_contable_var IS NULL AND param_tipo = 'T' AND param_numero = 1 THEN
    SET id_comprobante_contable_var = FUNCIDSiguienteCabeceraContable();
    INSERT INTO contab_diario_cabecera 
    (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
    VALUES 
    (id_comprobante_contable_var, 'T', param_fecha, 1, CONCAT('APERTURA ', YEAR(param_fecha)), '1');
  END IF;
  
  SELECT
     -- E.id,
     E.tipo_comprobante,
     E.fecha_comprobante,
     E.numero_comprobante,
     E.glosa_comprobante,
     E.vigente
    FROM contab_diario_cabecera AS E
    WHERE 
      E.id = id_comprobante_contable_var
    LIMIT 1;
    
    SELECT
     D.id,
     D.cuenta_contable,
     D.`nombre cuenta`,
     D.glosa_detalle,
     D.debe,
     D.haber,
     D.tipo_documento,
     D.documento,
     D.unidad_negocio,
     (SELECT UN.descripcion FROM unidades_negocio AS UN WHERE UN.id = D.unidad_negocio LIMIT 1) AS nombre_unidad_negocio,
     IF(D.rut = 0, '', 
              CONCAT(D.rut, (
              SELECT 
                IF(P.rut IS NULL,'', CONCAT('-',P.dv))
              FROM proveedores AS P 
              WHERE 
                P.rut = D.rut 
              LIMIT 1))
                      
                      ) AS rut,
     IF(D.rut = 0, '', 
          (SELECT P.razon_social FROM proveedores AS P WHERE P.rut = D.rut  LIMIT 1)
      ) AS razon_social,
     D.tipo_dte,
     D.numero_dte,
     D.fecha_documento,
     D.fecha_vencimiento,
     D.tipo_comprobante,
     D.fecha_cobro
    FROM contab_diario_detalle AS D
    WHERE 
      D.id_diario_cabecera = id_comprobante_contable_var
    ORDER BY IF(D.debe > 0, 1, 0) DESC, D.cuenta_contable DESC
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getComprobanteContableContienenDocumento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getComprobanteContableContienenDocumento`(
	IN `param_tipo_documento` INT,
	IN `param_numero_documento` INT,
	IN `param_rut` VARCHAR(50)





)
BEGIN

  SELECT
    C.id,
    C.tipo_comprobante,
    C.fecha_comprobante,
    C.numero_comprobante,
    C.glosa_comprobante,
    C.vigente
  FROM contab_diario_cabecera AS C
  WHERE
    EXISTS (
      SELECT 1 FROM contab_diario_detalle AS D
      WHERE
        D.tipo_dte = param_tipo_documento
        AND D.numero_dte = param_numero_documento
        AND D.rut = param_rut
        AND D.id_diario_cabecera = C.id
        AND FUNCDiarioOrigen(D.id) = 'COMPRA'
      LIMIT 1
    )
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getComprobanteContableDesdeID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getComprobanteContableDesdeID`(
	IN `param_id_comprobante_contable` INT
)
BEGIN

  SELECT
    C.id,
    C.tipo_comprobante,
    C.fecha_comprobante,
    C.numero_comprobante,
    C.glosa_comprobante,
    C.vigente
  FROM contab_diario_cabecera AS C
  WHERE
    C.id = param_id_comprobante_contable
  LIMIT 1
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getComuna` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getComuna`(
	IN `param_id` INT





)
BEGIN
  SELECT 
			S.comu_id AS id_comuna, 
			S.comu_nombre, 
			S.reg_id,
      S.comu_orden,
      (SELECT 
			   C.ciu_id
      	FROM ciudcom AS C
        WHERE C.comu_id = S.comu_id
        ORDER BY C.id DESC
        LIMIT 1
        ) AS id_ciudad
	FROM comunas AS S
  WHERE S.comu_id = param_id
  LIMIT 1;
  
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getConcepto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getConcepto`(
	IN `param_id` INT

)
BEGIN
  SELECT
    C.nombre,
    C.sigla,
    C.cuenta_contable
  FROM conceptos AS C
  WHERE C.id = param_id
  LIMIT 1;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getConceptoCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getConceptoCaja`(
	IN `param_id` INT
)
BEGIN
  SELECT
    C.nombre,
    C.tipo,
    C.cuenta_contable
  FROM conceptos_ingresos_egresos_caja AS C
  WHERE C.id = param_id
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getConsumoFolio` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getConsumoFolio`(
	IN `param_fecha` DATE
)
BEGIN
  SELECT
    C.trackid_dte, 
    C.estado_dte, 
    C.estado_general_dte, 
    C.descripcion_estado_general_dte, 
    C.xml_consumo, 
    C.xml_consumo_nombre, 
    C.xml_consumo_size, 
    C.setEnvio, 
    C.estado,
    DATE_FORMAT(C.fecha_generacion, "%d-%m-%Y %H:%i:%s"),
    getEnvioFoliosFaltantes()
  FROM consumo_folios AS C
  WHERE C.fecha LIkE param_fecha LIMIT 1
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCotizacion` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCotizacion`(
	IN `param_id` INT







)
BEGIN
	SELECT 
		E.id ,
		DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento,
		E.rut,
		E.dv,
		E.`razon social` AS razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
		E.sucursal,
		E.listasprecios,
		E.vendedor,
		ROUND(E.descuento) AS descuento,
    ROUND(E.porcentaje_desc, 2) AS porcentaje_desc,
		E.id_nota_venta
	FROM encabezado_cotizaciones AS E
	WHERE 
		E.id = param_id;

	
	SELECT
		D.codigo_producto,
		D.descripcion,
		D.unidad_venta,
		ROUND(D.cantidad) AS cantidad,
    ROUND(D.precio_sin_iva) AS precio_sin_iva,
		ROUND(D.porcentaje_descuento) AS porcentaje_descuento,
		ROUND(D.monto_descuento) AS monto_descuento,
		ROUND((D.neto_linea*(1-(D.porcentaje_descuento/100)))) AS neto_linea,
		ROUND(D.precio_con_iva) AS precio_con_iva,
		ROUND(D.precio_sin_iva) AS precio_sin_iva,
		ROUND(D.pmp_linea/ cantidad) AS pmp
	FROM detalle_cotizaciones AS D
	WHERE 
		D.id_encabezado = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCotizacionParaNotaPedido` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCotizacionParaNotaPedido`(
	IN `param_id` INT
)
BEGIN
	SELECT 
		E.id ,
		DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento,
		E.rut,
		E.dv,
		E.`razon social` AS razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
		E.sucursal,
		E.listasprecios,
		E.vendedor,
		E.descuento,
		E.id_nota_venta
	FROM encabezado_cotizaciones AS E
	WHERE 
		E.id = param_id;

	
	SELECT
		D.codigo_producto,
		D.descripcion,
		D.unidad_venta,
		D.cantidad,
		D.precio_sin_iva,
		D.porcentaje_descuento,
		D.monto_descuento,
		ROUND((D.neto_linea*(1-(D.porcentaje_descuento/100)))) AS neto_linea,
		D.precio_con_iva,
		D.precio_sin_iva,
		D.pmp_linea
	FROM detalle_cotizaciones AS D
	WHERE 
		D.id_encabezado = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCreditoCliente` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCreditoCliente`(
	IN `param_rut_cliente` INT
)
BEGIN
	SELECT
		C.credito_maximo,
		C.credito_utilizado,
		C.credito_disponible,
    C.condicion_venta
	FROM proveedores AS C
	WHERE
	C.rut = param_rut_cliente;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCtaCte` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCtaCte`(
	IN `param_id` INT
)
BEGIN
  SELECT
    CC.id_cta_cte_banco,
    CC.id_bancos,
    CC.num_cta_cte,
    CC.saldo_ini_cta_cte,
    CC.fecha_saldo_actual,
    CC.id_moneda,
    CC.cta_contable,
    CC.saldo_contable
  FROM ctas_ctes_bancos AS CC WHERE CC.id_cta_cte_banco = param_id LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCuentaContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCuentaContable`(
	IN `param_cuenta_contable` INT



)
BEGIN
  SELECT
    C.id_cta_contable,
    C.cta_contable,
    C.padre_cta_contable,
    C.descripcion,
    C.habilitada,
    C.imputable,
    C.analisis
  FROM ctas_contables AS C
  WHERE
    C.cta_contable = param_cuenta_contable
  LIMIT 1
  ;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCuentasBancarias` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getCuentasBancarias`()
BEGIN
  SELECT
    C.id_cta_cte_banco,
    C.id_bancos,
    C.num_cta_cte,
    C.saldo_ini_cta_cte,
    C.fecha_saldo_actual,
    (SELECT B.nom_banco FROM bancos AS B WHERE B.id_bancos = C.id_bancos LIMIT 1) AS nom_banco
  FROM ctas_ctes_bancos AS C;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCuentasContablesParametros` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getCuentasContablesParametros`()
BEGIN
  SELECT
    E.cta_contable_proveedores,
    E.cta_contable_clientes,
    E.cta_contable_caja,
    E.cta_contable_iva_debito,
    E.cta_contable_iva_credito,
    E.cta_contable_costo_venta,
    E.cta_contable_resultado_venta,
    E.cta_contable_existencia,
    E.cta_contable_transbank_debito,
    E.cta_contable_transbank_credito,
    E.cta_contable_documentos_por_cobrar,
    E.cta_contable_remuneraciones,
    E.cta_contable_honorarios,
    E.cta_contable_gasto,
    E.cta_contable_arriendo,
    E.cta_contable_impuesto_adicional,
    E.cta_contable_boletas_venta,
    E.cta_contable_ajuste_caja,
    E.cta_contable_ajuste_inventario
  FROM empresas AS E
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getCuentasExistencia` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getCuentasExistencia`()
    COMMENT 'toma los movimientos de compra cuyo proveedor tenga movimiento de exiencia'
BEGIN
  
  
  
  

  DECLARE id_encaberado_contable INT(11) DEFAULT (SELECT IFNULL(MAX(E.id) + 1, 1) FROM contab_diario_cabecera AS E);
  
  
  
  SELECT
    "",
    C.neto,
    C.iva_porcentaje,
    C.total_documento
  FROM encabezado_movimientos_compra AS C
    INNER JOIN proveedores AS P
      ON P.rut = C.rut
  WHERE
    P.cta_contable = 1131010;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getDataTableSucursalesParaDestino` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getDataTableSucursalesParaDestino`()
BEGIN
  SELECT S.id, S.direccion, buscarComunaNombreByID(S.comuna) AS comuna, buscarCiudadNombreByID(S.cuidad) AS ciudad FROM sucursales AS S LIMIT 1000;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getDetalleMovimientoCajaAbiertaDesdeMac` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getDetalleMovimientoCajaAbiertaDesdeMac`(
	IN `param_mac` VARCHAR(50)
)
BEGIN
  
  DECLARE id_caja int(11) DEFAULT FUNCidCajaDesdeMAC(param_mac);
  DECLARE id_apertura_caja int(11);
  DECLARE correlativo int(11);
  DECLARE fecha_apertura datetime;
  DECLARE monto_apertura float(11,4);
  
  SELECT A.id_apertura, A.fecha_apertura, A.monto_apertura, A.correlativo INTO id_apertura_caja, fecha_apertura, monto_apertura, correlativo FROM apertura_caja AS A WHERE A.id_caja = id_caja AND A.fecha_cierre IS NULL;
  

  
  SELECT 
    DATE_FORMAT(fecha_apertura, "%d-%m-%Y") AS fecha_apertura,
    DATE_FORMAT(fecha_apertura, "%d-%m-%Y %H:%m:%s") AS fecha_apertura_new,
    id_caja,
    correlativo;
    
    SELECT
      D.descripcion_mov_caja,
      D.monto_mov_caja,
      D.num_documento,
      D.comentario,
      D.rut,
      D.fecha,
      D.tipo_detalle_mov_caja,
      D.id_concepto_caja                                         
    FROM 
      det_movimientos_caja AS D
    WHERE 
      D.id_apertura_caja = id_apertura_caja;
  
  
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getDiarioDesdeDocumento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getDiarioDesdeDocumento`(
	IN `param_cuenta_contable` INT,
	IN `param_rut` VARCHAR(50),
	IN `param_numero_documento` VARCHAR(50),
	IN `param_tipo_documento` VARCHAR(50)
)
BEGIN
  SELECT
    D.id,
    D.id_diario_cabecera,
    D.unidad_negocio,
    D.cuenta_contable,
    D.glosa_detalle,
    D.debe,
    D.haber,
    D.documento,
    D.rut,
    D.tipo_dte,
    D.numero_dte,
    D.fecha_documento,
    D.fecha_vencimiento,
    D.fecha_cobro,
    D.mes_cartola_banco,
    D.`año_cartola_banco`
  FROM contab_diario_detalle AS D
  WHERE 
    D.rut = param_rut
    AND D.numero_dte = param_numero_documento
    AND D.tipo_dte = param_tipo_documento
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getDiarioDesdeIDCartolaBanco` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getDiarioDesdeIDCartolaBanco`(
	IN `param_id_cartola_banco` INT
)
BEGIN
  DECLARE numero_cheque_var INT(11);
  DECLARE id_cabecera_diario_var INT(11);
  DECLARE id_detalle_diario_var INT(11);
  DECLARE cargo_var INT(11);
  DECLARE abono_var INT(11);
  DECLARE id_cuenta_corriente INT(11);
  DECLARE fecha_var DATE;
  
  DECLARE mes_var INT(11);
  DECLARE ano_var INT(11);
  DECLARE fecha_cobro_var DATE;
  
  DECLARE mes_diario_var INT(11);
  DECLARE ano_diario_var INT(11);
  
  DECLARE marca_diario_var INT(11);
  
  DECLARE salir BOOL DEFAULT FALSE;
  DECLARE actualizar BOOL DEFAULT TRUE;

  IF (SELECT 1 FROM cartolaBancos AS CB WHERE CB.id = param_id_cartola_banco LIMIT 1) = 0 THEN
    CALL error('No se encontro la linea de cartola banco a comparar');
  END IF;
  
  
  
  SELECT
    CB.numero_movimiento,
    IFNULL(CB.cargo, 0),
    IFNULL(CB.abono, 0),
    CB.id_banco,
    CB.fecha,
    MONTH(CB.fecha),
    YEAR(CB.fecha),
    CB.fecha
  INTO
    numero_cheque_var,
    cargo_var,
    abono_var,
    id_cuenta_corriente,
    fecha_var,
    mes_var,
    ano_var,
    fecha_cobro_var
  FROM cartolaBancos AS CB 
  WHERE
    CB.id = param_id_cartola_banco LIMIT 1;

  
  SET id_detalle_diario_var = (SELECT
                                  D.id
                                FROM contab_diario_detalle AS D 
                                WHERE
                                    D.documento = numero_cheque_var
                                  AND D.debe = abono_var
                                  AND D.haber =  cargo_var
                                  AND (
                                    D.tipo_comprobante = 'T'
                                    OR D.tipo_comprobante = 'E' 
                                    OR D.tipo_comprobante ='I'
                                  ) 
                                  AND D.cuenta_contable = (SELECT CCB.cta_contable FROM ctas_ctes_bancos AS CCB WHERE CCB.id_cta_cte_banco = id_cuenta_corriente LIMIT 1)
                                  AND fecha_var >= D.fecha_documento 
                                  AND NOT EXISTS (SELECT 1 FROM cartolaBancos AS B WHERE B.id_comprobante_contable_conciliado = D.id LIMIT 1)
                                LIMIT 1 );
                                                    
                                  
  IF id_detalle_diario_var IS NOT NULL THEN 
    CALL conciliarCartolaBancoDetalleDiario(param_id_cartola_banco, id_detalle_diario_var);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getDocumentosConvenios3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getDocumentosConvenios3`(
	IN `param_caja` INT,
	IN `param_correlativo` INT
)
BEGIN
  SELECT 
    E.tipo_documento,
    E.numero_documento,
    E.total_documento,
    E.caja_id,
    E.correlativo,
    P.id_caja,
    P.correlativo_caja,
    P.fecha,
    E.fecha_documento
  FROM encabezado_movimientos AS E
    LEFT JOIN pagos_movimientos AS P
      ON P.id_movimiento = E.id
  WHERE
    E.caja_id = param_caja
    AND E.correlativo = param_correlativo
    AND 
    (
      P.fecha IS NULL 
      OR E.fecha_documento <> DATE_FORMAT(P.fecha, "%Y-%m-%d")
    )
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getEmpresa` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getEmpresa`()
BEGIN

  SELECT 
			E.id, 
			E.rut, 
			E.dv, 
			E.razon_social, 
			E.codigo_actividad, 
			E.giro, 
			E.direccion, 
			E.comuna,
			E.ciudad,
      E.region, 
			E.rut_representante_legal, 
			E.dv_representante_legal, 
			E.nombre_representante_legal, 
			E.direccion_representante_legal, 
			E.comuna_representante_legal, 
			E.ciudad_representante_legal, 
			E.iva, 
			E.ila, 
			E.otro_impuesto, 
			E.margen_minimo, 
			E.ajuste_precio, 
			E.ajusta_margen, 
			E.margen_a_nivel,
			E.sucursal_sii,
      E.permite_stock_negativo,
      E.prefijo_codigo_barra_ean13,
      E.cta_contable_proveedores,
      E.cta_contable_clientes,
      E.cta_contable_caja,
      E.cta_contable_iva_debito,
      E.cta_contable_iva_credito,
      E.cta_contable_costo_venta,
      E.cta_contable_resultado_venta,
      E.cta_contable_existencia,
      E.cta_contable_transbank_debito,
      E.cta_contable_transbank_credito,
      E.cta_contable_documentos_por_cobrar,
      E.ano_contable_por_defecto,
      E.mes_contable_por_defecto
		FROM empresas AS E LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getEstadoMovimientoYNormalizacion` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getEstadoMovimientoYNormalizacion`(
	IN `param_numero_documento` INT,
	IN `param_tipo_documento` INT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
	    
	    
      DECLARE tipo_documento int(11) DEFAULT param_tipo_documento;
      DECLARE numero_documento int(11) DEFAULT param_numero_documento;
      DECLARE id int(11) DEFAULT 0;
      
      DECLARE truck_id char(15);
      
      DECLARE contexto_var VARCHAR(500) DEFAULT CONCAT('getEstadoMovimientoYNormalizacion param_numero_documento: ', param_numero_documento, 'param_tipo_documento: ', param_tipo_documento);
      
      DECLARE xml_dte LONGBLOB;
      DECLARE nombre_dte varchar(100);
      DECLARE size_dte INT(11);
      
      DECLARE xml_firma LONGBLOB;
      DECLARE nombre_firma varchar(100);
      DECLARE size_firma INT(11);
      
      
      
      
      DECLARE numero_folio int(11) DEFAULT NULL;
      DECLARE xml_caf LONGBLOB;
      DECLARE nombre_caf varchar(100);
      DECLARE size_caf INT(11);
      DECLARE id_folio int(11);
      
      IF tipo_documento = 52 THEN
      
      IF (SELECT
           COUNT(1)
        FROM 
          encabezado_movimientos_guias AS E
          INNER JOIN hef_cafs_folios AS F
            ON F.id = E.id_folio
              INNER JOIN hef_cafs AS C
                ON F.id_caf = C.id
        WHERE 
          E.tipo_documento = tipo_documento
          AND E.numero_documento = numero_documento
        LIMIT 1) = 0 THEN -- no encontro el movimiento
          CALL errorCR(contexto_var, CONCAT('No se encontro el movimiento especificado, compruebe cafs y folios asociado'), 'Y');
        END IF;
        
        SELECT
          E.id,
          IFNULL(E.trackid_dte, ''),
          
          E.xml_dte,
          IFNULL(E.xml_dte_nombre, ''),
          E.xml_dte_size,
          
          E.pdf417,
          IFNULL(E.pdf417_nombre, ''),
          E.pdf417_size,
          
          C.nombre,
          C.xml AS s,
  				C.size
        INTO
          id,
          truck_id,
          
          xml_dte,
          nombre_dte,
  		    size_dte,
       
          xml_firma,
          nombre_firma,
  		    size_firma,
          
          nombre_caf,
          xml_caf,
          size_caf
        FROM 
          encabezado_movimientos_guias AS E
          INNER JOIN hef_cafs_folios AS F
            ON F.id = E.id_folio
              INNER JOIN hef_cafs AS C
                ON F.id_caf = C.id
        WHERE 
          E.tipo_documento = tipo_documento
          AND E.numero_documento = numero_documento
        LIMIT 1
        ;
      ELSE
      
        IF (SELECT
           COUNT(1)
        FROM 
          encabezado_movimientos AS E
          INNER JOIN hef_cafs_folios AS F
            ON F.id = E.id_folio
              INNER JOIN hef_cafs AS C
                ON F.id_caf = C.id
        WHERE 
          E.tipo_documento = tipo_documento
          AND E.numero_documento = numero_documento
        LIMIT 1) = 0 THEN -- no encontro el movimiento
          CALL errorCR(contexto_var, CONCAT('No se encontro el movimiento especificado, compruebe cafs y folios asociado'), 'Y');
        END IF;
      
        SELECT
           E.id,
          IFNULL(E.trackid_dte, ''),
          
          E.xml_dte,
          IFNULL(E.xml_dte_nombre, ''),
          E.xml_dte_size,
          
          E.pdf417,
          IFNULL(E.pdf417_nombre, ''),
          E.pdf417_size,
          
          C.nombre,
          C.xml AS s,
  				C.size
        INTO
          id,
          truck_id,
          
          xml_dte,
          nombre_dte,
  		    size_dte,
       
          xml_firma,
          nombre_firma,
  		    size_firma,
          
          nombre_caf,
          xml_caf,
          size_caf
        FROM 
          encabezado_movimientos AS E
          INNER JOIN hef_cafs_folios AS F
            ON F.id = E.id_folio
              INNER JOIN hef_cafs AS C
                ON F.id_caf = C.id
        WHERE 
          E.tipo_documento = tipo_documento
          AND E.numero_documento = numero_documento
        LIMIT 1
        ;
      END IF;
	    
	   SELECT 
        id,
        truck_id,
        IF(xml_dte IS NULL, 1, 0) AS isXmlNull,
        
        xml_dte,
        nombre_dte,
		    size_dte,
     
        xml_firma,
        nombre_firma,
		    size_firma,
        
        xml_caf,
        nombre_caf,
        size_caf;
	
   END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetEstadoPeriodoContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `GetEstadoPeriodoContable`(
	IN `param_mes` INT,
	IN `param_ano` INT
)
BEGIN
  SELECT FUNCGetEstadoPeriodoContable(param_mes, param_ano) AS estado_periodo_contable;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetFoliosRestantes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `GetFoliosRestantes`()
BEGIN
  SELECT "33", COUNT(*) AS cantidad FROM hef_cafs_folios AS F WHERE F.estado = 0 AND F.tipo_DTE = 33
  UNION ALL 
  SELECT "39", COUNT(*) AS cantidad FROM hef_cafs_folios AS F WHERE F.estado = 0 AND F.tipo_DTE = 39
  UNION ALL 
  SELECT "56", COUNT(*) AS cantidad FROM hef_cafs_folios AS F WHERE F.estado = 0 AND F.tipo_DTE = 56
  UNION ALL 
  SELECT "61", COUNT(*) AS cantidad FROM hef_cafs_folios AS F WHERE F.estado = 0 AND F.tipo_DTE = 61
  UNION ALL 
  SELECT "52", COUNT(*) AS cantidad FROM hef_cafs_folios AS F WHERE F.estado = 0 AND F.tipo_DTE = 52;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getFormaPagoMovimiento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getFormaPagoMovimiento`(
	IN `param_numero_documento` INT,
	IN `param_tipo_documento` INT
)
BEGIN
  DECLARE id_encabezado_movimeinto int(11) DEFAULT FUNCidMovimientoVentaDesdeNumeroTipo(param_numero_documento, param_tipo_documento);
  
  IF id_encabezado_movimeinto IS NOT NULL THEN
  
    SELECT
      P.forma_pago,
      P.descripcion_forma_pago,
      P.monto_pagado,
      P.numero_operacion
    FROM pagos_movimientos AS P WHERE P.id_movimiento = id_encabezado_movimeinto;
  
  END IF;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getGuiaDespachoIngreso` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getGuiaDespachoIngreso`(
	IN `param_numero_guia` INT


)
BEGIN

	DECLARE param_id int(11) DEFAULT (
										SELECT E.id
										FROM encabezado_movimientos_guias AS E
										WHERE
										E.numero_documento = param_numero_guia
										);
	
	SELECT 
		E.id,
		E.tipo_documento,
		E.numero_documento,
    E.tipo_traspaso,
    E.fecha_documento,
		E.rut,
		E.dv,
		E.razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
    E.id_movimiento_referencia,
    DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha,
    DATE_FORMAT(NOW(), "%d-%m-%Y") AS fecha_recepcion,
    E.anulacion
	FROM encabezado_movimientos_guias AS E
	WHERE 
		E.id = param_id;
	
	SELECT
		D.codigo_producto,
		D.descripcion,
		D.unidad_venta,
		D.cantidad,
		D.pmp,
    0,
    0,
		ROUND(D.pmp * D.cantidad , 4),
		D.brutopv,
		D.netopv,
		D.pmp
	FROM detalle_movimientos_guias AS D
	WHERE 
		D.id_encabezado = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getGuiasPorRut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getGuiasPorRut`(
	IN `param_rut` VARCHAR(50)


)
BEGIN
  SELECT 
    false,
    E.numero_documento,
    E.fecha_documento,
    E.fecha_vencimiento,
    E.total_documento,
    E.id,
    (SELECT COUNT(*) FROM detalle_movimientos_guias AS D WHERE D.id_encabezado = E.id ) AS cantidad_detalle 
  FROM encabezado_movimientos_guias AS E 
  WHERE 
    E.tipo_traspaso = 1
    AND E.id_movimiento_referencia = 0 
    AND E.rut = param_rut
    AND E.anulacion = '0';
  
  SELECT
		D.codigo_producto,
		D.descripcion,
		FUNCNombreUnidadDesdeId(D.unidad_venta) AS descripcipn_unidad,
    
    ROUND(D.precio_bruto_unit) AS precio_bruto_unit,
		ROUND(D.cantidad) AS cantidad,
    ROUND(D.precio_bruto_linea) AS precio_bruto_linea,
    ROUND(D.porcentaje_desc) AS porcentaje_desc,
    ROUND(D.monto_desc_bruto_linea) AS monto_desc_bruto_linea,
    ROUND(D.total_bruto_c_desc) AS total_bruto_c_desc,
    
    D.precio_neto_unit,
    D.cantidad,
    D.precio_neto_linea,
    D.porcentaje_desc,
    D.monto_desc_neto_linea,
    D.total_neto_c_desc,
    

    ROUND(D.precio_neto_unit) AS precio_neto_unit_mostrar,
    ROUND(D.cantidad) AS cantidad_mostrar,
    ROUND(D.precio_neto_linea) AS precio_neto_linea_mostrar,
    ROUND(D.porcentaje_desc) AS porcentaje_desc_mostrar,
    ROUND(D.monto_desc_neto_linea) AS monto_desc_neto_linea_mostrar,
    ROUND(D.total_neto_c_desc) AS total_neto_c_desc_mostrar,
    
		D.pmp,
    D.unidad_venta,
    F.numero_documento
	FROM detalle_movimientos_guias AS D INNER JOIN encabezado_movimientos_guias AS F ON F.id = D.id_encabezado 
	WHERE 
		F.tipo_traspaso = 1 
    AND F.id_movimiento_referencia = 0
    AND F.rut = param_rut
  ORDER BY D.id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getIDNuevaCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getIDNuevaCaja`()
BEGIN
  SELECT IFNULL((MAX(C.id_caja) + 1), 0) AS numero_nueva_caja FROM cajas AS C LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getImpresoraSubDocumentoMac` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getImpresoraSubDocumentoMac`(
	IN `param_id_sub_documento` INT,
	IN `param_mac` VARCHAR(50)
)
BEGIN
  
  DECLARE nombre_impresora VARCHAR(50) DEFAULT (SELECT R.impresora FROM relacion_sub_documento_tributario_equipo AS R
                                                WHERE
                                                  R.mac = param_mac
                                                  AND R.sub_documento_tributario = param_id_sub_documento
                                                LIMIT 1 );
                                                
  IF nombre_impresora IS NULL THEN
    SET nombre_impresora = '';
  END IF;
  
  SELECT 'SUCCESS', nombre_impresora;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getImpresoraTipoDocumentoMac` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getImpresoraTipoDocumentoMac`(
	IN `param_tipo_documento` INT,
	IN `param_sub_tipo_documento` INT,
	IN `param_mac` VARCHAR(50)
)
BEGIN
  
  DECLARE nombre_impresora VARCHAR(50) DEFAULT (
                                                SELECT R.impresora 
                                                FROM relacion_sub_documento_tributario_equipo AS R
                                                  INNER JOIN sub_documentos_tributarios AS S
                                                    ON R.sub_documento_tributario = S.id
                                                WHERE
                                                  R.mac = param_mac
                                                  AND S.codigo_documento = param_tipo_documento
                                                  AND IF(param_sub_tipo_documento = 0, 1=1, S.sub_codigo_documento = param_sub_tipo_documento)
                                                LIMIT 1
                                              );
  
  IF nombre_impresora IS NULL THEN
    SET nombre_impresora = '';
  END IF;
    
    SELECT 'SUCCESS', nombre_impresora;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getIngresoGuiaDespacho` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getIngresoGuiaDespacho`(
	IN `param_id` INT
)
BEGIN
	
	SELECT 
		E.id,
		E.tipo_documento,
		E.numero_documento,
    E.fecha_documento,
		E.rut,
		E.dv,
		E.`razon social` AS razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
		E.descuento,
    E.bodega,
    DATE_FORMAT(E.fecha, "%d-%m-%Y") AS fecha,
    DATE_FORMAT(E.fecha_recepcion, "%d-%m-%Y") AS fecha_recepcion,
    DATE_FORMAT(E.fecha_vencimiento, "%d-%m-%Y") AS fecha_vencimiento,
    DATE_FORMAT(E.fecha_aceptacion_contenido, "%d-%m-%Y") AS fecha_aceptacion_contenido,
    DATE_FORMAT(E.fecha_acuse_recibo, "%d-%m-%Y") AS fecha_acuse_recibo
	FROM encabezado_movimientos_ingreso_guias AS E
	WHERE 
		E.id = param_id;
	
	SELECT
		D.codigo_producto,
		D.descripcion,
		D.unidad_venta,
		D.cantidad,
		D.precio_venta,
		D.porcentaje_descuento,
		D.monto_descuento,
		D.total_mostrar,
		D.precio_con_iva,
		D.precio_sin_iva,
		D.pmp
	FROM detalle_movimientos_ingreso_guias AS D
	WHERE 
		D.id_encabezado = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getLibroCuentaCorriente` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getLibroCuentaCorriente`(
	IN `param_fecha_inicio` DATE,
	IN `param_rut` VARCHAR(50)
)
BEGIN

   DECLARE saldo_var INT(11) DEFAULT 0;
   DECLARE saldo_total INT(11);
  
  IF param_rut = '' OR param_rut IS NULL THEN
    CALL errorCR(
      CONCAT('getLibroCuentaCorriente param_fecha_inicio: ', param_fecha_inicio, ' param_rut: ', param_rut),
      'El rut viene vacio', 'S');
  END IF; 
  
  /*
  SET saldo_var = (SELECT
                    IFNULL((SUM(F.debe) - SUM(F.haber)), 0)
                  FROM contab_diario_detalle AS F
                    INNER JOIN contab_diario_cabecera AS E
                      ON F.id_diario_cabecera = E.id
                  WHERE
                    E.vigente = '1'
                    AND E.fecha_comprobante < param_fecha_inicio
                    AND F.rut = param_rut
                    AND F.cuenta_contable = cta_contable
                    );  */
                    
    -- Tabla temporal para listado de cuentas a filtrar
  DROP TEMPORARY TABLE IF EXISTS ttemp_libro_cuenta_corriente;
  CREATE TEMPORARY TABLE ttemp_libro_cuenta_corriente 
  (
    fecha_comprobante DATE NOT NULL,
    fecha_comprobante_mostrar DATE,
    id_comprobante int(11) NOT NULL,
    id_diario int(11) NOT NULL,
    tipo_comprobante CHAR(1) NOT NULL,
    numero_comprobante INT(11) NOT NULL,
    documento INT(11) NOT NULL,
    tipo_dte VARCHAR(200) NOT NULL,
    numero_dte VARCHAR(200) NOT NULL,
    rut VARCHAR(100) NOT NULL,
    cuenta_contable INT(11) NOT NULL,
    glosa_comprobante VARCHAR(250) NOT NULL,
    debe INT(11) NOT NULL,
    haber INT(11) NOT NULL
  );
  
  INSERT INTO ttemp_libro_cuenta_corriente 
  (
    fecha_comprobante, 
    fecha_comprobante_mostrar, 
    id_comprobante,
    id_diario,
    tipo_comprobante,
    numero_comprobante,
    documento,
    tipo_dte,
    numero_dte,
    rut,
    cuenta_contable,
    glosa_comprobante,
    debe,
    haber
  )
  SELECT 
    C.fecha_comprobante,
    C.fecha_comprobante,
    C.id AS id_comprobante,
    FUNCInsertaRelacionCompraPagoPorID(D.id) AS id_diario_detalle,
    C.tipo_comprobante,
    C.numero_comprobante,
    D.documento,
    D.tipo_dte,
    D.numero_dte,
    D.rut,
    D.cuenta_contable,
    C.glosa_comprobante,
    D.debe,
    D.haber
  FROM contab_diario_detalle AS D
    INNER JOIN contab_diario_cabecera AS C
    ON D.id_diario_cabecera = C.id
    WHERE
    C.vigente = '1'
    AND C.fecha_comprobante >= param_fecha_inicio
    AND C.tipo_comprobante = 'T' -- tipo no creo que vaya
    AND D.rut = param_rut -- el rut espesificado
    AND FUNCGetsCuentaContableAnalisis(D.cuenta_contable) = '1'  -- seleciona un pequeño grupo de cuentas contables
    AND NOT EXISTS (SELECT 1 FROM relacion_comprobantes_compra_pagos_dte AS R WHERE D.id = R.id_contab_diario_detalle_2 LIMIT 1) -- para que no salgan las NC(repitan?)
   ORDER BY 
    fecha_comprobante;

  
  SELECT 
    T.debe,
    T.haber,
    saldo_var AS saldo,
    T.id_diario AS id_referencia,
    T.glosa_comprobante,
    T.fecha_comprobante_mostrar AS fecha_comprobante,
    T.tipo_comprobante,
    T.numero_comprobante,
    T.documento,
    T.tipo_dte,
    T.numero_dte,
    T.cuenta_contable,
    T.rut,
    (SELECT C.descripcion FROM ctas_contables AS C WHERE C.cta_contable = T.cuenta_contable LIMIT 1) AS nombre_cuenta
  FROM ttemp_libro_cuenta_corriente AS T
  ORDER BY 
  T.fecha_comprobante,
  T.id_diario,
  IF(T.tipo_comprobante = 'T', 0, 1),
  T.fecha_comprobante_mostrar
  ;
  
  -- 2 debe- ; haber +
  -- 1 debe+ ; haber -
  
  SET saldo_total = IFNULL((
      SELECT 
        SUM(IF(SUBSTRING(D.cuenta_contable, 1, 1) = '1', D.debe - D.haber, D.haber - D.debe))
      FROM contab_diario_detalle AS D
        INNER JOIN contab_diario_cabecera AS C
        ON D.id_diario_cabecera = C.id
        WHERE
        C.vigente = '1'
        AND D.rut = param_rut
        AND FUNCGetsCuentaContableAnalisis(D.cuenta_contable) = '1'
     ), 0);
  
  SELECT saldo_total;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getLibroDiario` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getLibroDiario`(
	IN `param_mes` INT,
	IN `param_ano` INT
)
BEGIN
  SELECT 
    C.fecha_comprobante,
    C.tipo_comprobante,
    C.numero_comprobante,
    C.id AS id_comprobante,
    IF(C.glosa_comprobante IS NULL OR C.glosa_comprobante = '', 'Sin Glosa', C.glosa_comprobante) AS glosa_comprobante,
    D.cuenta_contable,
    D.`nombre cuenta` AS nombre_cuenta,
    D.debe,
    D.haber
  FROM contab_diario_detalle AS D
    INNER JOIN contab_diario_cabecera AS C
      ON D.id_diario_cabecera = C.id
  WHERE
    C.vigente = '1'
    AND YEAR(C.fecha_comprobante) = param_ano
    AND MONTH(C.fecha_comprobante) = param_mes
  ORDER BY 
  C.fecha_comprobante ASC,
 C.id ASC, 
  IF(D.debe > 0, 1, 0) DESC, 
  D.cuenta_contable DESC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getLibroMayor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getLibroMayor`(
	IN `param_fecha_inicio` DATE,
	IN `param_cuenta_contable` VARCHAR(50)
)
BEGIN
  
  SELECT 
    C.fecha_comprobante,
    C.tipo_comprobante,
    C.numero_comprobante,
    C.id AS id_comprobante,
    D.cuenta_contable,
    D.`nombre cuenta` AS nombre_cuenta,
    D.debe,
    D.haber,
    D.glosa_detalle,
    (
      SELECT
        IFNULL(SUM(FUNCSumarDebeHaberDependiendoCuenta(F.debe, F.haber, F.cuenta_contable)), 0)
      FROM contab_diario_detalle AS F
        INNER JOIN contab_diario_cabecera AS E
          ON F.id_diario_cabecera = E.id
      WHERE
        E.vigente = '1'
        AND E.fecha_comprobante < param_fecha_inicio
        AND IF(param_cuenta_contable = '', F.cuenta_contable = D.cuenta_contable, F.cuenta_contable = param_cuenta_contable)
    ) AS saldo
  FROM contab_diario_detalle AS D
    INNER JOIN contab_diario_cabecera AS C
      ON D.id_diario_cabecera = C.id
  WHERE
    C.vigente = '1'
    AND C.fecha_comprobante >= param_fecha_inicio
    AND IF(param_cuenta_contable = '', 1=1, D.cuenta_contable = param_cuenta_contable)
  ORDER BY 
    C.id ASC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getLibroMayorEntreFechas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getLibroMayorEntreFechas`(
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE,
	IN `param_cuenta_contable` VARCHAR(50)
)
BEGIN

  DECLARE contexto_var VARCHAR(130) DEFAULT CONCAT('getLibroMayorEntreFechas param_fecha_inicio: ', param_fecha_inicio,
                                                  ' param_fecha_termino: ', param_fecha_termino, 
                                                  ' param_cuenta_contable: ', param_cuenta_contable);
                                                  
  DECLARE ano_busqueda_var INT(11) DEFAULT YEAR(param_fecha_inicio);
                                                  
  IF YEAR(param_fecha_inicio) <> YEAR(param_fecha_termino) THEN
    CALL errorCR(contexto_var, 'Debes elegir un rango de fechas del mismo año', 'Y');
  END IF;
  
  SELECT 
    C.fecha_comprobante,
    C.tipo_comprobante,
    C.numero_comprobante,
    C.id AS id_comprobante,
    D.cuenta_contable,
    D.`nombre cuenta` AS nombre_cuenta,
    D.debe,
    D.haber,
    D.glosa_detalle,
    (
      SELECT
        IFNULL(SUM(FUNCSumarDebeHaberDependiendoCuenta(F.debe, F.haber, F.cuenta_contable)), 0)
      FROM contab_diario_detalle AS F
        INNER JOIN contab_diario_cabecera AS E
          ON F.id_diario_cabecera = E.id
      WHERE
        E.vigente = '1'
        AND E.fecha_comprobante < param_fecha_inicio
        AND YEAR(E.fecha_comprobante) = ano_busqueda_var
        AND IF(param_cuenta_contable = '', F.cuenta_contable = D.cuenta_contable, F.cuenta_contable = param_cuenta_contable)
    ) AS saldo
  FROM contab_diario_detalle AS D
    INNER JOIN contab_diario_cabecera AS C
      ON D.id_diario_cabecera = C.id
  WHERE
    C.vigente = '1'
    AND C.fecha_comprobante BETWEEN param_fecha_inicio AND param_fecha_termino
    AND IF(param_cuenta_contable = '', 1=1, D.cuenta_contable = param_cuenta_contable)
  ORDER BY
    C.fecha_comprobante ASC,
    IF(C.tipo_comprobante = 'T', 0, 1) ASC,
    C.numero_comprobante ASC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getMarca` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getMarca`(
	IN `param_id` INT



)
BEGIN
  SELECT U.id_marcas AS id, U.desc_marcas AS descripcion FROM marcas AS U WHERE U.id_marcas = param_id LIMIT 1;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getMoneda` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getMoneda`(
	IN `param_id` INT


)
BEGIN
  SELECT M.id AS id, M.nombre AS descripcion FROM monedas AS M WHERE M.id = param_id LIMIT 1;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getMovimiento` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getMovimiento`(
	IN `param_folio` INT,
	IN `param_tipo_documento` INT













)
BEGIN

	DECLARE param_id int(11) DEFAULT (
										SELECT E.id
										FROM encabezado_movimientos AS E
										WHERE
										E.tipo_documento = param_tipo_documento
										AND E.numero_documento = param_folio
                    --  ahora si permite porque se valida despues AND E.is_factura_guias = 0
										);
	
	SELECT 
		E.id,
		E.tipo_documento,
		DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento,
		E.rut,
		E.dv,
		E.razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
		E.sucursal_id AS sucursal,
		E.listas_precio_id AS listasprecios, 
		E.vendedor,
		E.tipo_documento_referencia,
		E.numero_documento_referencia,
		E.causa_documento_referencia,
    ROUND(E.subtotal) AS subtotal,
    ROUND(E.porcentaje_desc, 2) AS porcentaje_desc,
    ROUND(E.descuento) AS descuento,
    ROUND(E.neto) AS neto,
    ROUND(E.`monto iva`) AS monto_iva,
    ROUND(E.total_documento) AS total_documento,
		DATE_FORMAT(E.fecha_documento_referencia, "%d-%m-%Y") AS fecha_documento_referencia,
    DATE_FORMAT(E.fecha_vencimiento, "%d-%m-%Y") AS fecha_vencimiento,
    FUNCCatidadPagosMovimiento(E.id) AS cantidad_pagos,
    E.is_convenio,
    E.is_factura_guias
	FROM encabezado_movimientos AS E
	WHERE 
		E.id = param_id;
	
	SELECT
		D.codigo_producto,
		D.descripcion,
		FUNCNombreUnidadDesdeId(D.unidad_venta) AS descripcipn_unidad,
    
    ROUND(D.precio_bruto_unit) AS precio_bruto_unit,
		ROUND(D.cantidad) AS cantidad,
    ROUND(D.precio_bruto_linea) AS precio_bruto_linea,
    ROUND(D.porcentaje_desc) AS porcentaje_desc,
    ROUND(D.monto_desc_bruto_linea) AS monto_desc_bruto_linea,
    ROUND(D.total_bruto_c_desc) AS total_bruto_c_desc,
    
    D.precio_neto_unit,
    D.cantidad,
    D.precio_neto_linea,
    D.porcentaje_desc,
    D.monto_desc_neto_linea,
    D.total_neto_c_desc,
    

    ROUND(D.precio_neto_unit) AS precio_neto_unit_mostrar,
    ROUND(D.cantidad) AS cantidad_mostrar,
    ROUND(D.precio_neto_linea) AS precio_neto_linea_mostrar,
    ROUND(D.porcentaje_desc) AS porcentaje_desc_mostrar,
    ROUND(D.monto_desc_neto_linea) AS monto_desc_neto_linea_mostrar,
    ROUND(D.total_neto_c_desc) AS total_neto_c_desc_mostrar,
    
		D.pmp,
    D.unidad_venta
	FROM detalle_movimientos AS D
	WHERE 
		D.id_encabezado = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getMovimientoCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getMovimientoCompra`(
	IN `param_folio` INT,
	IN `param_tipo_documento` INT,
	IN `param_rut_proveedor` INT









)
BEGIN

	DECLARE param_id int(11) DEFAULT (
										SELECT E.id
										FROM encabezado_movimientos_compra AS E
										WHERE
										E.tipo_documento = param_tipo_documento
										AND E.numero_documento = param_folio
                    AND E.rut = param_rut_proveedor
										);

  DECLARE rut_var CHAR(8) DEFAULT (SELECT E.rut FROM encabezado_movimientos_compra AS E WHERE E.id = param_id LIMIT 1);
	
	SELECT 
		E.id,
		E.tipo_documento,
		E.numero_documento,
    E.fecha_documento,
		E.rut,
		E.dv,
		E.`razon social` AS razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
		E.descuento,
    E.bodega,
    (SELECT B.nombre_bodega FROM bodegas AS B WHERE B.id = E.bodega) AS nombre_bodega,
    DATE_FORMAT(E.fecha, "%d-%m-%Y") AS fecha,
    DATE_FORMAT(E.fecha_recepcion, "%d-%m-%Y") AS fecha_recepcion,
    DATE_FORMAT(E.fecha_vencimiento, "%d-%m-%Y") AS fecha_vencimiento,
    DATE_FORMAT(E.fecha_aceptacion_contenido, "%d-%m-%Y") AS fecha_aceptacion_contenido,
    DATE_FORMAT(E.fecha_acuse_recibo, "%d-%m-%Y") AS fecha_acuse_recibo
	FROM encabezado_movimientos_compra AS E
	WHERE 
		E.id = param_id;
	
	SELECT
		D.codigo_producto,
    IFNULL((SELECT R.codigo_producto_proveedor FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = rut_var AND R.producto_id = D.producto_id LIMIT 1), '') AS codigo_proveedor,
    IFNULL((SELECT R.codigo_barra FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = rut_var AND R.producto_id = D.producto_id LIMIT 1), '') AS codigo_barra,
		D.descripcion,
		IFNULL((SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = D.unidad_venta LIMIT 1), '-') AS unidad_compra,
		D.cantidad,
		D.precio_venta,
		D.porcentaje_descuento,
		D.monto_descuento,
		D.total_mostrar,
		D.precio_con_iva,
		D.precio_sin_iva,
		D.pmp
	FROM detalle_movimientos_compra AS D
	WHERE 
		D.id_encabezado = param_id
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getMovimientoCompra2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getMovimientoCompra2`(
	IN `param_folio` INT,
	IN `param_tipo_documento` INT,
	IN `param_rut_proveedor` INT

















)
BEGIN

	DECLARE param_id int(11) DEFAULT (
										SELECT E.id
										FROM encabezado_movimientos_compra AS E
										WHERE
										E.tipo_documento = param_tipo_documento
										AND E.numero_documento = param_folio
                    AND E.rut = param_rut_proveedor
										);
    DECLARE rut_var CHAR(8) DEFAULT (SELECT E.rut FROM encabezado_movimientos_compra AS E WHERE E.id = param_id LIMIT 1);
    
    SELECT 
		E.id,
		E.tipo_documento,
		E.numero_documento,
    E.fecha_documento,
		E.rut,
		E.dv,
		E.`razon social` AS razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
		E.descuento,
    E.bodega,
    (SELECT B.nombre_bodega FROM bodegas AS B WHERE B.id = E.bodega) AS nombre_bodega,
    DATE_FORMAT(E.fecha, "%d-%m-%Y") AS fecha,
    DATE_FORMAT(E.fecha_recepcion, "%d-%m-%Y") AS fecha_recepcion,
    DATE_FORMAT(E.fecha_vencimiento, "%d-%m-%Y") AS fecha_vencimiento,
    DATE_FORMAT(E.fecha_aceptacion_contenido, "%d-%m-%Y") AS fecha_aceptacion_contenido,
    DATE_FORMAT(E.fecha_acuse_recibo, "%d-%m-%Y") AS fecha_acuse_recibo,
    
    E.tipo_documento_referencia,
    E.numero_documento_referencia,
    DATE_FORMAT(E.fecha_documento_referencia, "%d-%m-%Y") AS fecha_documento_referencia,
    E.causa_documento_referencia,
    E.objetada,
    E.glosa,
    E.numero_guia_devolucion_referencia
	FROM encabezado_movimientos_compra AS E
	WHERE 
		E.id = param_id;
    
  SELECT
		D.codigo_producto,
    IFNULL((SELECT R.codigo_producto_proveedor FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = rut_var AND R.producto_id = D.producto_id LIMIT 1), '') AS codigo_proveedor,
    IFNULL((SELECT R.codigo_barra FROM relacion_codigos_alternativos_productos AS R WHERE R.proveedor_rut = rut_var AND R.producto_id = D.producto_id LIMIT 1), '') AS codigo_barra,
		D.descripcion,
		IFNULL((SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = D.unidad_venta LIMIT 1), '-') AS unidad_compra,
		D.cantidad,
		D.precio_venta,
		D.porcentaje_descuento,
		D.monto_descuento,
		D.total_mostrar,
		D.precio_con_iva,
		D.precio_sin_iva,
		D.pmp,
    D.unidad_venta
	FROM detalle_movimientos_compra AS D
	WHERE 
		D.id_encabezado = param_id
    ;
  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getMovimientoFacturaGuias` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getMovimientoFacturaGuias`(
	IN `param_folio` INT

)
BEGIN

	DECLARE param_id int(11) DEFAULT (
										SELECT E.id
										FROM encabezado_movimientos AS E
										WHERE
										E.tipo_documento = 33
										AND E.numero_documento = param_folio
                    AND E.is_factura_guias = 1
										);
	
	SELECT 
		E.id,
		E.tipo_documento,
		DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento,
		E.rut,
		E.dv,
		E.razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
		E.sucursal_id AS sucursal,
		E.listas_precio_id AS listasprecios, 
		E.vendedor,
		E.tipo_documento_referencia,
		E.numero_documento_referencia,
		E.causa_documento_referencia,
    ROUND(E.subtotal) AS subtotal,
    ROUND(E.porcentaje_desc, 2) AS porcentaje_desc,
    ROUND(E.descuento) AS descuento,
    ROUND(E.neto) AS neto,
    ROUND(E.`monto iva`) AS monto_iva,
    ROUND(E.total_documento) AS total_documento,
		DATE_FORMAT(E.fecha_documento_referencia, "%d-%m-%Y") AS fecha_documento_referencia,
    DATE_FORMAT(E.fecha_vencimiento, "%d-%m-%Y") AS fecha_vencimiento,
    FUNCCatidadPagosMovimiento(E.id) AS cantidad_pagos,
    E.is_factura_guias
	FROM encabezado_movimientos AS E
	WHERE 
		E.id = param_id;
  
  SELECT
		D.codigo_producto,
		D.descripcion,
		FUNCNombreUnidadDesdeId(D.unidad_venta) AS descripcipn_unidad,
    
    ROUND(D.precio_bruto_unit) AS precio_bruto_unit,
		ROUND(D.cantidad) AS cantidad,
    ROUND(D.precio_bruto_linea) AS precio_bruto_linea,
    ROUND(D.porcentaje_desc) AS porcentaje_desc,
    ROUND(D.monto_desc_bruto_linea) AS monto_desc_bruto_linea,
    ROUND(D.total_bruto_c_desc) AS total_bruto_c_desc,
    
    D.precio_neto_unit,
    D.cantidad,
    D.precio_neto_linea,
    D.porcentaje_desc,
    D.monto_desc_neto_linea,
    D.total_neto_c_desc,
    

    ROUND(D.precio_neto_unit) AS precio_neto_unit_mostrar,
    ROUND(D.cantidad) AS cantidad_mostrar,
    ROUND(D.precio_neto_linea) AS precio_neto_linea_mostrar,
    ROUND(D.porcentaje_desc) AS porcentaje_desc_mostrar,
    ROUND(D.monto_desc_neto_linea) AS monto_desc_neto_linea_mostrar,
    ROUND(D.total_neto_c_desc) AS total_neto_c_desc_mostrar,
    
		D.pmp,
    D.unidad_venta,
    1
	FROM detalle_movimientos AS D
	WHERE 
		D.id_encabezado = param_id;
  
   SELECT 
    true,
    E.numero_documento,
    E.fecha_documento,
    E.fecha_vencimiento,
    E.total_documento,
    E.id,
    (SELECT COUNT(*) FROM detalle_movimientos_guias AS D WHERE D.id_encabezado = E.id ) AS cantidad_detalle 
  FROM encabezado_movimientos_guias AS E 
  WHERE 
    E.id_movimiento_referencia = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getMovimientoGuiaDespacho` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getMovimientoGuiaDespacho`(
	IN `param_folio` INT



)
BEGIN

	DECLARE param_id int(11) DEFAULT (
										SELECT E.id
										  FROM encabezado_movimientos_guias AS E
										WHERE
										  E.numero_documento = param_folio
										);
	
	SELECT 
		E.id,
		E.tipo_documento,
		DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento,
    E.tipo_traspaso,
		E.rut,
		E.dv,
		E.razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
		E.sucursal_id AS sucursal,
		E.listas_precio_id AS listasprecios, 
		E.vendedor,
		E.tipo_documento_referencia,
		E.numero_documento_referencia,
		E.causa_documento_referencia,
    ROUND(E.subtotal) AS subtotal,
    ROUND(E.porcentaje_desc, 2) AS porcentaje_desc,
    ROUND(E.descuento) AS descuento,
    ROUND(E.neto) AS neto,
    ROUND(E.`monto iva`) AS monto_iva,
    ROUND(E.total_documento) AS total_documento,
		DATE_FORMAT(E.fecha_documento_referencia, "%d-%m-%Y") AS fecha_documento_referencia,
    DATE_FORMAT(E.fecha_vencimiento, "%d-%m-%Y") AS fecha_vencimiento,
    FUNCCatidadPagosMovimiento(E.id) AS cantidad_pagos,
    E.anulacion,
    E.glosa_anulacion,
    E.fecha_anulacion
	FROM encabezado_movimientos_guias AS E
	WHERE 
		E.numero_documento = param_folio;
	
	SELECT
		D.codigo_producto,
		D.descripcion,
		FUNCNombreUnidadDesdeId(D.unidad_venta) AS descripcipn_unidad,
    
    ROUND(D.precio_bruto_unit) AS precio_bruto_unit,
		ROUND(D.cantidad) AS cantidad,
    ROUND(D.precio_bruto_linea) AS precio_bruto_linea,
    ROUND(D.porcentaje_desc) AS porcentaje_desc,
    ROUND(D.monto_desc_bruto_linea) AS monto_desc_bruto_linea,
    ROUND(D.total_bruto_c_desc) AS total_bruto_c_desc,
    
    D.precio_neto_unit,
    D.cantidad,
    D.precio_neto_linea,
    D.porcentaje_desc,
    D.monto_desc_neto_linea,
    D.total_neto_c_desc,
    

    ROUND(D.precio_neto_unit) AS precio_neto_unit_mostrar,
    ROUND(D.cantidad) AS cantidad_mostrar,
    ROUND(D.precio_neto_linea) AS precio_neto_linea_mostrar,
    ROUND(D.porcentaje_desc) AS porcentaje_desc_mostrar,
    ROUND(D.monto_desc_neto_linea) AS monto_desc_neto_linea_mostrar,
    ROUND(D.total_neto_c_desc) AS total_neto_c_desc_mostrar,
    
		D.pmp,
    D.unidad_venta
	FROM detalle_movimientos_guias AS D
	WHERE 
		D.id_encabezado = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getMovimientoReferencia` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getMovimientoReferencia`(
	IN `param_folio` INT,
	IN `param_tipo_documento` INT








)
BEGIN

	DECLARE param_id int(11) DEFAULT (
										SELECT E.id
										FROM encabezado_movimientos AS E
										WHERE
										E.tipo_documento = param_tipo_documento
										AND E.numero_documento = param_folio
                    AND E.is_factura_guias = 0
										);
	
	SELECT 
		E.id,
		E.tipo_documento,
		DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento,
		E.rut,
		E.dv,
		E.razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
    E.sucursal_id AS sucursal,
		E.listas_precio_id AS listasprecios, 
		E.vendedor,
		E.tipo_documento_referencia,
		E.numero_documento_referencia,
		E.causa_documento_referencia,
    ROUND(E.subtotal) AS subtotal,
    ROUND(E.porcentaje_desc, 2) AS porcentaje_desc,
    ROUND(E.descuento) AS descuento,
    ROUND(E.neto) AS neto,
    ROUND(E.`monto iva`) AS monto_iva,
    ROUND(E.total_documento) AS total_documento,
		DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento_referencia,
    IF(E.fecha_vencimiento < NOW(), DATE_FORMAT(NOW(), "%d-%m-%Y"), DATE_FORMAT(E.fecha_vencimiento, "%d-%m-%Y")) AS fecha_vencimiento,
    (ADDDATE(E.fecha_documento, INTERVAL 90 DAY) > NOW()) AS referencia_vigente,
    FUNCCatidadPagosMovimiento(E.id) AS cantidad_pagos,
    E.is_convenio
	FROM encabezado_movimientos AS E
	WHERE 
		E.id = param_id;
	
	SELECT
	  D.codigo_producto,
		D.descripcion,
		FUNCNombreUnidadDesdeId(D.unidad_venta) AS descripcipn_unidad,
    
    ROUND(D.precio_bruto_unit) AS precio_bruto_unit,
		ROUND(D.cantidad) AS cantidad,
    ROUND(D.precio_bruto_linea) AS precio_bruto_linea,
    ROUND(D.porcentaje_desc) AS porcentaje_desc,
    ROUND(D.monto_desc_bruto_linea) AS monto_desc_bruto_linea,
    ROUND(D.total_bruto_c_desc) AS total_bruto_c_desc,
    
    D.precio_neto_unit,
    D.cantidad,
    D.precio_neto_linea,
    D.porcentaje_desc,
    D.monto_desc_neto_linea,
    D.total_neto_c_desc,
    

    ROUND(D.precio_neto_unit) AS precio_neto_unit_mostrar,
    ROUND(D.cantidad) AS cantidad_mostrar,
    ROUND(D.precio_neto_linea) AS precio_neto_linea_mostrar,
    ROUND(D.porcentaje_desc) AS porcentaje_desc_mostrar,
    ROUND(D.monto_desc_neto_linea) AS monto_desc_neto_linea_mostrar,
    ROUND(D.total_neto_c_desc) AS total_neto_c_desc_mostrar,
    
		D.pmp,
    D.unidad_venta
	FROM detalle_movimientos AS D
	WHERE 
		D.id_encabezado = param_id
    AND D.usado_nota_credito_debito = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getNodoByID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getNodoByID`(
	IN `param_id` INT

)
BEGIN
  SELECT
    A.id,
    A.codigo,
    A.nombre,
    A.padre_id,
    A.descripcion,
    A.abreviacion,
    A.margen_categoria
  FROM 
    arbol_categoria_productos AS A
  WHERE A.id =  param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getNodoOSusHijosCunetasContables` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getNodoOSusHijosCunetasContables`(
	IN `param_numero_cuenta` INT


)
BEGIN
  
  
  DECLARE traer_hijos bool DEFAULT IF((SELECT COUNT(*) FROM ctas_contables AS CC WHERE CC.padre_cta_contable = param_numero_cuenta) > 0, true, false);
  
  IF traer_hijos THEN
  
  SELECT 
    CC.id_cta_contable,
    CC.cta_contable,
    CC.padre_cta_contable,
    CC.descripcion,
    CC.habilitada,
    CC.imputable,
    CC.centro_costo,
    CC.conciliacion_bancaria,
    CC.capital_propio,
    CC.flu,
    CC.ifrs,
    CC.analisis,
    CC.form1847,
    CC.form29
  FROM ctas_contables AS CC WHERE CC.padre_cta_contable = param_numero_cuenta;
  
  ELSE
  
  SELECT 
    CC.id_cta_contable,
    CC.cta_contable,
    CC.padre_cta_contable,
    CC.descripcion,
    CC.habilitada,
    CC.imputable,
    CC.centro_costo,
    CC.conciliacion_bancaria,
    CC.capital_propio,
    CC.flu,
    CC.ifrs,
    CC.analisis,
    CC.form1847,
    CC.form29
  FROM ctas_contables AS CC WHERE CC.cta_contable = param_numero_cuenta;END IF;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getNodosByFragPadre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getNodosByFragPadre`(
	IN `param_frag_codigo` VARCHAR(50)

)
BEGIN
  SELECT
    A.id,
    A.codigo,
    A.nombre,
    A.padre_id,
    A.descripcion,
    A.abreviacion
  FROM 
    arbol_categoria_productos AS A
  WHERE A.codigo LIKE CONCAT(param_frag_codigo, '%');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getNotaPedido` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getNotaPedido`(
	IN `param_id` INT,
	IN `param_rut` INT

















)
BEGIN
	SELECT 
		E.id,
		DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento,
		E.rut,
		E.dv,
		E.`razon social` AS razon_social,
		E.giro,
		E.direccion,
		E.comuna,
		E.ciudad,
		E.sucursal,
		E.listasprecios, 
		E.vendedor,
    ROUND(E.subtotal) AS subtotal,
    ROUND(E.porcentaje_desc, 2) AS porcentaje_desc,
    ROUND(E.descuento) AS descuento,
    ROUND(E.neto) AS neto,
    ROUND(E.`monto iva`) AS monto_iva,
    ROUND(E.total_documento) AS total_documento,
    E.id_movimeinto    
	FROM encabezado_nota_venta AS E
	WHERE 
		E.id = param_id;
    
    
	SELECT
		D.codigo_producto,
		D.descripcion,
		FUNCNombreUnidadDesdeId(D.unidad_venta) AS descripcipn_unidad,
    
    ROUND(D.precio_bruto_unit) AS precio_bruto_unit,
		ROUND(D.cantidad) AS cantidad,
    ROUND(D.precio_bruto_linea) AS precio_bruto_linea,
    ROUND(D.porcentaje_desc) AS porcentaje_desc,
    ROUND(D.monto_desc_bruto_linea) AS monto_desc_bruto_linea,
    ROUND(D.total_bruto_c_desc) AS total_bruto_c_desc,
    
    D.precio_neto_unit,
    D.cantidad,
    D.precio_neto_linea,
    D.porcentaje_desc,
    D.monto_desc_neto_linea,
    D.total_neto_c_desc,
    

    ROUND(D.precio_neto_unit) AS precio_neto_unit_mostrar,
    ROUND(D.cantidad) AS cantidad_mostrar,
    ROUND(D.precio_neto_linea) AS precio_neto_linea_mostrar,
    ROUND(D.porcentaje_desc) AS porcentaje_desc_mostrar,
    ROUND(D.monto_desc_neto_linea) AS monto_desc_neto_linea_mostrar,
    ROUND(D.total_neto_c_desc) AS total_neto_c_desc_mostrar,
    
		D.pmp,
    D.unidad_venta
	FROM detalle_nota_venta AS D
	WHERE 
		D.id_encabezado = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getOC` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getOC`(
	IN `param_id` INT







)
BEGIN
	SELECT 
    E.id,
    E.rut,
    E.dv,
    (SELECT P.razon_social FROM proveedores AS P WHERE P.rut = E.rut LIMIT 1) AS razon_social,
    (SELECT P.email FROM proveedores AS P WHERE P.rut = E.rut LIMIT 1) AS email,
    E.monto_desc,
    E.fecha,
    E.estado,
    E.glosa,
    E.fecha
	FROM encabezado_oc AS E
	WHERE 
		E.id = param_id
    LIMIT 1;

	SELECT
    D.codigo_proveedor,
    D.id_producto,
    D.descripcion_interno,
    (SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = D.id_unidad LIMIT 1) AS desc_unidad,
    D.precio,
    D.cantidad,
    D.porcentaje_descuento,
    D.monto_descuento,
    D.total_linea,
    IFNULL((SELECT R.descripcion_compra FROM relacion_codigos_alternativos_productos AS R
      INNER JOIN encabezado_oc AS EO
        ON EO.rut = R.proveedor_rut
      WHERE 
        R.producto_id =  D.id_producto
        AND EO.id = param_id LIMIT 1), D.descripcion_interno) AS descripcion_compra
	FROM detalle_oc AS D
	WHERE 
		D.id_encabezado = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getOC2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getOC2`(
	IN `param_id` INT















)
BEGIN
  DECLARE rut_var VARCHAR(12) DEFAULT (SELECT 
                                          E.rut
                                      	FROM encabezado_oc AS E
                                      	WHERE 
                                      		E.id = param_id
                                        LIMIT 1);
   
  
	SELECT 
    E.id,
    E.rut,
    E.dv,
    (SELECT P.razon_social FROM proveedores AS P WHERE P.rut = E.rut LIMIT 1) AS razon_social,
    (SELECT P.email FROM proveedores AS P WHERE P.rut = E.rut LIMIT 1) AS email,
    E.monto_desc,
    E.fecha,
    E.estado,
    E.glosa,
    E.fecha,
    E.rectificado
	FROM encabezado_oc AS E
	WHERE 
		E.id = param_id
    LIMIT 1;

	SELECT
    R.codigo_producto_proveedor AS codigo_proveedor,
    D.id_producto,
    D.descripcion_interno,
    (SELECT U.desc_unidades FROM unidades AS U WHERE U.id_unidades = D.id_unidad LIMIT 1) AS desc_unidad,
    D.precio,
    D.cantidad,
    D.porcentaje_descuento,
    D.monto_descuento,
    D.total_linea,
    IFNULL(R.descripcion_compra, D.descripcion_interno) AS descripcion_compra,
    R.codigo_barra
	FROM detalle_oc AS D
  LEFT JOIN relacion_codigos_alternativos_productos AS R
    ON R.producto_id = D.id_producto AND R.proveedor_rut = rut_var
	WHERE 
		D.id_encabezado = param_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getPagosConvenio` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getPagosConvenio`(
	IN `param_id` INT
)
BEGIN
  SELECT
    E.id,
    E.rut,
    E.glosa,
    E.fecha,
    DATE_FORMAT(E.fecha, "%d-%m-%Y %H:%m:%s") AS fecha_formateada,
    (SELECT C.razon_social FROM proveedores AS C WHERE C.rut = E.rut LIMIT 1) AS razon_social,
    (SELECT C.giro FROM proveedores AS C WHERE C.rut = E.rut LIMIT 1) AS giro,
    (SELECT C.dv FROM proveedores AS C WHERE C.rut = E.rut LIMIT 1) AS dv
  FROM
    encabezado_pagos AS E
  WHERE
    E.id = param_id
  LIMIT 1
  ;
  
  SELECT
    D.id_movimiento,
    D.tipo_documento,
    D.numero_documento,
    tipoDocumentoTextoAbreviado(D.tipo_documento) AS tipo_documento_text,
    ROUND(D.monto_pagado_ahora) AS monto_pagado_ahora,
    ROUND(D.monto_pagar) AS monto_pagar,
    ROUND(D.monto_pagado) AS monto_pagado,
    ROUND(D.monto_adeudado) AS monto_adeudado,
    DATE_FORMAT(D.fecha_documento, "%d-%m-%Y") AS fecha_documento,
    DATE_FORMAT(D.fecha_vencimiento, "%d-%m-%Y") AS fecha_vencimiento
  FROM
    detalle_pagos AS D
  WHERE 
    D.id_encabezado = param_id
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getPeriodosAnualesContables` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getPeriodosAnualesContables`(
	IN `param_ano` INT
)
BEGIN
  INSERT IGNORE INTO contab_control_mes_contable (`ano`) VALUES (param_ano);

  SELECT 
    C.ene,
    C.feb,
    C.mar,
    C.abr,
    C.may,
    C.jun,
    C.jul,
    C.ago,
    C.sep,
    C.oct,
    C.nov,
    C.dic
  FROM contab_control_mes_contable AS C WHERE C.ano = param_ano LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getProducto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getProducto`(
	IN `param_id` VARCHAR(100)

,
	IN `param_mac` VARCHAR(100)



)
BEGIN
  DECLARE id_producto VARCHAR(100) DEFAULT (SELECT id_producto FROM productos AS P WHERE P.id_producto = param_id LIMIT 1);
  DECLARE id_lista_precio int(11);
  DECLARE bodega int(11);
  DECLARE sucursal int(11);
  DECLARE margen_minimo int(11);
  DECLARE nivel_margen CHAR(1);
  DECLARE porcentaje_descuento int(11);
  DECLARE metodo_ajusta_precio CHAR(1);
  DECLARE id_categoria int(11);
  DECLARE costo_pmp float(11,4);
  DECLARE margen_categoria int(11);
  DECLARE precio_base_venta float(11,4);
  DECLARE precio_con_iva float(11,4);
  DECLARE margen int(11);
  DEClARE precio_ultima_compra float(11,4);
  DECLARE iva int(11);
  DECLARE prioridad_precio_venta_neto CHAR(1);
  DECLARE precio_venta_neto float(11,4);
  
  IF id_producto IS NULL THEN
    SET id_producto = idProductoDesdeCodigo(param_id);
  END IF;
  
  
  SET sucursal = idSucursalDesdeMac(param_mac);
  
  
  SET bodega = idBodegaDesdeSucursal(sucursal);
  
  
  SET id_lista_precio = (SELECT S.id_lista_precio FROM sucursales AS S WHERE S.id = sucursal LIMIT 1);
  
  
  SET porcentaje_descuento = (SELECT L.porcentaje_sobre_lista_principal FROM lista_precio AS L WHERE L.id_lista_precio = id_lista_precio);                             

  
  SELECT E.ajuste_precio, E.margen_minimo, E.margen_a_nivel, E.iva
  INTO metodo_ajusta_precio, margen_minimo, nivel_margen, iva
  FROM empresas AS E LIMIT 1;

  
  SELECT P.prioridad_precio_venta_neto, P.precio_venta_neto, idCategoriaNivelDesdeCodigoCategoria(P.codigo_categoria_producto, nivel_margen), P.costo_pmp, P.precio_ultima_compra
  INTO prioridad_precio_venta_neto, precio_venta_neto, id_categoria, costo_pmp, precio_ultima_compra
  FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
  
  
  SET margen_categoria = (SELECT A.margen_categoria FROM arbol_categoria_productos AS A WHERE A.id = id_categoria LIMIT 1);
  
  IF metodo_ajusta_precio = "0" THEN 
    SET precio_base_venta = precio_ultima_compra;
  ELSEIF metodo_ajusta_precio = "1" THEN 
    SET precio_base_venta = costo_pmp;
  ELSE 
    IF precio_ultima_compra > costo_pmp THEN
      SET precio_base_venta = precio_ultima_compra;
    ELSE 
      SET precio_base_venta = costo_pmp;
    END IF;
  END IF;
  
  SET margen = IF(margen_categoria-porcentaje_descuento < margen_minimo, margen_minimo, margen_categoria-porcentaje_descuento);
  
  IF prioridad_precio_venta_neto = '1' THEN
    SET precio_con_iva = precio_venta_neto*(1+(iva/100));
  ELSE
    SET precio_con_iva = precio_base_venta*(1+(margen/100))*(1+(iva/100));
  END IF;
  
  

  SELECT 
    P.id_producto,
    P.codigo_categoria_producto,
    (SELECT descripcion FROM arbol_categoria_productos WHERE codigo = P.codigo_categoria_producto LIMIT 1 ) AS descripcion_codigo,
    P.nombre_producto_venta,
    P.producto_descripcion_corta,
    P.marca_producto,
    P.unidad_compra,
    P.unidad_venta,
    P.cantidad_compra,
    P.cantidad_venta,
    P.stock_general,
    P.costo_pmp,
    P.stock_valorizado,
    P.precio_ultima_compra,
    P.precio_venta_neto,
    P.disponible_venta,
    P.disponible_compra,
    P.disponible_web,
    P.prioridad_precio_venta_neto,
    P.imagen_producto,
    P.imagen_size,
    precio_con_iva AS precio_venta_con_iva,
    margen
  FROM productos AS P
  WHERE 
    P.id_producto = id_producto
  LIMIT 1;
    
  SELECT
    R.proveedor_rut,
    FUNCNombreProveedorDesdeRUT(R.proveedor_rut) AS nombre_proveedor,
    R.codigo_producto_proveedor,
    R.descripcion_compra,
    R.codigo_barra
  FROM relacion_codigos_alternativos_productos AS R
  WHERE R.producto_id = id_producto;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getProducto2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getProducto2`(
	IN `param_id` VARCHAR(100)

,
	IN `param_mac` VARCHAR(100)







)
BEGIN
  DECLARE id_producto VARCHAR(100) DEFAULT (SELECT id_producto FROM productos AS P WHERE P.id_producto = param_id LIMIT 1);
  DECLARE id_lista_precio int(11);
  DECLARE bodega int(11);
  DECLARE sucursal int(11);
  DECLARE margen_minimo int(11);
  DECLARE nivel_margen CHAR(1);
  DECLARE porcentaje_descuento int(11);
  DECLARE metodo_ajusta_precio CHAR(1);
  DECLARE id_categoria int(11);
  DECLARE costo_pmp float(11,4);
  DECLARE margen_categoria int(11);
  DECLARE precio_base_venta float(11,4);
  DECLARE precio_con_iva float(11,4);
  DECLARE margen int(11);
  DEClARE precio_ultima_compra float(11,4);
  DECLARE iva int(11);
  DECLARE prioridad_precio_venta_neto CHAR(1);
  DECLARE precio_venta_neto float(11,4);
  
  IF id_producto IS NULL THEN
    SET id_producto = idProductoDesdeCodigo(param_id);
  END IF;
  
  
  SET sucursal = idSucursalDesdeMac(param_mac);
  
  
  SET bodega = idBodegaDesdeSucursal(sucursal);
  
  
  SET id_lista_precio = (SELECT S.id_lista_precio FROM sucursales AS S WHERE S.id = sucursal LIMIT 1);
  
  
  SET porcentaje_descuento = (SELECT L.porcentaje_sobre_lista_principal FROM lista_precio AS L WHERE L.id_lista_precio = id_lista_precio);                             

  
  SELECT E.ajuste_precio, E.margen_minimo, E.margen_a_nivel, E.iva
  INTO metodo_ajusta_precio, margen_minimo, nivel_margen, iva
  FROM empresas AS E LIMIT 1;

  
  SELECT P.prioridad_precio_venta_neto, P.precio_venta_neto, idCategoriaNivelDesdeCodigoCategoria(P.codigo_categoria_producto, nivel_margen), P.costo_pmp, P.precio_ultima_compra
  INTO prioridad_precio_venta_neto, precio_venta_neto, id_categoria, costo_pmp, precio_ultima_compra
  FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
  
  
  SET margen_categoria = (SELECT A.margen_categoria FROM arbol_categoria_productos AS A WHERE A.id = id_categoria LIMIT 1);
  
  IF metodo_ajusta_precio = "0" THEN 
    SET precio_base_venta = precio_ultima_compra;
  ELSEIF metodo_ajusta_precio = "1" THEN 
    SET precio_base_venta = costo_pmp;
  ELSE 
    IF precio_ultima_compra > costo_pmp THEN
      SET precio_base_venta = precio_ultima_compra;
    ELSE 
      SET precio_base_venta = costo_pmp;
    END IF;
  END IF;
  
  SET margen = IF(margen_categoria-porcentaje_descuento < margen_minimo, margen_minimo, margen_categoria-porcentaje_descuento);
  
  IF prioridad_precio_venta_neto = '1' THEN
    SET precio_con_iva = precio_venta_neto*(1+(iva/100));
  ELSE
    SET precio_con_iva = precio_base_venta*(1+(margen/100))*(1+(iva/100));
  END IF;
  
  

  SELECT 
    P.id_producto,
    P.codigo_categoria_producto,
    (SELECT descripcion FROM arbol_categoria_productos WHERE codigo = P.codigo_categoria_producto LIMIT 1 ) AS descripcion_codigo,
    P.nombre_producto_venta,
    P.producto_descripcion_corta,
    P.marca_producto,
    P.unidad_compra,
    P.unidad_venta,
    P.cantidad_compra,
    P.cantidad_venta,
    P.stock_general,
    P.costo_pmp,
    P.stock_valorizado,
    P.precio_ultima_compra,
    P.precio_venta_neto,
    P.disponible_venta,
    P.disponible_compra,
    P.disponible_web,
    P.prioridad_precio_venta_neto,
    P.imagen_producto,
    P.imagen_size,
    precio_con_iva AS precio_venta_con_iva,
    margen
  FROM productos AS P
  WHERE 
    P.id_producto = id_producto
  LIMIT 1;
    
  SELECT
    R.proveedor_rut,
    FUNCNombreProveedorDesdeRUT(R.proveedor_rut) AS nombre_proveedor,
    R.codigo_producto_proveedor,
    R.descripcion_compra,
    R.cantidad_compra,
    R.cantidad_venta,
    R.codigo_barra
  FROM relacion_codigos_alternativos_productos AS R
  WHERE R.producto_id = id_producto;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getProductosDartosSolicitudMercaderia` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getProductosDartosSolicitudMercaderia`(
	IN `param_mac` VARCHAR(100),
	IN `param_menor_que` FLOAT(20,4),
	IN `param_mayor_que` FLOAT(20,4)

)
BEGIN
  DECLARE sucursal_var int(11) DEFAULT idSucursalDesdeMac(param_mac);
  DECLARE sucursal_propia_menor_que float(20,4) DEFAULT param_menor_que;
  DECLARE demas_sucursales_mayor_que float(20,4) DEFAULT param_mayor_que;
  
  DECLARE direccion_sucursal varchar(250) DEFAULT (SELECT S.direccion FROM sucursales AS S WHERE S.id = sucursal_var LIMIT 1);
  
  SELECT direccion_sucursal;
  
  SELECT
    P.id_producto,
    P.nombre_producto_venta,    
    S.stock AS stock,
    P.stock_general AS demas_sucursales,    
    P.stock_general
   FROM
    productos AS P
    INNER JOIN stock_bodegas AS S
      ON S.id_producto = P.id_producto
    INNER JOIN bodegas AS B
      ON B.id = S.id_bodega
   WHERE
    B.id_sucursal = sucursal_var
    AND P.stock_general <> 0
    
   GROUP BY P.id_producto
   HAVING 
   IF(sucursal_propia_menor_que <> 0, stock <= sucursal_propia_menor_que,1 = 1)
   AND IF(demas_sucursales_mayor_que <> 0,demas_sucursales >= demas_sucursales_mayor_que, 1=1)
   ORDER BY 
    stock ASC, 
    demas_sucursales DESC
   ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getProductoSinCategoria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getProductoSinCategoria`()
BEGIN
  SELECT P.id_producto FROM productos AS P WHERE P.codigo_categoria_producto = "" LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getRegion` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getRegion`(
	IN `param_id` INT



)
BEGIN
  SELECT R.reg_id AS id, R.reg_nombre AS descripcion FROM regiones AS R WHERE R.reg_id = param_id LIMIT 1;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getResumenBoletas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getResumenBoletas`()
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
		BEGIN
			DECLARE folio_minimo INT(10) DEFAULT NULL;
			DECLARE contador INT(10) DEFAULT 1;
			DECLARE existe_folio BOOL DEFAULT FALSE;
			
			DECLARE cantidad int(11) DEFAULT 0;
			DECLARE folio_min int(11) DEFAULT 0;
			DECLARE folio_max int(11) DEFAULT 0;
			DECLARE monto_neto int(11) DEFAULT 0;
			DECLARE monto_iva int(11) DEFAULT 0;
			DECLARE monto_total int(11) DEFAULT 0;
		
			
			SELECT
			39 AS Tipo, 
			COUNT(E.id) AS Cantidad, 
			MIN(E.id_folio) AS FoliosMin, 
			MAX(E.id_folio) AS FolioMax,
			SUM(E.neto) AS TotalNeto,
			SUM(E.`monto iva`) AS TotalIva,
			SUM(E.total_documento) AS Total,
			DATE_FORMAT(MIN(E.fecha_documento), "%Y-%m-%d") AS FchInicio,
			DATE_FORMAT(MAX(E.fecha_documento), "%Y-%m-%d") AS FchFinal
				FROM encabezado_movimientos AS E 
					INNER JOIN hef_cafs_folios AS F 
						ON E.id_folio = F.id 
					WHERE E.tipo_documento = 39 
					AND F.fecha_consumo < NOW()
					AND E.informado_resumen = 0;
					
			
			
			UPDATE 
					encabezado_movimientos E 
				SET E.informado_resumen = 1 
				WHERE E.tipo_documento = 39 
					AND E.informado_resumen = 0; 
			
			
			
			SET folio_minimo = (
										SELECT
										MIN(E.numero_documento)
											FROM encabezado_movimientos AS E 
												WHERE E.tipo_documento = 61
												AND E.tipo_documento_referencia = 39
												AND E.informado_resumen = 0
									);
									
			WHILE folio_minimo != 0 DO
			
				SET contador = folio_minimo;
			
				WHILE contador != 0 DO
					SET existe_folio = (
									SELECT                     
									 COUNT(E.id) != 0
										FROM encabezado_movimientos E 
										WHERE E.numero_documento = contador
										LIMIT 1);
			
						IF existe_folio != 0 THEN
							SET cantidad = cantidad + 1;
							SET folio_max = contador;
							SET monto_neto = monto_neto + (SELECT E.neto FROM encabezado_movimientos E WHERE E.numero_documento = contador AND E.tipo_documento = 61);
							SET monto_iva = monto_iva + (SELECT E.`monto iva` FROM encabezado_movimientos E WHERE E.numero_documento = contador AND E.tipo_documento = 61);
							SET monto_total = monto_total + (SELECT E.total_documento FROM encabezado_movimientos E WHERE E.numero_documento = contador AND E.tipo_documento = 61);
							
							UPDATE encabezado_movimientos E
							SET E.informado_resumen = 1
							WHERE E.numero_documento = contador; 
							SET contador = contador + 1;
						ELSE
							SET contador = 0;
						END IF;
						
					
				END WHILE;
				
				
				
				SELECT 61 AS Tipo, 
						cantidad AS Cantidad, 
						folio_minimo AS FoliosMin, 
						folio_max AS FolioMax,
						monto_neto AS TotalNeto,
						monto_iva AS TotalIva,
						monto_total AS Total;
						
						SET cantidad = 0;
						SET folio_max = 0;
						SET monto_neto = 0;
						SET monto_iva = 0;
						SET monto_total = 0;
						
												
			   
			
				SET folio_minimo = (SELECT
											IFNULL(MIN(E.numero_documento), 0)
												FROM encabezado_movimientos AS E
													WHERE E.tipo_documento = 61
													AND E.tipo_documento_referencia = 39
													AND E.informado_resumen = 0
										);
			
			END WHILE;
	
		END;

   ROLLBACK;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getResumenBoletas3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getResumenBoletas3`()
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
		BEGIN
			  DECLARE fecha DATE DEFAULT '2019-07-21'; 
        DECLARE set_envio int(11);
        DECLARE id_consumo_folio int(11);
  
        IF fecha IS NOT NULL THEN
          SET id_consumo_folio = (SELECT C.id FROM consumo_folios AS C WHERE C.fecha = fecha);
          
          IF id_consumo_folio IS NULL THEN
            INSERT INTO consumo_folios (fecha) VALUES (fecha);
            SET set_envio = 0;
          ELSE
            SET set_envio = (SELECT C2.setEnvio FROM consumo_folios AS C2 WHERE C2.id = id_consumo_folio AND C2.estado = 0);
            
            IF set_envio IS NULL THEN
              CALL error("El consumo de folio esta en transito");
            ELSE
              UPDATE consumo_folios SET `estado`='1' WHERE id = id_consumo_folio;
            END IF;
          END IF;
          
          IF (SELECT COUNT(F2.id)
          FROM folios_pitagoras AS F2
          WHERE F2.fecha = fecha
          ORDER BY F2.fecha ASC, F2.tipo_documento ASC, F2.numero_inicial ASC) > 0 THEN
          
          SELECT
            F.id,
            DATE_FORMAT(F.fecha, "%Y-%m-%d") AS fecha,
            F.tipo_documento,
            F.monto_neto,
            ROUND((F.monto_neto * (SELECT (E.iva)/100 FROM empresas AS E LIMIT 1))) AS monto_iva,
            (F.monto_neto + ROUND((F.monto_neto * (SELECT (E.iva)/100 FROM empresas AS E LIMIT 1)))) AS monto_total,
            F.numero_inicial,
            F.numero_final,
            F.folios_emitidos,
            F.folios_anulados,
            F.folios_usados,
            (set_envio + 1) AS set_envio
          FROM folios_pitagoras AS F
          WHERE F.fecha = fecha
          ORDER BY F.fecha ASC, F.tipo_documento ASC, F.numero_inicial ASC
          ;
          
          ELSE
          
            SELECT
            0 AS id,
            DATE_FORMAT(fecha, "%Y-%m-%d") AS fecha,
            39 AS tipo_documento,
            0 AS monto_neto,
            0 AS monto_iva,
            0 AS monto_total,
            0 AS numero_inicial,
            0 AS numero_final,
            0 AS folios_emitidos,
            0 AS folios_anulados,
            0 AS folios_usados,
            (set_envio + 1) AS set_envio
            ;
            
            SELECT
            0 AS id,
            DATE_FORMAT(fecha, "%Y-%m-%d") AS fecha,
            41 AS tipo_documento,
            0 AS monto_neto,
            0 AS monto_iva,
            0 AS monto_total,
            0 AS numero_inicial,
            0 AS numero_final,
            0 AS folios_emitidos,
            0 AS folios_anulados,
            0 AS folios_usados,
            (set_envio + 1) AS set_envio
            ;
            
            SELECT
            0 AS id,
            DATE_FORMAT(fecha, "%Y-%m-%d") AS fecha,
            61 AS tipo_documento,
            0 AS monto_neto,
            0 AS monto_iva,
            0 AS monto_total,
            0 AS numero_inicial,
            0 AS numero_final,
            0 AS folios_emitidos,
            0 AS folios_anulados,
            0 AS folios_usados,
            (set_envio + 1) AS set_envio
            ;
          
          END IF;
        END IF;
	
		END;

   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getResumenBoletas4` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getResumenBoletas4`(
	IN `param_fecha` DATE

)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
		BEGIN

        DECLARE set_envio int(11);
        DECLARE id_consumo_folio int(11);
        
        SET id_consumo_folio = (SELECT C.id FROM consumo_folios AS C WHERE C.fecha = param_fecha);
        
        IF id_consumo_folio IS NULL THEN
          INSERT INTO consumo_folios (fecha, estado) VALUES (param_fecha, '0');
          SET set_envio = 0;
        ELSE
          SET set_envio = (SELECT C2.setEnvio FROM consumo_folios AS C2 WHERE C2.id = id_consumo_folio);
        END IF;
          
        CALL `generarDetalleConsumoFolioPorDia`(param_fecha);
        
			  SELECT
            F.id,
            DATE_FORMAT(F.fecha, "%Y-%m-%d") AS fecha,
            F.tipo_documento,
            F.monto_neto,
            ROUND((F.monto_neto * (SELECT (E.iva)/100 FROM empresas AS E LIMIT 1))) AS monto_iva,
            (F.monto_neto + ROUND((F.monto_neto * (SELECT (E.iva)/100 FROM empresas AS E LIMIT 1)))) AS monto_total,
            F.numero_inicial,
            F.numero_final,
            F.folios_emitidos,
            F.folios_anulados,
            F.folios_usados,
            (set_envio + 1) AS set_envio
          FROM folios_pitagoras AS F
          WHERE F.fecha = param_fecha
          ORDER BY F.fecha ASC, F.tipo_documento ASC, F.numero_inicial ASC
          ;
	
		END;

   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GETResumenCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `GETResumenCaja`(
	IN `param_mac` VARCHAR(100)


)
BEGIN
  
  DECLARE id_caja int(11) DEFAULT FUNCidCajaDesdeMAC(param_mac);
  DECLARE id_apertura_caja int(11);
  DECLARE correlativo int(11);
  DECLARE fecha_apertura datetime;
  DECLARE monto_apertura float(11,4);
  
  DECLARE monto_efectivo float(18,4);
  DECLARE monto_TC float(18,4);
  DECLARE monto_TD float(18,4);
  DECLARE monto_cheque float(18,4);
  DECLARE monto_transferncia float(18,4);
  
  DECLARE count_monto_efectivo int(11);
  DECLARE count_monto_TC int(11);
  DECLARE count_monto_TD int(11);
  DECLARE count_monto_cheque int(11);
  DECLARE count_monto_transferncia int(11);      
  
  
  SELECT A.id_apertura, A.fecha_apertura, A.monto_apertura, A.correlativo INTO id_apertura_caja, fecha_apertura, monto_apertura, correlativo FROM apertura_caja AS A WHERE A.id_caja = id_caja AND A.fecha_cierre IS NULL;
  
  
  
  
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_efectivo,
    count_monto_efectivo
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 0
    AND P.fecha >= fecha_apertura
    AND E.caja_id = id_caja;
                   
    
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_TC,
    count_monto_TC
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 1
    AND P.fecha >= fecha_apertura
    AND E.caja_id = id_caja;
                            
  
  
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_TD,
    count_monto_TD
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 2
    AND P.fecha >= fecha_apertura
    AND E.caja_id = id_caja;
  
   
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_cheque,
    count_monto_cheque
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 3
    AND P.fecha >= fecha_apertura
    AND E.caja_id = id_caja;
                            
    
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_transferncia,
    count_monto_transferncia
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 4
    AND P.fecha >= fecha_apertura
    AND E.caja_id = id_caja;
  
  SELECT 
    DATE_FORMAT(fecha_apertura, "%d-%m-%Y") AS fecha_apertura,
    DATE_FORMAT(fecha_apertura, "%d-%m-%Y %H:%m:%s") AS fecha_apertura_new,
    id_caja,
    correlativo,
    monto_efectivo, 
    monto_TC, 
    monto_TD, 
    monto_cheque, 
    monto_transferncia, 
    monto_apertura, 
    count_monto_efectivo, 
    count_monto_TC, 
    count_monto_TD, 
    count_monto_cheque, 
    count_monto_transferncia;
    
    SELECT
      D.id_tipo_detalle_mov_caja,
      D.descripcion_mov_caja,
      D.monto_mov_caja,
      D.num_documento,
      D.comentario,
      D.rut,
      D.fecha
    FROM 
      det_movimientos_caja AS D
    WHERE 
      D.id_apertura_caja = id_apertura_caja;
  
  
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GETResumenCaja3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `GETResumenCaja3`(
	IN `param_mac` VARCHAR(100)
)
BEGIN
  
  DECLARE id_caja int(11) DEFAULT FUNCidCajaDesdeMAC(param_mac);
  DECLARE id_apertura_caja int(11);
  DECLARE correlativo int(11);
  DECLARE fecha_apertura datetime;
  DECLARE monto_apertura float(11,4);
  
  DECLARE monto_efectivo float(18,4);
  DECLARE monto_TC float(18,4);
  DECLARE monto_TD float(18,4);
  DECLARE monto_cheque float(18,4);
  DECLARE monto_transferncia float(18,4);
  DECLARE monto_convenio float(18,4);
  
  DECLARE count_monto_efectivo int(11);
  DECLARE count_monto_TC int(11);
  DECLARE count_monto_TD int(11);
  DECLARE count_monto_cheque int(11);
  DECLARE count_monto_transferncia int(11);   
  DECLARE count_monto_convenio int(11);   
  
  
  SELECT A.id_apertura, A.fecha_apertura, A.monto_apertura, A.correlativo INTO id_apertura_caja, fecha_apertura, monto_apertura, correlativo FROM apertura_caja AS A WHERE A.id_caja = id_caja AND A.fecha_cierre IS NULL;
  
  
  
  
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_efectivo,
    count_monto_efectivo
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 0
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
                   
    
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_TC,
    count_monto_TC
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 1
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
                            
  
  
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_TD,
    count_monto_TD
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 2
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
  
   
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_cheque,
    count_monto_cheque
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 3
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
                            
    
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_transferncia,
    count_monto_transferncia
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 4
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
    
    
    
  SELECT 
     IFNULL(ROUND(SUM(IF(E.tipo_documento <> 61, E.total_documento, E.total_documento*-1))), 0),
     COUNT(*)
  INTO
    monto_convenio,
    count_monto_convenio
  FROM encabezado_movimientos AS E
    LEFT JOIN pagos_movimientos AS P
      ON P.id_movimiento = E.id
  WHERE
    E.caja_id = id_caja
    AND E.correlativo = correlativo
    AND E.is_convenio = '1';
  
  SELECT 
    DATE_FORMAT(fecha_apertura, "%d-%m-%Y") AS fecha_apertura,
    DATE_FORMAT(fecha_apertura, "%d-%m-%Y %H:%m:%s") AS fecha_apertura_new,
    id_caja,
    correlativo,
    monto_efectivo, 
    monto_TC, 
    monto_TD, 
    monto_cheque, 
    monto_transferncia, 
    monto_apertura,
    monto_convenio,
    count_monto_efectivo, 
    count_monto_TC, 
    count_monto_TD, 
    count_monto_cheque, 
    count_monto_transferncia,
    count_monto_convenio,
    (
    SELECT 
      IFNULL(ROUND(SUM(IF(E2.tipo_documento <> 61, E2.total_documento, E2.total_documento*-1))), 0) 
    FROM encabezado_movimientos AS E2
    WHERE 
      E2.correlativo = correlativo 
      AND E2.caja_id = id_caja
    ) AS monto_venta;
    
    SELECT
      D.descripcion_mov_caja,
      D.monto_mov_caja,
      D.num_documento,
      D.comentario,
      D.rut,
      D.fecha,
      D.tipo_detalle_mov_caja,
      D.id_concepto_caja     
    FROM 
      det_movimientos_caja AS D
    WHERE 
      D.id_apertura_caja = id_apertura_caja;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GETResumenCaja3CajaCorrelativo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `GETResumenCaja3CajaCorrelativo`(
	IN `param_caja` INT(11),
	IN `param_correlativo` INT(11)

)
BEGIN
  
  DECLARE id_caja int(11) DEFAULT param_caja;
  DECLARE id_apertura_caja int(11);
  DECLARE correlativo int(11) DEFAULT param_correlativo;
  DECLARE fecha_apertura datetime;
  DECLARE monto_apertura float(11,4);
  DECLARE monto_efectivo float(18,4);
  DECLARE monto_TC float(18,4);
  DECLARE monto_TD float(18,4);
  DECLARE monto_cheque float(18,4);
  DECLARE monto_transferncia float(18,4);
  DECLARE monto_convenio float(18,4);
  DECLARE count_monto_efectivo int(11);
  DECLARE count_monto_TC int(11);
  DECLARE count_monto_TD int(11);
  DECLARE count_monto_cheque int(11);
  DECLARE count_monto_transferncia int(11);
  DECLARE count_monto_convenio int(11);
  
  SELECT A.id_apertura, A.fecha_apertura, A.monto_apertura INTO id_apertura_caja, fecha_apertura, monto_apertura FROM apertura_caja AS A WHERE A.id_caja = id_caja AND A.correlativo = correlativo;
  
  
  
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_efectivo,
    count_monto_efectivo
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 0
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_TC,
    count_monto_TC
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 1
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_TD,
    count_monto_TD
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 2
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_cheque,
    count_monto_cheque
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 3
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_transferncia,
    count_monto_transferncia
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 4
    AND P.correlativo_caja = correlativo
    AND P.id_caja = id_caja;
    
  SELECT 
     IFNULL(ROUND(SUM(IF(E.tipo_documento <> 61, E.total_documento, E.total_documento*-1))), 0),
     COUNT(*)
  INTO
    monto_convenio,
    count_monto_convenio
  FROM encabezado_movimientos AS E
    LEFT JOIN pagos_movimientos AS P
      ON P.id_movimiento = E.id
  WHERE
    E.caja_id = id_caja
    AND E.correlativo = correlativo
    AND E.is_convenio = '1';SELECT 
    DATE_FORMAT(fecha_apertura, "%d-%m-%Y") AS fecha_apertura,
    DATE_FORMAT(fecha_apertura, "%d-%m-%Y %H:%m:%s") AS fecha_apertura_new,
    id_caja,
    correlativo,
    monto_efectivo, 
    monto_TC, 
    monto_TD, 
    monto_cheque, 
    monto_transferncia, 
    monto_apertura,
    monto_convenio,
    count_monto_efectivo, 
    count_monto_TC, 
    count_monto_TD, 
    count_monto_cheque, 
    count_monto_transferncia,
    count_monto_convenio,
    (
    SELECT 
      IFNULL(ROUND(SUM(IF(E2.tipo_documento <> 61, E2.total_documento, E2.total_documento*-1))), 0) 
    FROM encabezado_movimientos AS E2
    WHERE 
      E2.correlativo = correlativo 
      AND E2.caja_id = id_caja
    ) AS monto_venta;SELECT
      D.id_tipo_detalle_mov_caja,
      D.descripcion_mov_caja,
      D.monto_mov_caja,
      D.num_documento,
      D.comentario,
      D.rut,
      D.fecha
    FROM 
      det_movimientos_caja AS D
    WHERE 
      D.id_apertura_caja = id_apertura_caja;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getResumenCompraSII` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getResumenCompraSII`(
	IN `param_mes` INT,
	IN `param_ano` INT

)
BEGIN 
  SELECT
    R.id,
    R.mes,
    R.`año`,
    R.id_doc,
    R.tipo_doc,
    R.rut,
    R.razon_social,
    R.numero_doc,
    DATE_FORMAT(R.fecha_doc, "%Y-%m-%d") AS fecha_doc,
    DATE_FORMAT(R.fecha_recepcion, "%Y-%m-%d") AS fecha_recepcion,
    DATE_FORMAT(R.fecha_acuse, "%Y-%m-%d") AS fecha_acuse,
    R.m_exento,
    R.m_neto,
    R.m_iva_recuperable,
    R.m_iva_no_recuperable,
    R.cod_iva_no_recuperable,
    R.monto_total,
    R.monto_neto_activo_fijo,
    R.iva_activo_fijo,
    R.iva_uso_comun,
    R.imp_sin_derecho_a_credito,
    R.iva_no_retenido,
    R.tabacos_puros,
    R.tabacos_cigarrillos,
    R.tabacos_elaborados,
    R.nce_o_nde_sobre_fact_compra,
    R.cod_otro_impuesto,
    R.valor_otro_impuesto,
    R.tasa_otro_impuesto,
    R.glosa,
    R.tipo_referencia,
    R.referencia,
    R.inventariable,
    R.create_at
  FROM r_compra_sii AS R
  WHERE
    R.mes = param_mes
    AND R.`año` = param_ano
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getResumenVentasPorFechasSucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getResumenVentasPorFechasSucursal`()
BEGIN
  SELECT 
    E.numero_documento,
    E.tipo_documento,
    E.rut,
    E.monto_pagado,
    E.fecha_documento
  FROM
    encabezado_movimientos AS E
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getSiguienteID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getSiguienteID`()
BEGIN
  SELECT MAX(P.id_producto) + 1 FROM productos AS P;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getSolicitudMercaderia` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `getSolicitudMercaderia`(
	IN `param_id` INT
)
BEGIN
  SELECT
    E.id_sucursal,
    (SELECT S.direccion FROM sucursales AS S WHERe S.id = E.id_sucursal LIMIT 1) AS direccion_sucursal
  FROM encabezado_sol_mercaderia AS E
  WHERE 
    E.id = param_id
  ;
    
  SELECT
    D.id_producto,
    D.descripcion AS nombre_producto_venta,
    D.stock AS stock,
    D.stock_demas_suc AS demas_sucursales,
    D.stock_general AS stock_general,
    D.cantidad AS stock_solicitado
  FROM detalle_sol_mercaderia AS D
  WHERE D.id_encabezado = param_id
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getStockProductoBodeja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getStockProductoBodeja`(
	IN `param_id_producto` INT,
	IN `param_mac` VARCHAR(50)


)
BEGIN
  DECLARE sucursal_var INT(11) DEFAULT idSucursalDesdeMac(param_mac);
  DECLARE bodega_var INT(11) DEFAULT idBodegaDesdeSucursal(sucursal_var);

  SELECT 
    S.stock,
    (SELECT E.permite_stock_negativo FROM empresas AS E LIMIT 1) AS permite_stock_negativo
  FROM stock_bodegas AS S WHERE S.id_bodega = bodega_var AND S.id_producto = param_id_producto LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getSucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getSucursal`(
	IN `param_id` INT


)
BEGIN

  SELECT 
			S.id, 
			S.nombre, 
			S.id_lista_precio, 
			S.direccion, 
			S.comuna, 
			S.cuidad AS ciudad, 
			S.estado_sucursal
			
	FROM sucursales AS S
  WHERE S.id = param_id
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getSucursalMAC` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getSucursalMAC`(
	IN `param_mac` VARCHAR(100)
)
BEGIN
  CALL getSucursal(idSucursalDesdeMac(param_mac));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetTodaLaBodega` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `GetTodaLaBodega`(
	IN `param_bodega` INT


)
BEGIN
  SELECT 
    S.id_producto, 
    P.nombre_producto_venta, 
    S.stock 
  FROM 
    stock_bodegas AS S LEFT JOIN productos AS P ON P.id_producto = S.id_producto 
  WHERE S.id_bodega = param_bodega AND S.stock <> 0 LIMIT 100;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getTomaInventario` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getTomaInventario`(
	IN `param_mac` VARCHAR(100)

)
BEGIN
  DECLARE id_cabezera int(11) DEFAULT (SELECT I.id_inventario_tabla_paso_encabezado FROM inventario_tabla_paso_encabezado AS I WHERE I.mac_inventario_tabla_paso_encabezado = param_mac LIMIT 1);
  
  SELECT
    
    
    DATE_FORMAT(E.fecha_inventario_tabla_paso_encabezado, "%d-%m-%Y") AS fecha_inventario_tabla_paso_encabezado,
    E.bodega_inventario_tabla_paso_encabezado
  FROM inventario_tabla_paso_encabezado AS E
  WHERE E.id_inventario_tabla_paso_encabezado = id_cabezera LIMIT 1;
  
  SELECT
    
    
    D.id_producto_inventario_tabla_paso_detalle,
    D.descripcion_inventario_tabla_paso_detalle,
    D.ubicacion_inventario_tabla_paso_detalle,
    D.stock_inventario_tabla_paso_detalle
  FROM inventario_tabla_paso_detalle AS D
  WHERE D.id_inventario_tabla_paso_encabezado = id_cabezera;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getTrabajadoresLikeNombre` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getTrabajadoresLikeNombre`(
	IN `param_like` VARCHAR(250)


)
BEGIN
  SELECT T.rut AS Rut, T.nombre AS Nombre, T.dv FROM trabajadores AS T
  WHERE 
    T.nombre LIKE CONCAT('%', param_like, '%')
    OR T.rut LIKE CONCAT('%', param_like, '%');
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getTraspaso` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getTraspaso`(
	IN `param_id_traspaso` INT
)
BEGIN
  SELECT 
    E.id_mov_inv,
    E.fecha,
    E.mac,
    E.id_bodega_origen,
    E.id_bodega_destino
  FROM encabezado_movimiento_inventario AS E
  WHERE E.id_mov_inv = param_id_traspaso
  LIMIT 1;
  
  SELECT 
    D.id_producto,
    D.descripcion,
    D.cantidad
  FROM detalle_movimiento_inventario AS D
  WHERE D.id_encabezado = param_id_traspaso;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUltimoMovimientoTransbank` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `GetUltimoMovimientoTransbank`(
	IN `param_mac` VARCHAR(100)
)
BEGIN
  DECLARE id_caja int(11) DEFAULT FUNCidCajaDesdeMAC(param_mac);
  DECLARE ultimo_transbank int(11);
  
  
  SET ultimo_transbank = (SELECT
                            P.numero_operacion
                          FROM pagos_movimientos AS P
                          LEFT JOIN encabezado_movimientos AS E
                          ON P.id_movimiento = E.id
                          WHERE
                            (
                            P.forma_pago = 1
                            OR P.forma_pago = 2
                            )
                            AND E.caja_id = id_caja
                          ORDER BY P.id DESC
                          LIMIT 1);
  SELECT IFNULL(ultimo_transbank, 0) AS ultimo_transbank; 
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getUnidad` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getUnidad`(
	IN `param_id` INT
)
BEGIN
  SELECT U.id_unidades AS id, U.desc_unidades AS descripcion FROM unidades AS U WHERE U.id_unidades = param_id LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getUnidadNegocio` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `getUnidadNegocio`(
	IN `param_id` INT
)
BEGIN

  SELECT 
			UN.id,
      UN.descripcion
	FROM unidades_negocio AS UN
  WHERE UN.id = param_id
  LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `grabarInventarioTablaPaso` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `grabarInventarioTablaPaso`(
	IN `param_mac` VARCHAR(100)








)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;
      ROLLBACK;
  END; 
  DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;
      ROLLBACK;
  END;
  
  START TRANSACTION;
  
  BEGIN

    
    
    DECLARE mac VARCHAR(100) DEFAULT param_mac;
    DECLARE id_bodega INT(11);
    DECLARE fecha_inicio VARCHAR(15);
    DECLARE id_tabla_paso_encabezado INT(11);
    
    DECLARE id_tabla_general_paso_encabezado INT(11);
    
    SELECT I.id_inventario_tabla_paso_encabezado, I.fecha_inventario_tabla_paso_encabezado, I.bodega_inventario_tabla_paso_encabezado 
    INTO id_tabla_paso_encabezado, fecha_inicio, id_bodega
    FROM inventario_tabla_paso_encabezado AS I
    WHERE I.mac_inventario_tabla_paso_encabezado = mac;
    
    
    SET id_tabla_general_paso_encabezado = (SELECT I.id_inv_tab_gral_paso_enc FROM inventario_tabla_general_paso_encabezado AS I WHERE I.bodega_inv_tab_gral_paso_enc = id_bodega LIMIT 1);
    
    
    IF id_tabla_general_paso_encabezado IS NULL THEN
      INSERT INTO inventario_tabla_general_paso_encabezado (`fecha_inicio_inv_tab_gral_paso_enc`, `fecha_termino_inv_tab_gral_paso_enc`, `bodega_inv_tab_gral_paso_enc`) 
                                                    VALUES (fecha_inicio, fecha_inicio, id_bodega);
      SET id_tabla_general_paso_encabezado = LAST_INSERT_ID();
    
    END IF;
    
    
    INSERT INTO inventario_tabla_general_paso_detalle (`id_inventario_tabla_paso_encabezado`, `id_producto_inventario_tabla_paso_detalle`, `descripcion_inventario_tabla_paso_detalle`, `ubicacion_inventario_tabla_paso_detalle`, `stock_inventario_tabla_paso_detalle`)
    SELECT id_tabla_general_paso_encabezado, D.id_producto_inventario_tabla_paso_detalle, D.descripcion_inventario_tabla_paso_detalle, '1', D.stock_inventario_tabla_paso_detalle FROM inventario_tabla_paso_detalle AS D WHERE D.id_inventario_tabla_paso_encabezado = id_tabla_paso_encabezado;

    
    DELETE FROM inventario_tabla_paso_encabezado  WHERE id_inventario_tabla_paso_encabezado = id_tabla_paso_encabezado;  
    DELETE FROM inventario_tabla_paso_detalle WHERE id_inventario_tabla_paso_encabezado =  id_tabla_paso_encabezado;
    
    
    
    IF (SELECT COUNT(*) FROM inventario_tabla_paso_encabezado AS I WHERE I.bodega_inventario_tabla_paso_encabezado = id_bodega) = 0 THEN
      
      
      CALL cursorGrabarInventarioTablaPaso(id_tabla_general_paso_encabezado, id_bodega, mac);
      
       
    DELETE FROM inventario_tabla_general_paso_encabezado  WHERE id_inv_tab_gral_paso_enc = id_tabla_general_paso_encabezado;  
    DELETE FROM inventario_tabla_general_paso_detalle WHERE id_inventario_tabla_paso_encabezado =  id_tabla_general_paso_encabezado;
      
    END IF;
    
    SELECT "SUCCESS";
  END;
  
  COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `guardarActualizarOrdenCompraXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `guardarActualizarOrdenCompraXML`(
	IN `param_xml` MEDIUMTEXT





)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml MEDIUMTEXT DEFAULT param_xml;
    	 
	    
      DECLARE contador int(11) DEFAULT 1;
      
	    
	    DECLARE id int(11) DEFAULT ExtractValue(xml, '//DOrdenCompra/Id');
	    DECLARE rut char(11) DEFAULT ExtractValue(xml, '//DOrdenCompra/Rut_proveedor');
	    DECLARE dv	char(1) DEFAULT ExtractValue(xml, '//DOrdenCompra/Dv_proveedor');
      DECLARE monto_desc_global decimal(18,4) DEFAULT ExtractValue(xml, '//DOrdenCompra/Monto_descuento');
      DECLARE glosa_var	varchar(500) DEFAULT ExtractValue(xml, '//DOrdenCompra/Glosa');
      DECLARE fecha_var	DATE DEFAULT STR_TO_DATE(ExtractValue(xml, '//DOrdenCompra/Fecha_db'), '%Y-%m-%d');
      
	    
		 DECLARE id_encabezado int(11);
		 DECLARE codigo_proveedor char(20);
     DECLARE id_producto int(11);
		 DECLARE descripcion_interno varchar(100);
		 DECLARE cantidad float(11,4);
     DECLARE precio decimal(18,4);
     DECLARE porcentaje_descuento decimal(18,4);
     DECLARE monto_descuento decimal(18,4);
     DECLARE total decimal(18,4);
     

	  IF id = 0 THEN 
      INSERT INTO encabezado_oc (`rut`, `dv`, monto_desc, `glosa`, `fecha`) VALUES (rut, dv, monto_desc_global,  glosa_var, fecha_var);
      SET id = LAST_INSERT_ID();

   ELSE
      
      UPDATE encabezado_oc AS EOC
      SET 
        EOC.`monto_desc`=monto_desc_global, 
        EOC.`fecha`=fecha_var,
        EOC.`glosa`=glosa_var,
        EOC.rectificado = EOC.rectificado + 1
      WHERE EOC.id = id;
      
      DELETE Det FROM detalle_oc AS Det WHERE Det.id_encabezado = id;
    
   END IF;
   
    WHILE ((contador < 10000) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[',contador,']/Id_producto')) != ''))  DO
  		   
        	
        	SET id_encabezado = id;
          SET codigo_proveedor = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Codigo_proveedor'));
        	SET id_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Id_producto'));
        	SET descripcion_interno = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Descripcion_interno'));
        	SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Cantidad_pedido'));
          SET precio = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Precio'));
          
          SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Porcentaje_decs'));
          SET monto_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Monto_desc'));
          SET total = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Total'));
        	
        	INSERT INTO detalle_oc (`id_encabezado`, `codigo_proveedor`, `id_producto`, `descripcion_interno`, id_unidad, `cantidad`, `precio`, porcentaje_descuento, monto_descuento, `total_linea`) 
          VALUES (id_encabezado, codigo_proveedor, id_producto, descripcion_interno, (SELECT P.unidad_compra FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1), cantidad, precio, porcentaje_descuento, monto_descuento, total);
         
          SET contador = contador + 1;
        
        END WHILE;
  		   
  		   SELECT "SUCCESS", id;
   
   END;
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `guardarOrdenCompraXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `guardarOrdenCompraXML`(
	IN `param_xml` MEDIUMTEXT


)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    	 DECLARE xml MEDIUMTEXT DEFAULT param_xml;
      DECLARE contador int(11) DEFAULT 1;
	    DECLARE id int(11);DECLARE rut char(11) DEFAULT ExtractValue(xml, '//DOrdenCompra/Rut_proveedor');DECLARE dv	char(1) DEFAULT ExtractValue(xml, '//DOrdenCompra/Dv_proveedor');DECLARE monto_desc_global decimal(18,4) DEFAULT ExtractValue(xml, '//DOrdenCompra/Monto_descuento');DECLARE glosa_var	varchar(500) DEFAULT ExtractValue(xml, '//DOrdenCompra/Glosa');DECLARE fecha_var	DATE DEFAULT STR_TO_DATE(ExtractValue(xml, '//DOrdenCompra/Fecha_db'), '%Y-%m-%d');
		 DECLARE id_encabezado int(11);DECLARE codigo_proveedor char(20);DECLARE id_producto int(11);DECLARE descripcion_interno varchar(100);DECLARE cantidad float(11,4);DECLARE precio decimal(18,4);DECLARE porcentaje_descuento decimal(18,4);DECLARE monto_descuento decimal(18,4);DECLARE total decimal(18,4);INSERT INTO encabezado_oc (`rut`, `dv`, monto_desc, `glosa`, `fecha`) VALUES (rut, dv, monto_desc_global,  glosa_var, fecha_var);SET id = LAST_INSERT_ID();WHILE ((contador < 10000) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[',contador,']/Id_producto')) != ''))  DO
		   
      	
      	SET id_encabezado = id;SET codigo_proveedor = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Codigo_proveedor'));SET id_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Id_producto'));SET descripcion_interno = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Descripcion_interno'));SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Cantidad_pedido'));SET precio = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Precio'));SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Porcentaje_decs'));SET monto_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Monto_desc'));SET total = ExtractValue(xml , CONCAT('//Detalle/DDetalleOC[', contador ,']/Total'));INSERT INTO detalle_oc (`id_encabezado`, `codigo_proveedor`, `id_producto`, `descripcion_interno`, id_unidad, `cantidad`, `precio`, porcentaje_descuento, monto_descuento, `total_linea`) 
        VALUES (id_encabezado, codigo_proveedor, id_producto, descripcion_interno, (SELECT P.unidad_compra FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1), cantidad, precio, porcentaje_descuento, monto_descuento, total);SET contador = contador + 1;END WHILE;SELECT "SUCCESS", id;END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `HeidiSQL_temproutine_1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `HeidiSQL_temproutine_1`(
	IN `param_id` INT






)
SET max_sp_recursion_depth=255 ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `HeidiSQL_temproutine_2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `HeidiSQL_temproutine_2`(
	IN `param_xml` TEXT

)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
   END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `importarCVSResumenCompraSII` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `importarCVSResumenCompraSII`(
	IN `param_xml` LONGTEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	 END;


  BEGIN

      DECLARE xml LONGTEXT DEFAULT param_xml;
      
      DECLARE contador INT(11) DEFAULT 1;
      DECLARE contador_filas_insertadas INT(11) DEFAULT 0;
      DECLARE id_reg INT(11);
      DECLARE glosa_var VARCHAR(500) DEFAULT '';
      
      DECLARE mes_var INT(11) DEFAULT ExtractValue(xml, '//DResumenCompraSII/Mes');
      DECLARE año_var INT(11) DEFAULT ExtractValue(xml, '//DResumenCompraSII/Año');
      
      DECLARE tipo_doc_var VARCHAR(20);
      DECLARE rut_proveedor_var VARCHAR(20);
      DECLARE razon_social_var VARCHAR(200);
      DECLARE folio_var VARCHAR(20);
      DECLARE fecha_docto_var VARCHAR(20);
      DECLARE fecha_recepcion_var VARCHAR(20);
      DECLARE fecha_acuse_var VARCHAR(20);
      
      DECLARE monto_exento_var INT(11);
      DECLARE monto_neto_var INT(11);
      DECLARE monto_iva_recuperable_var INT(11);
      DECLARE monto_iva_no_recuperable_var INT(11);
      DECLARE codigo_iva_no_rec_var INT(11);
      DECLARE monto_total_var INT(11);
      DECLARE monto_neto_activo_fijo_var INT(11);
      DECLARE iva_activo_fijo_var INT(11);
      DECLARE iva_uso_comun_var INT(11);
      DECLARE impuesto_sin_derecho_a_credito_var INT(11);
      DECLARE iva_no_retenido_var INT(11);
      DECLARE tabacos_puros_var INT(11);
      DECLARE tabacos_cigarrillos_var INT(11);
      DECLARE tabacos_elaborados_var INT(11);
      DECLARE nce_nde_sobre_factura_compra_var INT(11);
      DECLARE codigo_otro_impuesto_var INT(11);
      DECLARE valor_otro_impuesto_var INT(11);
      DECLARE tasa_otro_impuesto_var INT(11);
      
       SET tipo_doc_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Tipo_doc'));
       
      WHILE ((contador < 50) && ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Tipo_doc')) != '')  DO
       
       SET tipo_doc_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Tipo_doc'));
       SET rut_proveedor_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Rut_proveedor'));
       SET folio_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Folio'));   

       SET id_reg = (SELECT R.id FROM r_compra_sii AS R 
                      WHERE
                        R.rut = rut_proveedor_var
                        AND R.tipo_doc = tipo_doc_var
                        AND R.numero_doc = folio_var
                       LIMIT 1
                    );
       
      IF id_reg IS NULL THEN
        
          SET razon_social_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Razon_social'));
              
          SET fecha_docto_var = IF(
                ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Fecha_docto')) = '',
                null,
                ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Fecha_docto'))
              );
              
          SET fecha_recepcion_var = IF(
                ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Fecha_recepcion')) = '',
                null,
                ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Fecha_recepcion'))
              );
              
          SET fecha_acuse_var = IF(
                ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Fecha_acuse')) = '',
                null,
                ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Fecha_acuse'))
              );
        
        
        SET monto_exento_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Monto_exento'));
        SET monto_neto_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Monto_neto'));
        SET monto_iva_recuperable_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Monto_iva_recuperable'));
        SET monto_iva_no_recuperable_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Monto_iva_no_recuperable'));
        SET codigo_iva_no_rec_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Codigo_iva_no_rec'));
        SET monto_total_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Monto_total'));
        SET monto_neto_activo_fijo_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Monto_neto_activo_fijo'));
        SET iva_activo_fijo_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Iva_activo_fijo'));
        SET iva_uso_comun_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Iva_uso_comun'));
        SET impuesto_sin_derecho_a_credito_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Impuesto_sin_derecho_a_credito'));
        SET iva_no_retenido_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Iva_no_retenido'));
        SET tabacos_puros_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Tabacos_puros'));
        SET tabacos_cigarrillos_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Tabacos_cigarrillos'));
        SET tabacos_elaborados_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Tabacos_elaborados'));
        SET nce_nde_sobre_factura_compra_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Nce_nde_sobre_factura_compra'));
        SET codigo_otro_impuesto_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Codigo_otro_impuesto'));
        SET valor_otro_impuesto_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Valor_otro_impuesto'));
        SET tasa_otro_impuesto_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleResumenCompraSII[',contador,']/Tasa_otro_impuesto'));
        
        
          INSERT INTO r_compra_sii 
            (
             `tipo_doc`,
             `rut`,
             `razon_social`,
             `numero_doc`,
             `fecha_doc`,
             `fecha_recepcion`,
             `fecha_acuse`,
             `m_exento`,
             `m_neto`,
             `m_iva_recuperable`,
             `m_iva_no_recuperable`,
             `cod_iva_no_recuperable`,
             `monto_total`,
             `monto_neto_activo_fijo`,
             `iva_activo_fijo`,
             `iva_uso_comun`,
             `imp_sin_derecho_a_credito`,
             `iva_no_retenido`,
             `tabacos_puros`,
             `tabacos_cigarrillos`,
             `tabacos_elaborados`,
             `nce_o_nde_sobre_fact_compra`,
             `cod_otro_impuesto`,
             `valor_otro_impuesto`,
             `tasa_otro_impuesto`,
             `glosa`,
             `mes`,
             `año`,
             monto_pagar,
             monto_pagado,
             monto_adeudado
             )
                VALUES 
             (
             tipo_doc_var,
             rut_proveedor_var,
             razon_social_var,
             folio_var,
             fecha_docto_var,
             fecha_recepcion_var,
             fecha_acuse_var,
             monto_exento_var,
             monto_neto_var,
             monto_iva_recuperable_var,
             monto_iva_no_recuperable_var,
             codigo_iva_no_rec_var,
             monto_total_var,
             monto_neto_activo_fijo_var,
             iva_activo_fijo_var,
             iva_uso_comun_var,
             impuesto_sin_derecho_a_credito_var,
             iva_no_retenido_var,
             tabacos_puros_var,
             tabacos_cigarrillos_var,
             tabacos_elaborados_var,
             nce_nde_sobre_factura_compra_var,
             codigo_otro_impuesto_var,
             valor_otro_impuesto_var,
             tasa_otro_impuesto_var,
             glosa,
             mes_var,
             año_var,
             monto_total_var,
             0,
             monto_total_var
             );    
             
          CALL `ContabilizaRCompra`(LAST_INSERT_ID());
          
          SET contador_filas_insertadas = contador_filas_insertadas + 1;
          
        END IF;
        
        SET contador = contador + 1;
    
       END WHILE;
        
        SELECT "SUCCESS", contador_filas_insertadas;
  END;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeChequesNoCobrados` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `informeChequesNoCobrados`(
	IN `param_id_cta_cte_banco` INT
,
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE

)
BEGIN
  SELECT  
    C.tipo_pago, 
    C.num_cheque,
    C.rut, 
    (SELECT P.razon_social FROM proveedores AS P WHERE P.rut = C.rut LIMIT 1) AS razon_social, 
    C.fecha_emision, 
    C.fecha_vencimiento, 
    C.monto_cheque,
    C.id_cta_cte_banco
  FROM cabecera_pago_proveedores  AS C
  WHERE C.fecha_cobro IS NULL
  AND C.fecha_anulacion IS NULL
  AND C.fecha_emision IS NOT NULL
  AND IF(param_id_cta_cte_banco != 0, C.id_cta_cte_banco = param_id_cta_cte_banco, 1=1)
  AND C.fecha_vencimiento BETWEEN param_fecha_inicio AND param_fecha_termino
  ORDER BY C.fecha_vencimiento ASC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeDocumentosClientesSinCobrar` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeDocumentosClientesSinCobrar`(
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE,
	IN `param_rut_proveedor` VARCHAR(50),
	IN `param_opciones_fecha` CHAR(1)



)
    COMMENT 'param_opciones_fecha: 0 fecha desactivada, 1 fecha emision , 2 fecha vencimiento'
BEGIN
  SELECT
    E.tipo_documento,
    E.numero_documento,
    E.fecha_documento,
    E.fecha_vencimiento,
    E.rut,
    E.dv,
    E.razon_social,
    E.total_documento,
    E.monto_adeudado
  FROM encabezado_movimientos AS E
  WHERE
    IF( param_rut_proveedor = '', 1=1, E.rut = param_rut_proveedor)
    AND IF(
      param_opciones_fecha = 0,
      1=1, 
      IF(
          param_opciones_fecha = 1,
          E.fecha_documento BETWEEN param_fecha_inicio AND param_fecha_termino, 
          E.fecha_vencimiento BETWEEN param_fecha_inicio AND param_fecha_termino
        )
      )
    AND E.monto_adeudado > 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeDocumentosProveedoresSinPagar` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeDocumentosProveedoresSinPagar`(
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE,
	IN `param_rut_proveedor` VARCHAR(50),
	IN `param_opciones_fecha` CHAR(1)
)
    COMMENT 'param_opciones_fecha: 0 fecha desactivada, 1 fecha emision , 2 fecha vencimiento'
BEGIN

SELECT
    E.tipo_doc AS tipo_documento,
    E.numero_doc AS numero_documento,
    E.fecha_doc AS fecha,
    E.fecha_doc AS fecha_documento,
    IFNULL(EM.fecha_vencimiento, E.fecha_doc) AS fecha_vencimiento,
    E.rut,
    (SELECT P.dv FROM proveedores AS P WHERE P.rut = E.rut LIMIT 1) AS dv,
    E.razon_social AS razon_social,
    IF(E.tipo_doc = '61', E.monto_total*-1, E.monto_total) AS total_documento,
    IF(E.tipo_doc = '61', E.monto_adeudado*-1, E.monto_adeudado) AS monto_adeudado
  FROM r_compra_sii AS E
  LEFT JOIN encabezado_movimientos_compra AS EM
  ON
    E.tipo_doc = EM.tipo_documento
    AND E.numero_doc = EM.numero_documento
    AND E.rut = EM.rut
  WHERE
    IF( param_rut_proveedor = '', 1=1, E.rut = param_rut_proveedor)
    AND IF(
      param_opciones_fecha = 0,
      1=1, 
      IF(
          param_opciones_fecha = 1,
          E.fecha_doc BETWEEN param_fecha_inicio AND param_fecha_termino, 
          IFNULL(EM.fecha_vencimiento, E.fecha_doc) BETWEEN param_fecha_inicio AND param_fecha_termino
        )
      )
    AND E.monto_adeudado > 0
    -- AND E.rut <> 7583105
    ;
    
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeEntreFechas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeEntreFechas`()
BEGIN
  SELECT 
    P.codigo_barra,
    P.codigo_categoria_producto,
    P.id_producto,
    P.nombre_producto_venta,
    SUM(K.entrada) AS sum_entrada, 
    SUM(K.salida) AS sum_salida, 
    P.stock_general 
  FROM productos AS P 
    LEFT JOIN kardex AS K 
      ON P.id_producto = K.id_producto 
  WHERE 
    P.nombre_producto_venta LIKE "%Rhein%" 
    AND K.fecha_movimiento BETWEEN  "2019-05-01" AND "2019-06-25" 
  GROUP BY P.id_producto 
  HAVING P.stock_general < SUM(K.salida); 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeEntreFechasPorProveedor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeEntreFechasPorProveedor`(
	IN `param_rut_proveedor` VARCHAR(50),
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE







)
BEGIN
  SELECT 
    P.codigo_categoria_producto,
    P.id_producto,
    R.codigo_producto_proveedor,
    P.nombre_producto_venta,
    P.precio_ultima_compra,
    R.descripcion_compra,
    R.codigo_barra,
    (
    IFNULL((
      SELECT 
        SUM(IF(E.tipo_documento <> 61, D.cantidad, D.cantidad*-1))
      FROM 
        detalle_movimientos AS D
        INNER JOIN encabezado_movimientos AS E
          ON D.id_encabezado = E.id
      WHERE 
        D.producto_id = P.id_producto 
        AND E.fecha_documento BETWEEN  param_fecha_inicio AND param_fecha_termino
        AND (
          E.tipo_documento = 39 
          OR E.tipo_documento = 33
          OR E.tipo_documento = 61
          )
        AND E.is_factura_guias = 0
      ), 0)
      +
      IFNULL((
      SELECT 
        SUM(IF(G.tipo_documento <> 61, F.cantidad, F.cantidad*-1))
      FROM 
        detalle_movimientos_guias AS F
        INNER JOIN encabezado_movimientos_guias AS G
          ON F.id_encabezado = G.id
      WHERE 
        F.producto_id = P.id_producto 
        AND G.fecha_documento BETWEEN  param_fecha_inicio AND param_fecha_termino
        AND G.tipo_traspaso = 1
      ), 0)
      ) AS sum_salida, 
    P.stock_general,
    IFNULL((SELECT S.stock FROM stock_bodegas AS S WHERE S.id_producto = P.id_producto AND S.id_bodega = 2 LIMIT 1), 0) AS stock_los_leones,
    IFNULL((SELECT S.stock FROM stock_bodegas AS S WHERE S.id_producto = P.id_producto AND S.id_bodega = 1 LIMIT 1), 0) AS stock_casa_matriz
  FROM productos AS P 
    INNER JOIN relacion_codigos_alternativos_productos AS R
      ON R.producto_id = P.id_producto AND R.id_codigo_alternativo = (SELECT MAX(R2.id_codigo_alternativo) FROM relacion_codigos_alternativos_productos AS R2 WHERE R2.producto_id = P.id_producto AND R2.proveedor_rut = param_rut_proveedor)
  WHERE 
    R.proveedor_rut = param_rut_proveedor 
    AND P.disponible_compra = '1'
    
    
    
  
  
   ORDER BY  P.codigo_categoria_producto ASC , P.nombre_producto_venta ASC 
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeEntreFechasPorProveedor2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeEntreFechasPorProveedor2`(
	IN `param_rut_proveedor` VARCHAR(50),
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE






)
BEGIN
  SELECT 
    P.codigo_barra,
    P.codigo_categoria_producto,
    P.id_producto,
    R.codigo_producto_proveedor,
    P.nombre_producto_venta,
    P.precio_ultima_compra,
    R.descripcion_compra,
    R.codigo_barra,
    (
    IFNULL((
      SELECT 
        SUM(IF(E.tipo_documento <> 61, D.cantidad, D.cantidad*-1))
      FROM 
        detalle_movimientos AS D
        INNER JOIN encabezado_movimientos AS E
          ON D.id_encabezado = E.id
      WHERE 
        D.producto_id = P.id_producto 
        AND E.fecha_documento BETWEEN  param_fecha_inicio AND param_fecha_termino
        AND (
          E.tipo_documento = 39 
          OR E.tipo_documento = 33
          OR E.tipo_documento = 61
          )
        AND E.is_factura_guias = 0
         
      ), 0)
      +
      IFNULL((
      SELECT 
        SUM(IF(G.tipo_documento <> 61, F.cantidad, F.cantidad*-1))
      FROM 
        detalle_movimientos_guias AS F
        INNER JOIN encabezado_movimientos_guias AS G
          ON F.id_encabezado = G.id
      WHERE 
        F.producto_id = P.id_producto 
        AND G.fecha_documento BETWEEN  param_fecha_inicio AND param_fecha_termino
        AND G.tipo_traspaso = 1
      ), 0)
      ) AS sum_salida, 
    P.stock_general,
    IFNULL((SELECT S.stock FROM stock_bodegas AS S WHERE S.id_producto = P.id_producto AND S.id_bodega = 2 LIMIT 1), 0) AS stock_los_leones,
    IFNULL((SELECT S.stock FROM stock_bodegas AS S WHERE S.id_producto = P.id_producto AND S.id_bodega = 1 LIMIT 1), 0) AS stock_casa_matriz
  FROM productos AS P 
    INNER JOIN relacion_codigos_alternativos_productos AS R
      ON R.producto_id = P.id_producto AND R.id_codigo_alternativo = (SELECT MAX(R2.id_codigo_alternativo) FROM relacion_codigos_alternativos_productos AS R2 WHERE R2.producto_id = P.id_producto)
  WHERE 
    R.proveedor_rut = param_rut_proveedor 
    AND P.disponible_compra = '1'
    
    
    
  
  
   ORDER BY  P.codigo_categoria_producto ASC , P.nombre_producto_venta ASC 
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeEntreFechasPorProveedor3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeEntreFechasPorProveedor3`(
	IN `param_rut_proveedor` VARCHAR(20),
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE

















)
BEGIN
  SELECT 
    P.codigo_barra,
    P.codigo_categoria_producto,
    P.id_producto,
    R.codigo_producto_proveedor,
    P.nombre_producto_venta,
    P.precio_ultima_compra,
    R.descripcion_compra,
    R.codigo_barra,
    IFNULL(SUM(K.entrada), 0) AS sum_entrada, 
    IFNULL(SUM(K.salida), 0) AS sum_salida, 
    P.stock_general,
    1 AS diferencia,
    IFNULL((SELECT S.stock FROM stock_bodegas AS S WHERE S.id_producto = P.id_producto AND S.id_bodega = 2), 0) AS stock_los_leones,
    IFNULL((SELECT S.stock FROM stock_bodegas AS S WHERE S.id_producto = P.id_producto AND S.id_bodega = 1), 0) AS stock_casa_matriz
  FROM productos AS P 
    LEFT JOIN relacion_codigos_alternativos_productos AS R
      ON R.producto_id = P.id_producto
    LEFT JOIN kardex AS K 
      ON P.id_producto = K.id_producto 
  WHERE 
    R.proveedor_rut = param_rut_proveedor 
    AND P.disponible_compra = '1'
    
    
    
  GROUP BY P.id_producto 
  
  
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeEntreFechasPorPrueba` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeEntreFechasPorPrueba`(
	IN `param_rut_proveedor` VARCHAR(20)
,
	IN `param_fecha_inicio` DATE
,
	IN `param_fecha_termino` DATE

)
BEGIN
  SELECT 
    P.codigo_barra,
    P.codigo_categoria_producto,
    P.id_producto,
    R.codigo_producto_proveedor,
    P.nombre_producto_venta,
    SUM(K.entrada) AS sum_entrada, 
    SUM(K.salida) AS sum_salida, 
    P.stock_general,
    (P.stock_general - SUM(K.salida)) AS diferencia 
  FROM productos AS P 
    LEFT JOIN relacion_codigos_alternativos_productos AS R
      ON R.producto_id = P.id_producto
    LEFT JOIN kardex AS K 
      ON P.id_producto = K.id_producto 
  WHERE 
    R.proveedor_rut = param_rut_proveedor 
    AND K.fecha_movimiento BETWEEN  param_fecha_inicio AND param_fecha_termino 
    
    
  GROUP BY P.id_producto 
  
  
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeEntreFechasProductosSinVentas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `informeEntreFechasProductosSinVentas`(
	IN `param_id_sucursal` INT,
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE

)
BEGIN
  SELECT
    P.id_producto,
    P.nombre_producto_venta,
    P.stock_valorizado,
    P.stock_general,
    (
      SELECT 
        SUM(S.stock)
      FROM stock_bodegas AS S
      INNER JOIN bodegas AS B
        ON S.id_bodega = B.id
      WHERE
        IF(param_id_sucursal = '0', 1=1, B.id_sucursal = param_id_sucursal)
        AND S.id_producto = P.id_producto
    ) AS stock
  FROM productos AS P
  WHERE NOT EXISTS (
    SELECT
      1 
    FROM detalle_movimientos AS D 
    INNER JOIN encabezado_movimientos AS E
      ON E.id = D.id_encabezado
    WHERE 
      D.producto_id = P.id_producto 
      AND D.fecha 
      AND IF(param_id_sucursal = '0', 1=1, E.sucursal_id = param_id_sucursal)
      AND E.fecha_documento BETWEEN param_fecha_inicio AND param_fecha_termino
      );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeEntreFechasVentaVSStock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeEntreFechasVentaVSStock`(
	IN `param_id_sucursal` INT,
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE
,
	IN `param_mostrar_desabilitados_compra` CHAR(1)
)
BEGIN
  SELECT 
    P.id_producto,
    P.nombre_producto_venta,
    (
    IFNULL((
      SELECT 
        SUM(IF(E.tipo_documento <> 61, D.cantidad, D.cantidad*-1))
      FROM 
        detalle_movimientos AS D
        INNER JOIN encabezado_movimientos AS E
          ON D.id_encabezado = E.id
      WHERE 
        D.producto_id = P.id_producto 
        AND E.fecha_documento BETWEEN  param_fecha_inicio AND param_fecha_termino
        AND (
          E.tipo_documento = 39 
          OR E.tipo_documento = 33
          OR E.tipo_documento = 61
          )
        AND E.is_factura_guias = 0
        AND IF(param_id_sucursal != 0, E.sucursal_id = param_id_sucursal, 1=1)
      ), 0)
      +
      IFNULL((
      SELECT 
        SUM(IF(G.tipo_documento <> 61, F.cantidad, F.cantidad*-1))
      FROM 
        detalle_movimientos_guias AS F
        INNER JOIN encabezado_movimientos_guias AS G
          ON F.id_encabezado = G.id
      WHERE 
        F.producto_id = P.id_producto 
        AND G.fecha_documento BETWEEN  param_fecha_inicio AND param_fecha_termino
        AND G.tipo_traspaso = 1
        AND IF(param_id_sucursal != 0, G.sucursal_id = param_id_sucursal, 1=1)
      ), 0)
      ) AS sum_salida, 
    P.stock_general,
    IFNULL((SELECT S.stock FROM stock_bodegas AS S WHERE S.id_producto = P.id_producto AND S.id_bodega = 2 LIMIT 1), 0) AS stock_los_leones,
    IFNULL((SELECT S.stock FROM stock_bodegas AS S WHERE S.id_producto = P.id_producto AND S.id_bodega = 1 LIMIT 1), 0) AS stock_casa_matriz
  FROM productos AS P 
    WHERE IF(param_mostrar_desabilitados_compra = '1', 1 = 1, P.disponible_compra = '1')
    ORDER BY P.nombre_producto_venta
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeGuiasDespacho` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `informeGuiasDespacho`(
	IN `param_numero_mes` INT,
	IN `param_numero_ano` INT

)
SELECT
  E.tipo_documento,
  E.tipo_traspaso,
  E.numero_documento,
  E.rut,
  IF(E.anulacion = '0', E.razon_social, CONCAT("Nula ", E.glosa_anulacion)) AS razon_social,
  E.neto,
  E.`monto iva`,
  E.total_documento,
  DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento
FROM encabezado_movimientos_guias AS E
WHERE 
  MONTH(E.fecha_documento) = param_numero_mes
  AND YEAR(E.fecha_documento) = param_numero_ano
ORDER BY E.numero_documento DESC ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeGuiasTraspasoNoIngresadas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `informeGuiasTraspasoNoIngresadas`()
SELECT
  E.tipo_documento,
  E.numero_documento,
  E.rut,
  E.razon_social,
  E.neto,
  E.`monto iva`,
  E.total_documento,
  DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento
FROM encabezado_movimientos_guias AS E
WHERE 
  E.tipo_traspaso = 5
  AND E.id_movimiento_referencia = 0
  AND E.anulacion = '0' ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeGuiasVentaNoFacturadas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `informeGuiasVentaNoFacturadas`()
SELECT
  E.tipo_documento,
  E.numero_documento,
  E.rut,
  E.razon_social,
  E.neto,
  E.`monto iva`,
  E.total_documento,
  DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento
FROM encabezado_movimientos_guias AS E
WHERE 
  E.tipo_traspaso = 1
  AND E.id_movimiento_referencia = 0
  AND E.anulacion = '0' ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeKardex` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `informeKardex`(
	IN `param_fecha_inicio` DATETIME,
	IN `param_id_producto` INT,
	IN `param_id_bodega` INT,
	IN `param_ordenamiento` CHAR(1)




)
BEGIN

  DECLARE id_temporal INT(11);
  DECLARE id_kardex INT(11) DEFAULT (
                                      SELECT
                                        K.kardex_id
                                      FROM kardex AS K
                                      WHERE
                                        IF(param_id_producto = 0, 1=1, param_id_producto = K.id_producto)
                                        AND K.fecha_movimiento >= param_fecha_inicio
                                      ORDER BY K.kardex_id ASC
                                      LIMIT 1
                                    );
                                    
  
  IF id_kardex IS NOT NULL THEN
    SET id_temporal = (SELECT 
                        K.kardex_id 
                      FROM kardex AS K 
                      WHERE 
                        K.kardex_id < id_kardex 
                        AND IF(param_id_producto = 0, 1=1, param_id_producto = K.id_producto)
                        AND IF(param_id_bodega = 0, 1=1, param_id_bodega = K.bodega_id)
                      ORDER BY K.kardex_id DESC 
                      LIMIT 1);
             
    
    IF id_temporal IS NOT NULL THEN
      SET id_kardex = id_temporal;
    END IF;
  END IF;
  
  SELECT
    C.id,
    C.codigo,
    C.nombre,
    C.padre_id,
    C.descripcion,
    C.abreviacion,
    C.margen_categoria
  FROM arbol_categoria_productos AS C
  ORDER BY C.codigo;
  
  SELECT
    K.kardex_id,
    K.id_producto,
    P.codigo_categoria_producto,
    P.nombre_producto_venta,
    K.bodega_id,
    K.tipo_movimiento,
    K.numero_documento,
    K.entrada,
    K.vunitcompra,
    K.debe,
    K.salida,
    K.vunitsalida,
    K.haber,
    K.stock,
    K.pmp,
    K.stock_valorizado,
    K.fecha_movimiento
  FROM kardex AS K
    INNER JOIN productos AS P
    ON K.id_producto = P.id_producto
    
    
  WHERE
    IF(param_id_producto = 0, 1=1, param_id_producto = K.id_producto)
    AND IF(param_id_bodega = 0, 1=1, param_id_bodega = K.bodega_id)
    AND K.kardex_id >= id_kardex
  ORDER BY P.codigo_categoria_producto,  P.nombre_producto_venta
  
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeLibroCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeLibroCompra`(
	IN `param_numero_mes` INT,
	IN `param_numero_ano` INT


,
	IN `param_ignorar_facturas_propias` CHAR(1)

)
SELECT
  E.tipo_documento,
  E.numero_documento,
  E.rut,
  E.`razon social` AS razon_social,
  E.neto,
  E.`monto iva`,
  E.total_documento,
  DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento
FROM encabezado_movimientos_compra AS E
WHERE 
  MONTH(E.fecha_documento) = param_numero_mes
  AND YEAR(E.fecha_documento) = param_numero_ano
  AND IF(param_ignorar_facturas_propias = '1', E.rut <> '7583105', 1 = 1) order by E.fecha_documento ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeLibroVenta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `informeLibroVenta`(
	IN `param_numero_mes` INT,
	IN `param_numero_ano` INT
)
SELECT
  E.tipo_documento,
  E.numero_documento,
  CONCAT(E.rut, '-', E.dv) AS rut,
  E.razon_social,
  E.neto,
  E.`monto iva`,
  E.total_documento,
  DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento
FROM encabezado_movimientos AS E
WHERE 
  MONTH(E.fecha_documento) = param_numero_mes
  AND YEAR(E.fecha_documento) = param_numero_ano
  
ORDER BY E.numero_documento ASC ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeLibroVentaBoleta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `informeLibroVentaBoleta`(
	IN `param_numero_mes` INT
,
	IN `param_numero_ano` INT

)
SELECT
  MIN(E.numero_documento) AS folio_min,
  MAX(E.numero_documento) AS folio_max,
  CONCAT(E.rut, '-', E.dv) AS rut,
  E.razon_social,
  SUM(E.neto) AS neto,
  SUM(E.`monto iva`) AS iva,
  SUM(E.total_documento) AS total,
  DATE_FORMAT(E.fecha_documento, "%d-%m-%Y") AS fecha_documento
FROM encabezado_movimientos AS E
WHERE 
  MONTH(E.fecha_documento) = param_numero_mes
  AND YEAR(E.fecha_documento) = param_numero_ano
  AND E.tipo_documento = 39
GROUP BY E.fecha_documento ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeStockValorizado` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `informeStockValorizado`(
	IN `param_id_producto` INT,
	IN `param_id_bodega` INT,
	IN `param_ordenamiento` CHAR(1)
)
BEGIN

    SELECT
      P.id_producto,
      P.nombre_producto_venta,
      SUM(B.stock) AS stock,
      P.costo_pmp AS pmp,
      (B.stock * P.costo_pmp) AS total
    FROM productos AS P
    INNER JOIN stock_bodegas AS B
      ON P.id_producto = B.id_producto AND IF(param_id_bodega = 0, 1=1, B.id_bodega = param_id_bodega)
    WHERE
      IF(param_id_producto = 0, 1=1, P.id_producto = param_id_producto)
    GROUP BY P.id_producto
    ORDER BY 
    IF(param_ordenamiento = '0', P.nombre_producto_venta, 1) ASC,
    IF(param_ordenamiento = '1', P.id_producto, 1) ASC,
    IF(param_ordenamiento = '2', P.codigo_categoria_producto, 1) ASC
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `informeVentasBoletaDiaVSContabilidadCierreCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `informeVentasBoletaDiaVSContabilidadCierreCaja`(
	IN `param_fecha` DATE
)
    COMMENT 'muestra valores que se peuden comprarar con las ventas del dia en boletas versus la contabilizacion de los cierre de cajas que son equibalentes'
BEGIN

  SELECT
    E.caja_id,
    IFNULL(P.forma_pago, 100) AS 'forma_pago',
    IFNULL(P.descripcion_forma_pago, 'CONVENIO') AS descripcion_forma_pago,
    SUM(P.monto_pagado) AS monto_pagado,
    ROUND(SUM(P.monto_pagado)/1.19) AS neto_venta
  FROM encabezado_movimientos AS E
  LEFT JOIN pagos_movimientos AS P
    ON E.id = P.id_movimiento
  WHERE 
    E.fecha_documento = param_fecha
    AND E.tipo_documento = 39
  GROUP BY E.caja_id, E.tipo_documento, P.forma_pago;
  
  /*
  -- se declaran las cuentas
  DECLARE cuenta_contable_iva_debito INT(11); -- iva debito
  DECLARE cuenta_contable_ventas INT(11); -- resultado ventas
  
  DECLARE cuenta_contable_existencia INT(11); -- para el calculo del costo
  DECLARE cuenta_contable_costo_venta INT(11); -- para el calculo del costo
  
  
  DECLARE cuenta_contable_transbank_debito INT(11); -- tipo pago 1
  DECLARE cuenta_contable_transbank_credito INT(11); -- tipo pago 2
  DECLARE cuenta_contable_caja INT(11);   -- tipo pago 0
  DECLARE cuenta_contable_transferencia INT(11);   -- tipo pago 4 transferencia -- esto viene en el mismo pago
  DECLARE cuenta_contable_documento_por_cobrar INT(11);   -- tipo pago 3 cheque
    
  DECLARE suma_transbanck_debito_contabilidad INT(11);
  DECLARE suma_transbanck_debito_cierre_caja INT(11);
  
  DECLARE suma_transbanck_credito_contabilidad INT(11);
  DECLARE suma_transbanck_credito_cierre_caja INT(11);
  
  DECLARE suma_efectivo_contabilidad INT(11);
  DECLARE suma_efectivo_cierre_caja INT(11);
  
  DECLARE suma_documentos_por_cobrar_contabilidad INT(11);
  DECLARE suma_documentos_por_cobrar_cierre_caja INT(11);

  
  SELECT
      E.cta_contable_iva_debito,
      E.cta_contable_resultado_venta,
      E.cta_contable_caja,
      E.cta_contable_existencia,
      E.cta_contable_transbank_debito,
      E.cta_contable_transbank_credito,
      E.cta_contable_documentos_por_cobrar,
      E.cta_contable_costo_venta
    INTO
      cuenta_contable_iva_debito,
      cuenta_contable_ventas,
      cuenta_contable_caja,
      cuenta_contable_existencia,
      cuenta_contable_transbank_debito,
      cuenta_contable_transbank_credito,
      cuenta_contable_documento_por_cobrar,
      cuenta_contable_costo_venta
    FROM empresas AS E
    LIMIT 1;
    
    -- si hay alguna cuenta sin valor, saltara un error
    IF cuenta_contable_iva_debito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable IVA DEBITO', 'S');
    END IF;
    IF cuenta_contable_ventas IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable RESULTADO VENTAS', 'S');
    END IF;
    IF cuenta_contable_transbank_debito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA DEBITO', 'S');
    END IF;
     IF cuenta_contable_transbank_credito IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable REDCOMPRA CREDITO', 'S');
    END IF;
     IF cuenta_contable_documento_por_cobrar IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable DOCUMENTOS POR COBRAR', 'S');
    END IF;
    IF cuenta_contable_caja IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable CAJA', 'S');
    END IF;
    IF cuenta_contable_existencia IS NULL THEN
      CALL errorCR(contexto_var, 'No esta la cuenta contable EXISTENCIA POR DEFECTO', 'S');
    END IF;
    
  -- debito
  SELECT
   IFNULL(SUM(D.debe - D.haber), 0)
  INTO
    suma_transbanck_debito_contabilidad
  FROM contab_diario_detalle AS D
  INNER JOIN contab_diario_cabecera AS C
    ON D.id_diario_cabecera = C.id
  WHERE
    D.cuenta_contable = cuenta_contable_transbank_debito
    AND C.fecha_comprobante = param_fecha;
    
  SELECT 
    IFNULL(SUM(A.debito), 0)
  INTO
    suma_transbanck_debito_cierre_caja
  FROM apertura_caja AS A
  WHERE
    DATE(A.fecha_cierre) = param_fecha
    ;
  -- END debito
  
    -- credito
  SELECT
   IFNULL(SUM(D.debe - D.haber), 0)
  INTO
    suma_transbanck_credito_contabilidad
  FROM contab_diario_detalle AS D
  INNER JOIN contab_diario_cabecera AS C
    ON D.id_diario_cabecera = C.id
  WHERE
    D.cuenta_contable = cuenta_contable_transbank_credito
    AND C.fecha_comprobante = param_fecha;
    
  SELECT 
    IFNULL(SUM(A.credito), 0)
  INTO
    suma_transbanck_credito_cierre_caja
  FROM apertura_caja AS A
  WHERE
    DATE(A.fecha_cierre) = param_fecha
    ;
  -- END credito
  
  -- efectivo
  SELECT
   IFNULL(SUM(D.debe - D.haber), 0)
  INTO
    suma_efectivo_contabilidad
  FROM contab_diario_detalle AS D
  INNER JOIN contab_diario_cabecera AS C
    ON D.id_diario_cabecera = C.id
  WHERE
    D.cuenta_contable = cuenta_contable_caja
    AND C.fecha_comprobante = param_fecha;
    
  SELECT 
    IFNULL(SUM(A.efectivo), 0)
  INTO
    suma_efectivo_cierre_caja
  FROM apertura_caja AS A
  WHERE
    DATE(A.fecha_cierre) = param_fecha
    ;
  -- END efectivo

  -- documentos_por_cobrar
  SELECT
   IFNULL(SUM(D.debe - D.haber), 0)
  INTO
    suma_documentos_por_cobrar_contabilidad
  FROM contab_diario_detalle AS D
  INNER JOIN contab_diario_cabecera AS C
    ON D.id_diario_cabecera = C.id
  WHERE
    D.cuenta_contable = cuenta_contable_documento_por_cobrar
    AND C.fecha_comprobante = param_fecha;
    
  SELECT 
    IFNULL(SUM(A.cheque), 0)
  INTO
    suma_documentos_por_cobrar_cierre_caja
  FROM apertura_caja AS A
  WHERE
    DATE(A.fecha_cierre) = param_fecha
    ;
  -- END documentos_por_cobrar

  SELECT 'transbanck_debito', suma_transbanck_debito_contabilidad, suma_transbanck_debito_cierre_caja
    UNION ALL
  SELECT 'transbanck_credito', suma_transbanck_credito_contabilidad, suma_transbanck_credito_cierre_caja
    UNION ALL
  SELECT 'efectivo', suma_efectivo_contabilidad, suma_efectivo_cierre_caja
    UNION ALL
  SELECT 'cheques', suma_documentos_por_cobrar_contabilidad, suma_documentos_por_cobrar_cierre_caja;*/
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ingresoCaf` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `ingresoCaf`(
	IN `param_xml` LONGBLOB
,
	IN `param_size` BIGINT,
	IN `param_nombre` VARCHAR(100)



)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml_byte LONGBLOB DEFAULT param_xml;
    	 
    	 
    	 DECLARE xml TEXT DEFAULT CONVERT(param_xml USING utf8);
	    DECLARE fecha_generacion DATE DEFAULT ExtractValue(xml, '//CAF/DA/FA');
	    DECLARE nombre VARCHAR(100) DEFAULT param_nombre;
	    DECLARE rut_emisor VARCHAR(15) DEFAULT ExtractValue(xml, '//CAF/DA/RE');
	    DECLARE tipo_tde INT(11) DEFAULT ExtractValue(xml, '//CAF/DA/TD');
	    DECLARE fecha_asignacion DATETIME DEFAULT NOW();
	    DECLARE desde INT DEFAULT ExtractValue(xml, '//CAF/DA/RNG/D');
	    DECLARE hasta INT DEFAULT ExtractValue(xml, '//CAF/DA/RNG/H');
	    DECLARE firma VARCHAR(250) DEFAULT ExtractValue(xml, '//CAF/FRMA');
	    	    
	    
		 DECLARE id_caf int(11);
		 DECLARE folio int(11) DEFAULT desde;

		 INSERT INTO `hef_cafs` (`fecha_generacion`, `nombre`, `estado`, `ambiente`, `rut_emisor`, `tipo_tde`, `fecha_asignacion`, `desde`, `hasta`, `firma`, `xml`, `size`) VALUES (fecha_generacion, nombre, '0', 'C', rut_emisor, tipo_tde, fecha_asignacion, desde, hasta, firma, xml, param_size);
		 SET id_caf = LAST_INSERT_ID();
		 
	    WHILE folio <= hasta  DO
	   
	   	INSERT INTO `hef_cafs_folios` (`id_caf`, `rut_emisor`, `tipo_DTE`, `folio`, `fecha_carga`, `fecha_vencimiento`, `fecha_consumo`, `estado`) VALUES (id_caf, rut_emisor, tipo_tde, folio, fecha_asignacion, DATE(DATE_ADD(fecha_asignacion, INTERVAL 6 MONTH)), NULL, '0');
	     
	      SET folio = folio + 1;
	    END WHILE;
	   
	    SELECT "SUCCESS", "El grabado", "Fue existoso";
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarBanco` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarBanco`(
	IN `param_xml` TEXT







)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    DECLARE xml TEXT(5000) DEFAULT param_xml;
    DECLARE id int(11) DEFAULT ExtractValue(xml, '//DBanco/Id');DECLARE codigo varchar(150) DEFAULT ExtractValue(xml, '//DBanco/Codigo');DECLARE descripcion varchar(150) DEFAULT ExtractValue(xml, '//DBanco/Nombre');IF id = 0 THEN
      INSERT INTO bancos (cod_banco, `nom_banco`) VALUES (codigo, descripcion);SET id =  LAST_INSERT_ID();ELSE
      UPDATE bancos SET `cod_banco` = codigo , `nom_banco` = descripcion WHERE `id_bancos` = id;END IF;SELECT "SUCCESS", id;END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarCaja`(
	IN `param_xml` TEXT

)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    
      DECLARE numero_var int(11) DEFAULT ExtractValue(xml, '//DCaja/Numero');
	    DECLARE nombre_var char(50) DEFAULT ExtractValue(xml, '//DCaja/Nombre');
	    DECLARE id_sucursal_var int(11) DEFAULT ExtractValue(xml, '//DCaja/Id_sucursal');
      DECLARE monto_apertura_var int(11) DEFAULT ExtractValue(xml, '//DCaja/Monto_apertura');
      
      INSERT INTO cajas (`id_caja`, `nombre_caja`, `id_sucursal`, `monto_apertura`) VALUES (numero_var, nombre_var, id_sucursal_var, monto_apertura_var)
      ON DUPLICATE KEY UPDATE id_caja = numero_var, nombre_caja = nombre_var, id_sucursal = id_sucursal_var, monto_apertura = monto_apertura_var;

      SELECT "SUCCESS";
  END;
  
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarCiudad` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarCiudad`(
	IN `param_xml` TEXT






)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;
      ROLLBACK;END;
      DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;
      ROLLBACK;
      END;
  START TRANSACTION;
  BEGIN
    DECLARE xml TEXT(5000) DEFAULT param_xml;
    DECLARE id int(11) DEFAULT ExtractValue(xml, '//DCiudad/Id');
    DECLARE descripcion varchar(150) DEFAULT ExtractValue(xml, '//DCiudad/Nombre');
    
    IF id = 0 THEN
      INSERT INTO ciudades (`ciu_nombre`) VALUES (descripcion);
    SET id =  LAST_INSERT_ID();
    ELSE
      UPDATE ciudades SET `ciu_nombre` = descripcion WHERE `ciu_id` = id;
    END IF;
    
    SELECT "SUCCESS", id;
    END;
  COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarComprobanteContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarComprobanteContable`(
	IN `param_xml` TEXT
)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE xml TEXT(100000) DEFAULT param_xml;
    	
      DECLARE contador INT DEFAULT 1;
	    
      -- cabecera
      DECLARE id_var INT(11); 
      DECLARE tipo_var CHAR(1) DEFAULT ExtractValue(xml, '//DComprobanteContable/Tipo'); 
      DECLARE numero_var INT(11) DEFAULT ExtractValue(xml, '//DComprobanteContable/Numero'); 
      DECLARE fecha_var DATE DEFAULT ExtractValue(xml, '//DComprobanteContable/Fecha'); 
      DECLARE glosa_var VARCHAR(500) DEFAULT ExtractValue(xml, '//DComprobanteContable/Glosa'); 
      DECLARE vigente_var CHAR(1) DEFAULT ExtractValue(xml, '//DComprobanteContable/Vigente'); 
      
      -- general
      DECLARE contexto_var VARCHAR(200) DEFAULT 'insertarActualizarComprobanteContable';
      
      DECLARE id_doc_r_compra INT(11);
      DECLARE monto_pagado_var INT(11);

      -- detalle
      DECLARE id_detalle_d_var INT(11);
      DECLARE id_diario_cabecera_d_var INT(11);
      DECLARE cuenta_contable_d_var INT(11);
      DECLARE nombre_cuenta_d_var VARCHAR(50);
      DECLARE glosa_detalle_d_var VARCHAR(100);
      DECLARE debe_d_var INT(11);
      DECLARE haber_d_var INT(11);
      DECLARE tipo_documento_d_var INT(11);
      DECLARE numero_documento_d_var INT(11);
      DECLARE rut_d_var INT(11);
      DECLARE tipo_dte_ref_d_var VARCHAR(50);
      DECLARE numero_dte_ref_d_var VARCHAR(50);
      DECLARE fecha_documento_texto_d_var VARCHAR(20);
      DECLARE fecha_vencimiento_texto_d_var VARCHAR(20);
      DECLARE tipo_comprobante_d_var CHAR(1);
      DECLARE unidad_negocio INT(11);
      
      IF FUNCGetEstadoPeriodoContable(MONTH(fecha_var), YEAR(fecha_var)) = 1 THEN
        CALL errorCR(contexto_var, 'Este periodo ya esta cerrado', 'Y');
      END IF;
  
      IF numero_var <> 0 THEN 
      
            SET id_var = FUNCGetIDComprobante(tipo_var, numero_var, fecha_var);
            
            UPDATE contab_diario_cabecera 
            SET 
              `tipo_comprobante` = tipo_var, 
              `fecha_comprobante` = fecha_var,
              `numero_comprobante` = numero_var, 
              `glosa_comprobante` = glosa_var,
              `vigente` = vigente_var
            WHERE  `id` = id_var;
            -- se actualizan los montos de los documetos, solo si son son de egreso, revierte el pago
            IF tipo_var = 'E' THEN
              UPDATE contab_diario_detalle AS D
                INNER JOIN r_compra_sii AS E
                    ON E.tipo_doc = D.tipo_dte AND E.numero_doc = D.numero_dte AND E.rut = D.rut
                SET
                  E.monto_pagado = E.monto_pagado - ABS(D.debe - D.haber),
                  E.monto_adeudado = E.monto_adeudado + ABS(D.debe - D.haber)
                WHERE 
                  D.id_diario_cabecera = id_var
                   AND FUNCDocumentoTributarioDisponibleCompra(D.tipo_dte) = '1'; -- sin esto no funciona
            END IF;
            
            IF tipo_var = 'E' THEN
              CALL DesvincularPagoConCompra(id_var);
            END IF;
            
            -- antes de eliminar tengo que revertir en r_compra_sii
            DELETE FROM contab_diario_detalle WHERE `id_diario_cabecera` = id_var;
        
      ELSE 
            
            SET id_var = FUNCIDSiguienteCabeceraContable();
            SET numero_var = FUNCSiguienteNumeroComprobanteDesdeFecha(tipo_var, fecha_var);
            
            INSERT INTO contab_diario_cabecera 
            (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
            VALUES 
            (id_var, tipo_var, fecha_var, numero_var, glosa_var, vigente_var);
        
      END IF;
      
      WHILE ((contador < 500) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/CuentaContable')) != ''))  DO

        SET id_detalle_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Id'));
        SET id_diario_cabecera_d_var = id_var;
        SET cuenta_contable_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/CuentaContable'));
        SET glosa_detalle_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Glosa'));
        SET debe_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Debe'));
        SET haber_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Haber'));
        SET tipo_documento_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Tipo_documento'));
        SET numero_documento_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Numero_documento'));
        SET rut_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Rut'));
        SET tipo_dte_ref_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Tipo_documento_ref'));
        SET numero_dte_ref_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Numero_documento_ref'));
        SET tipo_comprobante_d_var = tipo_var;
        
        SET unidad_negocio = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Unidad_negocio'));
        
        SET fecha_documento_texto_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Fecha_emision'));
        SET fecha_vencimiento_texto_d_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleComprobanteContable[',contador,']/Fecha_vencimiento'));
               
        -- se inserta el detalle contable
        INSERT INTO contab_diario_detalle
        (`id`, `id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `tipo_documento`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `unidad_negocio`) 
        VALUES (id_detalle_d_var, id_diario_cabecera_d_var, cuenta_contable_d_var, glosa_detalle_d_var, debe_d_var, haber_d_var, tipo_documento_d_var, numero_documento_d_var, IF(rut_d_var = 0, NULL, rut_d_var), tipo_dte_ref_d_var, numero_dte_ref_d_var, FUNCFechaDesdeTexto(fecha_documento_texto_d_var), FUNCFechaDesdeTexto(fecha_vencimiento_texto_d_var), tipo_comprobante_d_var, unidad_negocio);
        
        -- se actualizan los montos de los documetos, solo si son son de egreso
        IF tipo_var = 'E' AND FUNCDocumentoTributarioDisponibleCompra(tipo_dte_ref_d_var) THEN
          SET id_doc_r_compra = (SELECT RC.id FROM r_compra_sii AS RC WHERE RC.numero_doc = numero_dte_ref_d_var AND RC.tipo_doc = tipo_dte_ref_d_var AND RC.rut = rut_d_var LIMIT 1);
          
          IF id_doc_r_compra IS NOT NULL THEN
          
            SET monto_pagado_var = ABS(debe_d_var - haber_d_var);
          
            UPDATE r_compra_sii AS RC 
            SET
              RC.monto_pagado = RC.monto_pagado + monto_pagado_var,
              RC.monto_adeudado = RC.monto_adeudado - monto_pagado_var
            WHERE 
              RC.id = id_doc_r_compra 
            LIMIT 1;
            
          ELSE
            CALL errorCR(contexto_var, CONCAT('No se encontro el movimiento en r_compra de numero: ', numero_dte_ref_d_var, ' tipo: ', tipo_dte_ref_d_var, ' rut: ', rut_d_var ), 'Y');
          END IF;
        
        END IF;
        
		    SET contador = contador + 1;
        
		  END WHILE;
      
      IF tipo_var = 'E' THEN
        CALL VincularPagoConCompra(id_diario_cabecera_d_var);
      END IF;  
	
		  SELECT 'SUCCESS', numero_var AS id;    
    
    END;
   
    COMMIT;    

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarComuna` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarComuna`(
	IN `param_xml` TEXT





)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    
  
  DECLARE xml TEXT(5000) DEFAULT param_xml;
    DECLARE id int(11) DEFAULT ExtractValue(xml, '//DComuna/Id_comuna');DECLARE comu_nombre char(50) DEFAULT ExtractValue(xml, '//DComuna/Comu_nombre');DECLARE reg_id int(11) DEFAULT ExtractValue(xml, '//DComuna/Reg_id');DECLARE ciu_id int(11) DEFAULT ExtractValue(xml, '//DComuna/Id_ciudad');IF id = 0 THEN
      INSERT INTO `comunas` (`comu_nombre`, `reg_id`) VALUES (comu_nombre, reg_id);SET id =  LAST_INSERT_ID();INSERT INTO `ciudcom` (`ciu_id`, `comu_id`) VALUES (ciu_id, id);ELSE
    
      UPDATE `comunas` SET  
			 `comu_nombre` = comu_nombre
			 WHERE `comunas`.`comu_id` = id;DELETE FROM `ciudcom` WHERE `ciudcom`.comu_id = id;INSERT INTO `ciudcom` (`ciu_id`, `comu_id`) VALUES (ciu_id, id);END IF;SELECT "SUCCESS", id;END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarConcepto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarConcepto`(
	IN `param_xml` TEXT









)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
        ROLLBACK;
   END;
   DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
        ROLLBACK;
   END;
        START TRANSACTION;
   BEGIN
    	DECLARE xml TEXT(10000) DEFAULT param_xml;
      

      DECLARE id_var INT(11) DEFAULT ExtractValue(xml, '//DConcepto/Id');
      DECLARE nombre_var VARCHAR(200) DEFAULT ExtractValue(xml, '//DConcepto/Nombre');
      DECLARE sigla_var CHAR(1) DEFAULT ExtractValue(xml, '//DConcepto/Sigla');
      DECLARE cuenta_contable_var VARCHAR(15) DEFAULT ExtractValue(xml, '//DConcepto/Cuenta_contable');
      
      IF id_var = 0 THEN
      
        IF (SELECT COUNT(*) FROM conceptos AS C WHERE C.sigla = sigla_var) > 0 THEN
          CALL error("Esta sigla ya esta registrada");
        END IF;
        
        INSERT INTO conceptos (`nombre`, `sigla`, `cuenta_contable`) 
        VALUES (nombre_var, sigla_var, cuenta_contable_var);
        SET id_var =  LAST_INSERT_ID();
      ELSE
      
        IF (SELECT COUNT(*) FROM conceptos AS C WHERE C.sigla = sigla_var AND C.id <> id_var) > 0 THEN
          CALL error("Esta sigla ya esta registrada");
        END IF;
        
        UPDATE conceptos 
        SET 
          `nombre`=nombre_var, 
          `sigla`=sigla_var,
          `cuenta_contable`=cuenta_contable_var
        WHERE  `id`=id_var;
      END IF;
      
    
    SELECT "SUCCESS", id_var AS id;
    
    END;
  COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarConceptoCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarConceptoCaja`(
	IN `param_xml` TEXT
)
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
        ROLLBACK;
   END;
   DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
        ROLLBACK;
   END;
        START TRANSACTION;
   BEGIN
    	DECLARE xml TEXT(10000) DEFAULT param_xml;
      

      DECLARE id_var INT(11) DEFAULT ExtractValue(xml, '//DConceptoCaja/Id');
      DECLARE nombre_var VARCHAR(200) DEFAULT ExtractValue(xml, '//DConceptoCaja/Nombre');
      DECLARE tipo_var CHAR(1) DEFAULT ExtractValue(xml, '//DConceptoCaja/Tipo');
      DECLARE cuenta_contable_var VARCHAR(15) DEFAULT ExtractValue(xml, '//DConceptoCaja/Cuenta_contable');
      
      IF id_var = 0 THEN
        
        INSERT INTO conceptos_ingresos_egresos_caja (`nombre`, `tipo`, `cuenta_contable`) 
        VALUES (nombre_var, tipo_var, cuenta_contable_var);
        SET id_var =  LAST_INSERT_ID();
      ELSE
        
        UPDATE conceptos_ingresos_egresos_caja 
        SET 
          `nombre`= nombre_var, 
          `tipo`= tipo_var,
          `cuenta_contable`= cuenta_contable_var
        WHERE  `id`= id_var;
      END IF;
      
    SELECT "SUCCESS", id_var AS id;
    
    END;
  COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarCuentaContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarCuentaContable`(
	IN `param_xml` TEXT




)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
        ROLLBACK;
        END;
  DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
        ROLLBACK;
        END;
        START TRANSACTION;
  
    BEGIN
    	DECLARE xml TEXT(5000) DEFAULT param_xml;

      DECLARE numero_cuenta_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContables/Numero_cuenta');
      DECLARE padre_cta_contable_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasContables/Padre_cta_contable_var');
      DECLARE nombre_var VARCHAR(200) DEFAULT ExtractValue(xml, '//DCuentasContables/Nombre');
      DECLARE habilitada_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Habilitada');
      DECLARE imputable_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Imputable');
      DECLARE centro_costo_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Centro_costo');
      DECLARE conciliacion_bancaria_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Conciliacion_bancaria');
      DECLARE capital_propio_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Capital_propio');
      DECLARE flu_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Flu');
      DECLARE ifrs_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Ifrs');
      DECLARE analisis_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Analisis');
      DECLARE form1847_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Form1847');
      DECLARE form29_var CHAR(1) DEFAULT ExtractValue(xml, '//DCuentasContables/Form29');
      
      INSERT INTO ctas_contables (`cta_contable`, `padre_cta_contable`, `descripcion`, `habilitada`, `imputable`, `centro_costo`, `conciliacion_bancaria`, `capital_propio`, `flu`, `ifrs`, `analisis`, `form1847`, `form29`) 
     VALUES (numero_cuenta_var, padre_cta_contable_var, nombre_var, habilitada_var, imputable_var, centro_costo_var, conciliacion_bancaria_var, capital_propio_var, flu_var, ifrs_var, analisis_var, form1847_var, form29_var)
     ON DUPLICATE KEY UPDATE `cta_contable` = numero_cuenta_var,
    
    `descripcion` = nombre_var,
    `habilitada` = habilitada_var,
    `imputable` = imputable_var,
    `centro_costo` = centro_costo_var,
    `conciliacion_bancaria` = conciliacion_bancaria_var,
    `capital_propio` = capital_propio_var,
    `flu` = flu_var,
    `ifrs` = ifrs_var,
    `analisis` = analisis_var,
    `form1847` = form1847_var,
    `form29`= form29_var;
    
    SELECT "SUCCESS";
  END;
COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarCuentaCorriente` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarCuentaCorriente`(
	IN `param_xml` TEXT
)
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
        ROLLBACK;
   END;
   DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
        ROLLBACK;
   END;
        START TRANSACTION;
   BEGIN
    	DECLARE xml TEXT(10000) DEFAULT param_xml;
      

      DECLARE id_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasBancarias/Id');
      DECLARE cuenta_corriente_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasBancarias/Cuenta_corriente');
      DECLARE cuenta_contable_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasBancarias/Cuenta_contable');
      DECLARE saldo_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasBancarias/Saldo');
      DECLARE id_banco_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasBancarias/Id_banco');
      DECLARE id_moneda_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasBancarias/Id_moneda');
      DECLARE saldo_contable_var INT(11) DEFAULT ExtractValue(xml, '//DCuentasBancarias/Saldo_contable');
      
      IF id_var = 0 THEN
      
        IF (SELECT COUNT(*) FROM ctas_ctes_bancos AS C WHERE C.num_cta_cte = cuenta_corriente_var AND C.id_bancos = id_banco_var) > 0 THEN
          CALL error("El numero de cuenta para este banco ya esta registrado");
        END IF;
        
        IF (SELECT COUNT(*) FROM ctas_ctes_bancos AS C WHERE C.cta_contable = cuenta_contable_var) > 0 THEN
          CALL error("El numero de cuenta contable para esta cuenta ya esta registrado");
        END IF;
        
        INSERT INTO ctas_ctes_bancos (`id_bancos`, `num_cta_cte`, `saldo_ini_cta_cte`, `cta_contable`, id_moneda, saldo_contable) 
        VALUES (id_banco_var, cuenta_corriente_var, saldo_var, cuenta_contable_var, id_moneda_var, saldo_contable_var);
        SET id_var =  LAST_INSERT_ID();
      ELSE
      
        IF (SELECT COUNT(*) FROM ctas_ctes_bancos AS C WHERE C.num_cta_cte = cuenta_corriente_var AND C.id_bancos = id_banco_var AND C.id_cta_cte_banco != id_var) > 0 THEN
          CALL error("El numero de cuenta para este banco ya esta registrado");
        END IF;
        
        IF (SELECT COUNT(*) FROM ctas_ctes_bancos AS C WHERE C.cta_contable = cuenta_contable_var AND C.id_cta_cte_banco != id_var) > 0 THEN
          CALL error("El numero de cuenta contable para esta cuenta ya esta registrado");
        END IF;
        
        UPDATE ctas_ctes_bancos 
        SET 
          `id_bancos`=id_banco_var, 
          `num_cta_cte`=cuenta_corriente_var,
          `saldo_ini_cta_cte`=saldo_var, 
          `id_moneda`=id_moneda_var, 
          `cta_contable`=cuenta_contable_var,
          saldo_contable = saldo_contable_var
        WHERE  `id_cta_cte_banco`=id_var;
      END IF;
      
    
    SELECT "SUCCESS", id_var AS id;
    
    END;
  COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarMarca` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarMarca`(
	IN `param_xml` TEXT



)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    DECLARE xml TEXT(5000) DEFAULT param_xml;
    DECLARE id int(11) DEFAULT ExtractValue(xml, '//DMarcas/Id');DECLARE descripcion varchar(150) DEFAULT ExtractValue(xml, '//DMarcas/Descripcion');IF id = 0 THEN
      INSERT INTO marcas (`desc_marcas`) VALUES (descripcion);SET id =  LAST_INSERT_ID();ELSE
      UPDATE marcas SET `desc_marcas` = descripcion WHERE  `id_marcas` = id;END IF;SELECT "SUCCESS", id;END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarMoneda` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarMoneda`(
	IN `param_xml` TEXT



)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    DECLARE xml TEXT(5000) DEFAULT param_xml;
    DECLARE id_var int(11) DEFAULT ExtractValue(xml, '//DMoneda/Id');DECLARE descripcion varchar(150) DEFAULT ExtractValue(xml, '//DMoneda/Descripcion');IF id_var = 0 THEN
      INSERT INTO monedas (`nombre`) VALUES (descripcion);SET id_var =  LAST_INSERT_ID();ELSE
      UPDATE monedas SET `nombre` = descripcion WHERE id = id_var;END IF;SELECT "SUCCESS", id_var AS id;END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarMovCaja` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `insertarActualizarMovCaja`(
	IN `param_xml` TEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
       DECLARE contador int(11) DEFAULT 1;
    	
	    
      DECLARE numero int(11) DEFAULT ExtractValue(xml, '//DCaja/Numero');
	    DECLARE correlativo int(11) DEFAULT ExtractValue(xml, '//DCaja/Correlativo');
      
      DECLARE id_caja_abierta int(11);
      DECLARE correlativo_caja_abierta int(11);
      
      
      DECLARE tipo_detalle int(11); 
      DECLARE descripcion_detalle varchar(50) DEFAULT '';
      DECLARE monto int(11) DEFAULT 0;
      DECLARE numero_mov int(11)DEFAULT 0;
      DECLARE comentario varchar(100) DEFAULT '';
      DECLARE rut varchar(100) DEFAULT '';
      DECLARE fecha DATE;
      
      
      SET id_caja_abierta = (SELECT A.id_apertura FROM apertura_caja AS A WHERE A.id_caja = numero AND A.correlativo = correlativo LIMIT 1);
          
      
      IF id_caja_abierta IS NOT NULL THEN
        
      DELETE FROM det_movimientos_caja WHERE  `id_apertura_caja` = id_caja_abierta; 
      WHILE (ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Tipo')) != '')  DO
		   	
				SET tipo_detalle = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Tipo'));
        SET descripcion_detalle = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Descripcion'));
        SET monto = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Monto'));
        SET numero_mov = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Numero_documento'));
        SET comentario = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Comentario'));
        SET rut = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Rut'));
        SET fecha = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Fecha'));
		   	
		   	INSERT INTO det_movimientos_caja (`id_apertura_caja`, `id_tipo_detalle_mov_caja`, `descripcion_mov_caja`, `monto_mov_caja`, `num_documento`, `comentario`, `rut`, `fecha`) 
        VALUES (id_caja_abierta, tipo_detalle, descripcion_detalle, monto, numero_mov, comentario, rut, fecha);
		     
		    SET contador = contador + 1;
		    
      END WHILE;
      
      
        SELECT "SUCCESS", "", "";
      ELSE
        SELECT "No se encontro la caja", "", "";
      END IF;

      
  END;
    
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarMovCaja4` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `insertarActualizarMovCaja4`(
	IN `param_xml` TEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
       DECLARE contador int(11) DEFAULT 1;
    	
	    
      DECLARE numero int(11) DEFAULT ExtractValue(xml, '//DCaja/Numero');
	    DECLARE correlativo int(11) DEFAULT ExtractValue(xml, '//DCaja/Correlativo');
      
      DECLARE id_caja_abierta int(11);
      DECLARE correlativo_caja_abierta int(11);
      
      
      DECLARE id_concepto_var int(11); 
      DECLARE descripcion_detalle varchar(50) DEFAULT '';
      DECLARE monto int(11) DEFAULT 0;
      DECLARE numero_mov int(11)DEFAULT 0;
      DECLARE comentario varchar(100) DEFAULT '';
      DECLARE rut varchar(100) DEFAULT '';
      DECLARE fecha DATE;
      
      
      SET id_caja_abierta = (SELECT A.id_apertura FROM apertura_caja AS A WHERE A.id_caja = numero AND A.correlativo = correlativo LIMIT 1);
          
      
      IF id_caja_abierta IS NOT NULL THEN
        
      DELETE FROM det_movimientos_caja WHERE  `id_apertura_caja` = id_caja_abierta; 
      WHILE (ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Id_concepto')) != '')  DO
		   	
				SET id_concepto_var = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Id_concepto'));
        SET descripcion_detalle = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Descripcion'));
        SET monto = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Monto'));
        SET numero_mov = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Numero_documento'));
        SET comentario = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Comentario'));
        SET rut = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Rut'));
        SET fecha = ExtractValue(xml , CONCAT('//Detalle_movimiento_caja/DDetalleMovimientoCaja[',contador,']/Fecha'));
		   	
		   	INSERT INTO det_movimientos_caja (`id_apertura_caja`, `id_concepto_caja`, `descripcion_mov_caja`, `monto_mov_caja`, `num_documento`, `comentario`, `rut`, `fecha`, `tipo_detalle_mov_caja`) 
        VALUES (id_caja_abierta, id_concepto_var, descripcion_detalle, monto, numero_mov, comentario, rut, fecha, (SELECT C.tipo FROM conceptos_ingresos_egresos_caja AS C WHERE C.id = id_concepto_var LIMIT 1));
		     
		    SET contador = contador + 1;
		    
      END WHILE;
      
      
        SELECT "SUCCESS", "", "";
      ELSE
        SELECT "No se encontro la caja", "", "";
      END IF;

      
  END;
    
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarRegion` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarRegion`(
	IN `param_xml` TEXT



)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    DECLARE xml TEXT(5000) DEFAULT param_xml;
    DECLARE id int(11) DEFAULT ExtractValue(xml, '//DRegion/Id');DECLARE descripcion varchar(150) DEFAULT ExtractValue(xml, '//DRegion/Nombre');IF id = 0 THEN
      INSERT INTO regiones (`reg_nombre`) VALUES (descripcion);SET id =  LAST_INSERT_ID();ELSE
      UPDATE regiones SET `reg_nombre` = descripcion WHERE `reg_id` = id;END IF;SELECT "SUCCESS", id;END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarUnidad` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarUnidad`(
	IN `param_xml` TEXT
)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;
      ROLLBACK;
  END; 
  DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;
      ROLLBACK;
  END;
  
  START TRANSACTION;
	 
  BEGIN
    DECLARE xml TEXT(5000) DEFAULT param_xml;
    
        
    DECLARE id int(11) DEFAULT ExtractValue(xml, '//DUnidad/Id');
    DECLARE descripcion varchar(150) DEFAULT ExtractValue(xml, '//DUnidad/Descripcion');

    IF id = 0 THEN
      INSERT INTO unidades (`desc_unidades`) VALUES (descripcion);
      SET id =  LAST_INSERT_ID();
    ELSE
      UPDATE unidades SET `desc_unidades` = descripcion WHERE  `id_unidades` = id;
    END IF;

    
    SELECT "SUCCESS", id;
  
  END;
  
  COMMIT; 
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarUnidadNegocio` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarUnidadNegocio`(
	IN `param_xml` TEXT









)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;
      ROLLBACK;
  END;
      DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;
      ROLLBACK;
  END;
  START TRANSACTION;
  BEGIN
    DECLARE xml TEXT(5000) DEFAULT param_xml;
    DECLARE id_var int(11) DEFAULT ExtractValue(xml, '//DUnidadNegocio/Id');
    DECLARE descripcion_var varchar(150) DEFAULT ExtractValue(xml, '//DUnidadNegocio/Descripcion');
    
    IF id_var = 0 THEN
      INSERT INTO unidades_negocio (`descripcion`) VALUES (descripcion_var);
    SET id_var =  LAST_INSERT_ID();
    ELSE
      UPDATE unidades_negocio SET `descripcion` = descripcion_var WHERE `id` = id_var;
    END IF;
    
    SELECT "SUCCESS", id_var AS id;
    END;
  COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarActualizarVendedor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarActualizarVendedor`(
	IN `param_xml` TEXT











)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;
      ROLLBACK;
  END;
  DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;
      ROLLBACK;
  END;
    START TRANSACTION;
  BEGIN
    DECLARE xml TEXT(10000) DEFAULT param_xml;
    
    
    DECLARE id_var int(11) DEFAULT ExtractValue(xml, '//DVendedor/Id');
    DECLARE iniciales_var varchar(150) DEFAULT ExtractValue(xml, '//DVendedor/Iniciales');
    DECLARE nombre_var varchar(150) DEFAULT ExtractValue(xml, '//DVendedor/Nombres');
    
    IF id_var = 0 THEN
      INSERT INTO vendedores (nombrecorto, `nombrelargo`) VALUES (iniciales_var, nombre_var);
      SET id_var =  LAST_INSERT_ID();
    ELSE
      UPDATE vendedores SET `nombrecorto` = iniciales_var , `nombrelargo` = nombre_var WHERE `id` = id_var;
    END IF;
    
    SELECT "SUCCESS", id_var AS id;
  END;
  COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarAperturaCajaXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarAperturaCajaXML`(
	IN `param_xml` TEXT



)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE xml TEXT(30000) DEFAULT param_xml;
    	
	    
      DECLARE numero int(11) DEFAULT ExtractValue(xml, '//DCaja/Numero');
	    DECLARE correlativo int(11) DEFAULT ExtractValue(xml, '//DCaja/Correlativo');
	    DECLARE monto_apertura float(11,4) DEFAULT ExtractValue(xml, '//DCaja/Monto_apertura');
      
      DECLARE tipo_detalle int(11) DEFAULT ExtractValue(xml, '//DCaja/Detalle_movimiento_caja/DDetalleMovimientoCaja/Tipo');
      DECLARE descripcion_detalle varchar(50) DEFAULT ExtractValue(xml, '//DCaja/Detalle_movimiento_caja/DDetalleMovimientoCaja/Descripcion');
      
      DECLARE id_caja_abierta int(11);
      DECLARE correlativo_caja_abierta int(11);
      DECLARE fecha_caja_abierta DATETIME;
      DECLARE monto_apertura_caja_abierta float(11,4);
      
      
      
      

      SET id_caja_abierta = (SELECT A.id_apertura FROM apertura_caja AS A WHERE A.id_caja = numero AND A.fecha_cierre IS NULL LIMIT 1);
          
      IF id_caja_abierta IS NOT NULL THEN
        SELECT A.correlativo, A.fecha_apertura, A.monto_apertura INTO correlativo_caja_abierta, fecha_caja_abierta, monto_apertura_caja_abierta FROM apertura_caja AS A WHERE A.id_apertura = id_caja_abierta; 
      END IF;
      
      IF correlativo_caja_abierta IS NULL THEN
        INSERT INTO apertura_caja (`id_caja`, correlativo, `monto_apertura`)
        VALUES (numero, correlativo , monto_apertura);
        
        
        
        
        SELECT "SUCCESS", "", "", 0, DATE_FORMAT(fecha_caja_abierta, "%d-%m-%Y") AS fecha_apertura, monto_apertura_caja_abierta;
      ELSE
        
        SELECT CONCAT("La caja ", correlativo_caja_abierta, " ya esta abierta"), "", "", correlativo_caja_abierta, DATE_FORMAT(fecha_caja_abierta, "%d-%m-%Y") AS fecha_apertura, monto_apertura_caja_abierta;
      END IF;

      
  END;
    
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarAperturaCajaXML3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `insertarAperturaCajaXML3`(
	IN `param_xml` TEXT

)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE xml TEXT(30000) DEFAULT param_xml;
    	
	    
      DECLARE numero int(11) DEFAULT ExtractValue(xml, '//DCaja/Numero');
	    DECLARE correlativo int(11) DEFAULT ExtractValue(xml, '//DCaja/Correlativo');
	    DECLARE monto_apertura float(11,4) DEFAULT ExtractValue(xml, '//DCaja/Monto_apertura');
      
      DECLARE id_caja_abierta int(11);
      DECLARE correlativo_caja_abierta int(11);
      DECLARE fecha_caja_abierta DATETIME;
      DECLARE monto_apertura_caja_abierta float(11,4);
      
      
      
      

      SET id_caja_abierta = (SELECT A.id_apertura FROM apertura_caja AS A WHERE A.id_caja = numero AND A.fecha_cierre IS NULL LIMIT 1);
          
      IF id_caja_abierta IS NOT NULL THEN
        SELECT A.correlativo, A.fecha_apertura, A.monto_apertura INTO correlativo_caja_abierta, fecha_caja_abierta, monto_apertura_caja_abierta FROM apertura_caja AS A WHERE A.id_apertura = id_caja_abierta; 
      END IF;
      
      IF correlativo_caja_abierta IS NULL THEN
        INSERT INTO apertura_caja (`id_caja`, correlativo, `monto_apertura`)
        VALUES (numero, correlativo , monto_apertura);
        
        
        
        
        SELECT "SUCCESS", "", "", 0, DATE_FORMAT(fecha_caja_abierta, "%d-%m-%Y") AS fecha_apertura, monto_apertura_caja_abierta;
      ELSE
        
        SELECT CONCAT("La caja ", correlativo_caja_abierta, " ya esta abierta"), "", "", correlativo_caja_abierta, DATE_FORMAT(fecha_caja_abierta, "%d-%m-%Y") AS fecha_apertura, monto_apertura_caja_abierta;
      END IF;

      
  END;
    
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarBodegas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarBodegas`(
	IN `param_xml` TEXT






)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    
	    DECLARE id_var int(11);
	    DECLARE id_sucursal_var int(11) DEFAULT ExtractValue(xml, '//DBodega/Id_sucursal');
	    DECLARE numero_bodega_var int(11) DEFAULT ExtractValue(xml, '//DBodega/Numero_bodega');
	    DECLARE nombre_bodega_var char(100) DEFAULT ExtractValue(xml, '//DBodega/Nombre_bodega');
	    DECLARE estado_bodega_var char(1) DEFAULT ExtractValue(xml, '//DBodega/Estado_bodega');

      IF (SELECT B.id FROM bodegas AS B WHERE B.numero_bodega = numero_bodega_var AND B.id_sucursal = id_sucursal_var LIMIT 1) IS NOT NULL THEN
        call error('El numero de bodega ya esta registrado');
      END IF;
      
      INSERT INTO `bodegas` (`id_sucursal`, `numero_bodega`, `nombre_bodega`, `estado_bodega`) VALUES (id_sucursal_var, numero_bodega_var, nombre_bodega_var, estado_bodega_var); 
      SET id_var = LAST_INSERT_ID(); 
      
      INSERT INTO stock_bodegas ( `id_producto`, `codigo_actual`, `id_bodega`) 
                        SELECT P.id_producto, P.codigo_actual, id_var FROM productos AS P;
    
      SELECT "SUCCESS", id_var AS id;
  END;
  
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarChequera` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarChequera`(
	IN `param_id_banco` INT,
	IN `param_id_cuenta_bancaria` INT,
	IN `param_inical` INT,
	IN `param_final` INT




)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;
      ROLLBACK;
  END; 
  DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;
      ROLLBACK;
  END;
  
  START TRANSACTION;
	 
  BEGIN

    DECLARE id_cuenta_bancaria_var INT(11) DEFAULT param_id_cuenta_bancaria;
    DECLARE inicial_var INT(11) DEFAULT param_inical;
    DECLARE final_var INT(11) DEFAULT param_final;
    
    DECLARE nombre_banco VARCHAR(250);
    
    DECLARE id_chequera INT(11) DEFAULT IFNULL((SELECT MAX(C.id) + 1 FROM chequeras AS C) , 1);
    
    DECLARE cheques_ingresados INT(11) DEFAULT (SELECT COUNT(*) FROM cheques_chequera AS CH WHERE CH.id_cta_cte_banco = id_cuenta_bancaria_var AND CH.num_cheque BETWEEN inicial_var AND final_var);
      
    IF cheques_ingresados > 0 THEN
      CALL error("Ya fue ingresado este intervalo");
    END IF;
    
    INSERT INTO chequeras (id, `id_cta_cte_banco`, `numero_inicial`, `numero_final`) 
    VALUES (id_chequera, id_cuenta_bancaria_var, inicial_var, final_var);
    
    WHILE inicial_var <= final_var DO
    
      INSERT INTO cheques_chequera (num_cheque, chequera_id, id_cta_cte_banco, fecha_carga)
                            VALUES (inicial_var, id_chequera, id_cuenta_bancaria_var, NOW());
      
      IF (SELECT COUNT(*) FROM cabecera_pago_proveedores AS R 
                              WHERE 
                                R.num_cheque = inicial_var
                                AND R.id_cta_cte_banco = param_id_cuenta_bancaria
                                ) = 0 THEN
             
                                
        INSERT INTO cabecera_pago_proveedores (`id_cta_cte_banco`, `num_cheque`) 
        VALUES (id_cuenta_bancaria_var, inicial_var);
                                  
      END IF;
    
    SET inicial_var = inicial_var + 1;
    END WHILE;
    
    SELECT "SUCCESS";

  
  END;
  
  COMMIT; 
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarCiudades` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarCiudades`(
	IN `param_xml` TEXT








)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
       
       	    
      DECLARE ciu_id int(11) DEFAULT ExtractValue(xml, '//DCiudad/Id');
	    DECLARE ciu_nombre char(50) DEFAULT ExtractValue(xml, '//DCiudad/Nombre');
	    DECLARE pais_id int(11) DEFAULT ExtractValue(xml, '//DCiudad/Id_pais');

      INSERT INTO `ciudades` (`ciu_nombre`, `pais_id`) VALUES (ciu_nombre, pais_id);
      
      
      SELECT "SUCCESS", ciu_id AS id, pais_id AS id_pais;
      
    END;
   
    COMMIT; 
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarComunas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarComunas`(
	IN `param_xml` TEXT


)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
       
       	    
      DECLARE comu_id int(11);
	    DECLARE comu_nombre char(50) DEFAULT ExtractValue(xml, '//DComuna/Comu_nombre');
	    DECLARE reg_id int(11) DEFAULT ExtractValue(xml, '//DComuna/Reg_id');
	    DECLARE comu_orden int(11) DEFAULT ExtractValue(xml, '//DComuna/Comu_orden');
      DECLARE ciu_id int(11) DEFAULT ExtractValue(xml, '//DComuna/Id_ciudad');
     
      
      INSERT INTO `comunas` (`comu_nombre`, `reg_id`, `comu_orden`) VALUES (comu_nombre, reg_id, comu_orden);
      SET comu_id = LAST_INSERT_ID(); 
      
      INSERT INTO `ciudcom` (`ciu_id`, `comu_id`) VALUES (ciu_id, comu_id);
      
      SELECT "SUCCESS",comu_id AS id_comuna;
      
    END;
   
    COMMIT; 
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarCotizacionXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarCotizacionXML`(
	IN `param_xml` TEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(10000) DEFAULT param_xml;
    	 DECLARE contador int(11) DEFAULT 1;
    	 
	    
	    
	    DECLARE id int(11) DEFAULT (SELECT IFNULL(max(id) + 1, 1) FROM encabezado_cotizaciones);
	    DECLARE rut char(11) DEFAULT ExtractValue(xml, '//DCotizaciones/Rut');
	    DECLARE dv	char(1) DEFAULT ExtractValue(xml, '//DCotizaciones/Dv');
	    DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DCotizaciones/Razon_social');
	    DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DCotizaciones/Giro');
	    DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DCotizaciones/Direccion');
	    DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DCotizaciones/Comuna');
	    DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DCotizaciones/Cuiudad');
	    DECLARE sucursal	int(11);
	    DECLARE id_lista_precio int(11);
      DECLARE bodega int(11);
	    DECLARE subtotal	int(11) DEFAULT ExtractValue(xml, '//DCotizaciones/Subtotal');
	    DECLARE descuento int(11) DEFAULT ExtractValue(xml, '//DCotizaciones/Descuento');
      DECLARE porcentaje_desc int(11) DEFAULT ExtractValue(xml, '//DCotizaciones/Porcentaje_descuento');
	    DECLARE neto int(11) DEFAULT ExtractValue(xml, '//DCotizaciones/Neto');
	    DECLARE iva_porcentaje	int(11) DEFAULT ExtractValue(xml, '//DCotizaciones/Iva_porcentaje');
	    DECLARE monto_iva int(11) DEFAULT ExtractValue(xml, '//DCotizaciones/Monto_iva');
	    DECLARE total_documento int(11) DEFAULT ExtractValue(xml, '//DCotizaciones/Total_docuemnto');
	    DECLARE fecha_documento Date DEFAULT DATE_FORMAT(NOW(),'%Y-%m-%d');
	    DECLARE vendedor	char(1) DEFAULT ExtractValue(xml, '//DCotizaciones/Vendedor');
	    DECLARE codigo_empresa	char(1) DEFAULT ExtractValue(xml, '//DCotizaciones/Codigo_empresa');
	    DECLARE tipo_precio	char(1) DEFAULT ExtractValue(xml, '//DCotizaciones/Tipo_precio');
	    DECLARE estado int(11) DEFAULT 0;
	    
	    
		 DECLARE id_encabezado int(11);
		 DECLARE codigo_producto varchar(20);
		 DECLARE descripcion varchar(100);
		 DECLARE unidad_venta int(11);
		 DECLARE cantidad int(11);
		 DECLARE precio_venta int(11);
		 DECLARE precio_sin_iva int(11);
		 DECLARE precio_con_iva int(11);
		 DECLARE porcentaje_descuento int(11);
		 DECLARE monto_descuento int(11);
		 DECLARE neto_linea int(11);
		 DECLARE iva_linea int(11);
		 DECLARE pmp_linea int(11);
		 DECLARE total_linea int(11);
		 DECLARE fecha varchar(100);


  
    SET sucursal = idSucursalDesdeMac(ExtractValue(xml, '//DCotizaciones/Sesion/Mac'));
    
    
    SET bodega = idBodegaDesdeSucursal(sucursal);
    
    
    
    IF rut != '' AND rut != "66666666" THEN
      SET id_lista_precio = (SELECT C.listasprecios FROM proveedores AS C WHERE C.rut = rut LIMIT 1);
    END IF;
    
    IF id_lista_precio IS NULL THEN
      SET id_lista_precio = (SELECT S.id_lista_precio FROM sucursales AS S WHERE S.id = sucursal LIMIT 1);
    END IF;
	    
	   INSERT INTO `encabezado_cotizaciones` (`id`, `fecha_documento`, `rut`, `dv`, `razon social`, `giro`, `direccion`, `comuna`, `ciudad`, `sucursal`, `listasprecios`, `subtotal`, `descuento`, porcentaje_desc, `neto`, `iva_porcentaje`, `monto iva`, `total_documento`, `vendedor`, `codigo_empresa`, `tipo_precio`, `id_nota_venta`) 
			VALUES  										(id, fecha_documento, 		rut,  dv,   razon_social,   giro,    direccion,   comuna ,  ciudad , sucursal,   id_lista_precio,   subtotal,   descuento, porcentaje_desc,  neto,   iva_porcentaje,   monto_iva,   total_documento,   vendedor,   codigo_empresa,   tipo_precio,   estado);
			 
		   WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[',contador,']/Linea')) != ''))  DO
		   
		   	
		   	SET id_encabezado = id;
				SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Codigo_producto'));
				SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Descripcion'));
				SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Unidad_venta'));
				SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Cantidad'));
				SET precio_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Precio_venta'));
				SET precio_sin_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Precio_sin_iva'));
				SET precio_con_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Precio_con_iva'));
				SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Porcentaje_descuento'));
				SET monto_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Monto_descuento'));
				SET neto_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Neto_linea'));
				SET iva_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Iva_linea'));
				SET pmp_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Pmp_linea'));
				SET total_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Total_linea'));
				SET fecha = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCotizacion[', contador ,']/Fecha'));
		   
		   	
		   	INSERT INTO `detalle_cotizaciones` 
				(`id_encabezado`, `codigo_producto`, `descripcion`, `unidad_venta`, `cantidad`, `precio_venta`, `precio_sin_iva`, `precio_con_iva`, `porcentaje_descuento`, `monto_descuento`, `neto_linea`, `iva_linea`, `pmp_linea`, `total_linea`, `fecha`) VALUES 
				(id_encabezado,    codigo_producto,   descripcion,  unidad_venta,    cantidad,   precio_venta,   precio_sin_iva,   precio_con_iva,   porcentaje_descuento,   monto_descuento,   neto_linea,   iva_linea,   pmp_linea, total_linea,   fecha);
		     
		      SET contador = contador + 1;
		    
		   END WHILE;
		   
		   SELECT "SUCCESS", id;
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarIngresoGuiaXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarIngresoGuiaXML`(
	IN `param_xml` TEXT


)
BEGIN
     DECLARE EXIT HANDLER FOR SQLEXCEPTION
     BEGIN
          SHOW ERRORS LIMIT 1;
          ROLLBACK;
     END; 
     DECLARE EXIT HANDLER FOR SQLWARNING
     BEGIN
          SHOW WARNINGS LIMIT 1;
          ROLLBACK;
     END;

     START TRANSACTION;
     
    BEGIN
        DECLARE xml TEXT(10000) DEFAULT param_xml;
        
        DECLARE contador INT DEFAULT 1;
        
        
        
        DECLARE id int(11);
        DECLARE id_guia int(11);
        DECLARE tipo_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_documento');
        DECLARE numero_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Numero_folio');
        DECLARE fecha_documento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_documento');
        DECLARE rut int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Rut');
        DECLARE dv  char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Dv');
        DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Razon_social');
        DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Giro');
        DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Direccion');
        DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Comuna');
        DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Cuiudad');
        DECLARE subtotal    int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Subtotal');
        DECLARE descuento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Descuento');
        DECLARE porcentaje_descuento_global int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Porcentaje_descuento');
        DECLARE neto int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Neto');
        DECLARE iva_porcentaje  int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Iva_porcentaje');
        DECLARE monto_iva int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_iva');
        DECLARE total_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Total_docuemnto');
        DECLARE hora DateTime DEFAULT NOW();
        DECLARE tipo_precio char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_precio');
        
      
        DECLARE movimiento char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Movimiento'));
        DECLARE origen char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Origen'));
        DECLARE monto_pagar int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagar');
        DECLARE monto_pagado_encabezado int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagado');
      
        DECLARE fecha_encabezado VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha');
        DECLARE fecha_recepcion VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_recepcion');
      
        DECLARE monto_adeudado int(11) DEFAULT (monto_pagar - monto_pagado_encabezado);
        DECLARE vinculacion int(11) DEFAULT 0;
      
      
        DECLARE bodega int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Bodega');
                                  
        
        
         DECLARE id_producto int(11);
         DECLARE id_producto_referenciado int(11);
         DECLARE id_encabezado int(11);
         DECLARE linea int(11);
         DECLARE codigo_producto varchar(20);
         DECLARE descripcion varchar(100);
         DECLARE unidad_venta int(11);
         DECLARE cantidad float(18,4);
         DECLARE precio_venta float(18,4);
         DECLARE precio_sin_iva float(18,4);
         DECLARE precio_con_iva float(18,4);
         DECLARE porcentaje_descuento int(11);
         DECLARE monto_descuento float(18,4);
         DECLARE neto_linea float(18,4);
         DECLARE iva_linea float(18,4);
         DECLARE pmp_linea float(18,4);
         DECLARE pmp float(18,4);
         DECLARE total_linea float(18,4);
         DECLARE total_mostrar float(18,4);
         DECLARE fecha varchar(100);
         DECLARE neto_xml float(18,4);
         DECLARE monto_descuento_xml float(18,4);   
         DECLARE stock_bodega float(18,4);
         DECLARE id_stock_bodega int(11);
  
         DECLARE producto_costo_pmp decimal(18,4);
         DECLARE producto_stock_general float(18,4);
         DECLARE producto_stock_valorizado decimal(18,4);
         
         DECLARE id_movimiento_referencia char(1);
          
      SET @mensaje_de_error = '';
      
      SELECT IFNULL(E.id_movimiento_referencia, 0), E.id INTO id_movimiento_referencia, id_guia FROM encabezado_movimientos_guias AS E WHERE E.numero_documento = numero_documento LIMIT 1;
      
    IF id_movimiento_referencia = '0' THEN
       
            INSERT INTO encabezado_movimientos_ingreso_guias 
                    (`id`, 
                    `tipo_documento`, 
                    `numero_documento`,  
                    `fecha_documento`, 
                    `rut`, 
                    `dv`,
                    `razon social`, 
                    `giro`, 
                    `direccion`, 
                    `comuna`, 
                    `ciudad`, 
                    `bodega`,  
                    `subtotal`, 
                    `descuento`, 
                    `neto`, 
                    `iva_porcentaje`, 
                    `monto iva`, 
                    `total_documento`,  
                    `hora`,    
                    `movimiento`,
                    `origen`,
                    monto_pagar,
                    monto_pagado,
                    monto_adeudado,
                    fecha,
                    fecha_recepcion
                    ) 
                    VALUES (id, 
                    52, 
                    numero_documento,
                    fecha_documento, 
                    rut, 
                    dv, 
                    razon_social, 
                    giro, 
                    direccion, 
                    comuna , 
                    ciudad , 
                    bodega, 
                    subtotal, 
                    descuento, 
                    neto, 
                    iva_porcentaje, 
                    monto_iva, 
                    total_documento, 
                    hora, 
                    movimiento,
                    origen,
                    monto_pagar,
                    monto_pagado_encabezado,
                    monto_adeudado,
                    fecha_encabezado,
                    fecha_recepcion
                    );
          
       SET id = LAST_INSERT_ID();
       
       UPDATE encabezado_movimientos_guias AS F SET F.`id_movimiento_referencia`='1' WHERE F.id = id_guia;
             
           WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[',contador,']/Linea')) != ''))  DO
           
            
            SET id_encabezado = id;
                SET linea = contador;
                SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Codigo_producto'));
                SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Descripcion'));
                SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Unidad_venta'));
                SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Cantidad'));
                SET precio_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_venta'));
                SET precio_sin_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_sin_iva'));
                SET precio_con_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_con_iva'));
                SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Porcentaje_descuento'));
                SET monto_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento'));
                SET neto_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_linea'));
                SET iva_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Iva_linea'));
                SET pmp = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Pmp'));
                SET pmp_linea = pmp * cantidad;
                SET total_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_linea'));
                SET fecha = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Fecha'));
                SET neto_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_xml'));
                SET monto_descuento_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento_xml'));
                SET total_mostrar = ExtractValue(xml, CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_mostrar'));
        
        
        SET id_producto = idProductoDesdeCodigo(codigo_producto);
                    
        
        SELECT P.costo_pmp, P.stock_general, P.stock_valorizado INTO producto_costo_pmp, producto_stock_general, producto_stock_valorizado FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
      
        
        SET neto_xml = ROUND(neto_linea, 4);
        
        SET producto_stock_general = producto_stock_general + cantidad;
        SET producto_stock_valorizado = ROUND(producto_stock_valorizado + neto_xml, 4);
        SET producto_costo_pmp = ROUND(producto_stock_valorizado/producto_stock_general, 4);
        
        UPDATE productos AS P SET P.costo_pmp = producto_costo_pmp, P.stock_general = producto_stock_general, P.stock_valorizado = producto_stock_valorizado WHERE P.id_producto = id_producto;
        
        SELECT S.stock , S.id_stock_bodega INTO stock_bodega, id_stock_bodega FROM stock_bodegas AS S WHERE  S.id_bodega = bodega AND S.id_producto = id_producto LIMIT 1;
        
        UPDATE stock_bodegas SET stock_bodegas.stock = stock_bodega + cantidad WHERE stock_bodegas.id_stock_bodega = id_stock_bodega;
        
        INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
        VALUES             (id_producto, bodega, 52, numero_documento, cantidad, ROUND(neto_xml/cantidad, 4), ROUND(neto_xml, 4), '0', '0', '0', producto_stock_general, producto_costo_pmp, producto_stock_valorizado, DATE_FORMAT(NOW(), "%Y-%m-%d "), ExtractValue(xml, '//DMovimientoCompra/Sesion/Mac'));
        INSERT INTO detalle_movimientos_ingreso_guias ( producto_id,`id_encabezado`, `linea`, `codigo_producto`, `descripcion`, `unidad_venta`, `cantidad`, `precio_venta`, `precio_sin_iva`,`precio_con_iva`, `porcentaje_descuento`, `monto_descuento`, `neto_linea`, `iva_linea`, `pmp`, `pmp_linea`, `total_linea`, total_mostrar, `fecha`, `movimiento`, `origen`, neto_xml, monto_descuento_xml) VALUES (id_producto, id_encabezado, linea, codigo_producto, descripcion, unidad_venta, cantidad, precio_venta, precio_sin_iva, precio_con_iva, porcentaje_descuento, monto_descuento, neto_linea, iva_linea, producto_costo_pmp, producto_costo_pmp*cantidad, total_linea, total_mostrar, fecha, movimiento, origen, neto_xml, monto_descuento_xml);                                        
        
            SET contador = contador + 1;
     END WHILE; 

      SELECT "SUCCESS";
    ELSEIF id_movimiento_referencia IS NOT NULL THEN
      SELECT "Esta guia ya fue ingresada", "", "";
    ELSE
      SELECT "No se encontro la guia a ingresar", "", ""; 
    END IF;
    
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarInventarioTablaPasoXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarInventarioTablaPasoXML`(
	IN `param_xml` TEXT


)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    

    
        
    DECLARE mac VARCHAR(100) DEFAULT ExtractValue(xml, '//DInventarioTablaPasoCabecera/Mac');
    DECLARE id_cabezera int(11) DEFAULT (SELECT I.id_inventario_tabla_paso_encabezado FROM inventario_tabla_paso_encabezado AS I WHERE I.mac_inventario_tabla_paso_encabezado = mac LIMIT 1);
    DECLARE bodega int(11) DEFAULT ExtractValue(xml, '//DInventarioTablaPasoCabecera/Bodega');
    DECLARE fecha VARCHAR(50) DEFAULT ExtractValue(xml, '//DInventarioTablaPasoCabecera/Fecha');
    
    
   
    DECLARE id_producto int(11) DEFAULT ExtractValue(xml, '//DInventarioTablaPasoCabecera/InventarioTablaPasoDetalle/DInventarioTablaPasoDetalle/Id_producto');
    DECLARE descripcion_producto varchar(150) DEFAULT ExtractValue(xml, '//DInventarioTablaPasoCabecera/InventarioTablaPasoDetalle/DInventarioTablaPasoDetalle/Descripcion');
    DECLARE stock_producto int(11) DEFAULT ExtractValue(xml, '//DInventarioTablaPasoCabecera/InventarioTablaPasoDetalle/DInventarioTablaPasoDetalle/Stock');
    DECLARE id_detalle int(11) DEFAULT (SELECT I.id_inventario_tabla_paso_detalle FROM inventario_tabla_paso_detalle AS I WHERE I.id_inventario_tabla_paso_encabezado = id_cabezera AND I.id_producto_inventario_tabla_paso_detalle = id_producto LIMIT 1);

    IF id_cabezera IS NULL THEN
      INSERT INTO inventario_tabla_paso_encabezado (`mac_inventario_tabla_paso_encabezado`, `fecha_inventario_tabla_paso_encabezado`, `bodega_inventario_tabla_paso_encabezado`) 
                                                    VALUES (mac, fecha, bodega);
      SET id_cabezera = LAST_INSERT_ID();
    END IF;
    
    IF id_detalle IS NULL THEN
      INSERT INTO inventario_tabla_paso_detalle (`id_inventario_tabla_paso_encabezado`, `id_producto_inventario_tabla_paso_detalle`, `descripcion_inventario_tabla_paso_detalle`, `ubicacion_inventario_tabla_paso_detalle`, `stock_inventario_tabla_paso_detalle`)
      VALUES (id_cabezera, id_producto, descripcion_producto, '1', stock_producto);
    ELSE
      UPDATE inventario_tabla_paso_detalle SET `stock_inventario_tabla_paso_detalle` = stock_inventario_tabla_paso_detalle + stock_producto WHERE  `id_inventario_tabla_paso_detalle` = id_detalle;
    END IF;
    
		SELECT "SUCCESS";
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertarKardex` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `InsertarKardex`(
	IN `param_tipo_movimiento` CHAR(1),
	IN `param_id_producto` INT,
	IN `param_id_bodega` INT,
	IN `param_tipo_documento` INT,
	IN `param_numero_documento` INT,
	IN `param_cantidad` DECIMAL(20,4),
	IN `param_valor` DECIMAL(20,4),
	IN `param_fecha` DATE,
	IN `param_mac` VARCHAR(50)

)
    COMMENT 'No se puede usar la transanccion porque el anular guia tiene una y hace que este falle se debe usar un procedimiento envolverte para que funcione con una transaccion'
BEGIN
      DECLARE permite_stock_negativo_var CHAR(1) DEFAULT (SELECT Emp.permite_stock_negativo FROM empresas AS Emp LIMIT 1);
      DECLARE cantidad_var DECIMAL(20,4) DEFAULT IF(param_cantidad < 0, param_cantidad*-1, param_cantidad);
      DECLARE tipo_movimiento_var CHAR(1) DEFAULT IF(param_cantidad < 0, FUNCInvertirTipoMovimientoKardex(param_tipo_movimiento), param_tipo_movimiento);
      DECLARE valor_linea_var DECIMAL(20,4) DEFAULT param_valor*cantidad_var;
      DECLARE producto_costo_pmp_var DECIMAL(20,4);
      DECLARE producto_stock_general_var DECIMAL(20,4);
      DECLARE producto_stock_valorizado_var DECIMAL(20,4);
      DECLARE stock_var DECIMAL(20,4);
      DECLARE id_stock_bodega_var INT(11);
      
      IF tipo_movimiento_var <> '+' AND tipo_movimiento_var <> '-' THEN
        CALL error('No se espesifico el tipo movimiento correcto');
      END IF;
      
      SELECT 
        P.costo_pmp, 
        P.stock_general, 
        P.stock_valorizado 
      INTO 
        producto_costo_pmp_var, 
        producto_stock_general_var, 
        producto_stock_valorizado_var 
      FROM productos AS P 
      WHERE 
        P.id_producto = param_id_producto 
        LIMIT 1;
      
      IF tipo_movimiento_var = '+' THEN
        SET producto_stock_general_var = ROUND(producto_stock_general_var + cantidad_var, 4);
        SET producto_stock_valorizado_var = ROUND(producto_stock_valorizado_var + valor_linea_var, 4);
      ELSE
        SET producto_stock_general_var = ROUND(producto_stock_general_var - cantidad_var, 4);
        SET producto_stock_valorizado_var = ROUND(producto_stock_valorizado_var - valor_linea_var, 4);
      END IF;
      
      IF 
        producto_stock_valorizado_var <> 0 AND producto_stock_valorizado_var IS NOT NULL
        AND producto_stock_general_var <> 0 AND producto_stock_general_var IS NOT NULL
      THEN
        SET producto_costo_pmp_var = ROUND(producto_stock_valorizado_var/producto_stock_general_var, 4);
      END IF;
      
      UPDATE productos AS P 
      SET 
        P.costo_pmp = producto_costo_pmp_var, 
        P.stock_general = producto_stock_general_var, 
        P.stock_valorizado = producto_stock_valorizado_var
      WHERE 
        P.id_producto = param_id_producto;
      
      SELECT 
        S.id_stock_bodega,
        S.stock
      INTO 
        id_stock_bodega_var,
        stock_var
      FROM stock_bodegas AS S 
      WHERE 
        S.id_bodega = param_id_bodega 
        AND S.id_producto = param_id_producto 
      LIMIT 1;
      
      IF tipo_movimiento_var = '+' THEN
        SET stock_var = stock_var + cantidad_var;
      ELSE
        SET stock_var = stock_var - cantidad_var;
        
         IF stock_var < 0 AND permite_stock_negativo_var = 0 THEN
          CALL error(CONCAT('Producto : ', param_id_producto, ' Excede Maximo permitido '));
         END IF;
      END IF;
      
      UPDATE stock_bodegas AS SB 
      SET 
        SB.stock = stock_var 
      WHERE 
        SB.id_stock_bodega = id_stock_bodega_var
      LIMIT 1;
      
      INSERT INTO kardex (`id_producto`,    `bodega_id`,  `tipo_movimiento`,    `numero_documento`,     `entrada`, `vunitcompra`, `debe`,   `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
      VALUES             (param_id_producto, param_id_bodega, param_tipo_documento, param_numero_documento, 
        IF(tipo_movimiento_var = '+' , cantidad_var, 0), 
        IF(tipo_movimiento_var = '+' , param_valor, 0), 
        IF(tipo_movimiento_var = '+' , valor_linea_var, 0), 
        IF(tipo_movimiento_var = '-' , cantidad_var, 0), 
        IF(tipo_movimiento_var = '-' , param_valor, 0), 
        IF(tipo_movimiento_var = '-' , valor_linea_var, 0), 
        producto_stock_general_var, producto_costo_pmp_var, producto_stock_valorizado_var, param_fecha, param_mac);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarLog` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `insertarLog`(
	IN `param_fecha` DATE,
	IN `param_log` MEDIUMTEXT,
	IN `param_mac` VARCHAR(50)
)
BEGIN
  INSERT INTO logs_equipo (fecha, log, mac)
  VALUES (param_fecha, param_log, param_mac)
  ON DUPLICATE KEY UPDATE
     fecha = param_fecha,
     log = param_log,
     mac = param_mac;
     
  SELECT 'SUCCESS';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarMovimientoCompra2XML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarMovimientoCompra2XML`(
	IN `param_xml` TEXT
)
BEGIN
     DECLARE EXIT HANDLER FOR SQLEXCEPTION
     BEGIN
          SHOW ERRORS LIMIT 1;
          ROLLBACK;
     END; 
     DECLARE EXIT HANDLER FOR SQLWARNING
     BEGIN
          SHOW WARNINGS LIMIT 1;
          ROLLBACK;
     END;

     START TRANSACTION;
     
    BEGIN
        DECLARE xml TEXT(10000) DEFAULT param_xml;
        
        DECLARE contador INT DEFAULT 1;
        
        
        
        DECLARE id int(11);
        DECLARE id_r_compra_var INT(11);
        DECLARE tipo_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_documento');
        DECLARE numero_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Numero_folio');
        DECLARE fecha_documento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_documento');
        DECLARE rut int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Rut');
        DECLARE dv  char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Dv');
        DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Razon_social');
        DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Giro');
        DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Direccion');
        DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Comuna');
        DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Cuiudad');
        DECLARE subtotal    int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Subtotal');
        DECLARE descuento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Descuento');
        DECLARE porcentaje_descuento_global int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Porcentaje_descuento');
        DECLARE neto int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Neto');
        DECLARE iva_porcentaje  int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Iva_porcentaje');
        DECLARE monto_iva int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_iva');
        DECLARE total_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Total_docuemnto');
        DECLARE hora DateTime DEFAULT NOW();
        DECLARE tipo_precio char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_precio');
        
      
        DECLARE movimiento char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Movimiento'));
        DECLARE origen char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Origen'));
        DECLARE monto_pagar int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagar');
        DECLARE monto_pagado_encabezado int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagado');
      
        DECLARE fecha_encabezado VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha');
        DECLARE fecha_recepcion VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_recepcion');
        DECLARE fecha_vencimiento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_vencimiento');
        
        
        
        DECLARE is_objetada_var CHAR(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Is_objetada');
        DECLARE glosa_var VARCHAR(500) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Glosa');
      
        DECLARE monto_adeudado int(11) DEFAULT (monto_pagar - monto_pagado_encabezado);
        DECLARE vinculacion int(11) DEFAULT 0;
      
      
        DECLARE bodega int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Bodega');
                                  
        
        
         DECLARE id_producto int(11);
         DECLARE id_producto_referenciado int(11);
         DECLARE id_encabezado int(11);
         DECLARE linea int(11);
         DECLARE codigo_producto varchar(20);
         DECLARE descripcion varchar(100);
         DECLARE unidad_venta int(11);
         DECLARE cantidad float(18,4);
         DECLARE precio_venta float(18,4);
         DECLARE precio_sin_iva float(18,4);
         DECLARE precio_con_iva float(18,4);
         DECLARE porcentaje_descuento int(11);
         DECLARE monto_descuento float(18,4);
         DECLARE neto_linea float(18,4);
         DECLARE iva_linea float(18,4);
         DECLARE pmp_linea float(18,4);
         DECLARE pmp float(18,4);
         DECLARE total_linea float(18,4);
         DECLARE total_mostrar float(18,4);
         DECLARE fecha varchar(100);
         DECLARE neto_xml float(18,4);
         DECLARE monto_descuento_xml float(18,4);   
         DECLARE stock_bodega float(18,4);
         DECLARE id_stock_bodega int(11);
  
         DECLARE producto_costo_pmp decimal(18,4);
         DECLARE producto_stock_general float(18,4);
         DECLARE producto_stock_valorizado decimal(18,4);

                        
      SET @mensaje_de_error = '';
    IF (SELECT E.id FROM encabezado_movimientos_compra AS E WHERE E.tipo_documento = 33 AND E.numero_documento = numero_documento AND E.rut = rut LIMIT 1) IS NULL THEN
       
            INSERT INTO `encabezado_movimientos_compra` 
                    (`id`, 
                    `tipo_documento`, 
                    `numero_documento`,  
                    `fecha_documento`, 
                    `rut`, 
                    `dv`,
                    `razon social`, 
                    `giro`, 
                    `direccion`, 
                    `comuna`, 
                    `ciudad`, 
                    `bodega`,  
                    `subtotal`, 
                    `descuento`, 
                    `neto`, 
                    `iva_porcentaje`, 
                    `monto iva`, 
                    `total_documento`,  
                    `hora`,    
                    `movimiento`,
                    `origen`,
                    monto_pagar,
                    monto_pagado,
                    monto_adeudado,
                    fecha,
                    fecha_recepcion,
                    fecha_vencimiento,
                    
                    
                    objetada,
                    glosa
                    ) 
                    VALUES (id, 
                    tipo_documento, 
                    numero_documento,
                    fecha_documento, 
                    rut, 
                    dv, 
                    razon_social, 
                    giro, 
                    direccion, 
                    comuna , 
                    ciudad , 
                    bodega, 
                    subtotal, 
                    descuento, 
                    neto, 
                    iva_porcentaje, 
                    monto_iva, 
                    total_documento, 
                    hora, 
                    movimiento,
                    origen,
                    monto_pagar,
                    monto_pagado_encabezado,
                    monto_adeudado,
                    fecha_encabezado,
                    fecha_recepcion,
                    fecha_vencimiento,
                    
                    
                    is_objetada_var,
                    glosa_var
                    );
          
       SET id = LAST_INSERT_ID();
       
        /* SET id_r_compra_var = (SELECT * FROM r_compra_sii AS RC WHERE
                                                                RC.);*/
       
       /* -- se tinee que vovler a agregar
         IF id_r_compra_var IS NULL THEN
         
          INSERT INTO r_compra_sii 
            (
             `tipo_doc`,
             `rut`,
             `razon_social`,
             `numero_doc`,
             `fecha_doc`,
             `fecha_recepcion`,
             `fecha_acuse`,
             `m_neto`,
             `m_iva_recuperable`,
             `monto_total`,
             `glosa`,
             monto_pagar,
             monto_pagado
             )
                VALUES 
             (
             tipo_documento,
             rut,
             razon_social,
             numero_documento,
             fecha_encabezado,
             fecha_recepcion,
             NULL,
             neto,
             monto_iva,
             total_documento,
             glosa,
             total_documento,
             0
             );    
          END IF;*/
             
           WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[',contador,']/Linea')) != ''))  DO
           
            
            SET id_encabezado = id;
                SET linea = contador;
                SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Codigo_producto'));
                SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Descripcion'));
                SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Unidad_venta'));
                SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Cantidad'));
                SET precio_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_venta'));
                SET precio_sin_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_sin_iva'));
                SET precio_con_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_con_iva'));
                SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Porcentaje_descuento'));
                SET monto_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento'));
                SET neto_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_linea'));
                SET iva_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Iva_linea'));
                SET pmp = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Pmp'));
                SET pmp_linea = pmp * cantidad;
                SET total_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_linea'));
                SET fecha = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Fecha'));
                SET neto_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_xml'));
                SET monto_descuento_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento_xml'));
                SET total_mostrar = ExtractValue(xml, CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_mostrar'));
        
            
            SET id_producto = idProductoDesdeCodigo(codigo_producto);
                        
            
            SELECT P.costo_pmp, P.stock_general, P.stock_valorizado INTO producto_costo_pmp, producto_stock_general, producto_stock_valorizado FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
            
            SET neto_xml = ROUND(neto_linea * (1- (porcentaje_descuento/100)), 4);
            SET neto_xml = ROUND(neto_xml * (1- (porcentaje_descuento_global/100)), 4);
            
            SET producto_stock_general = producto_stock_general + cantidad;
            SET producto_stock_valorizado = ROUND(producto_stock_valorizado + neto_xml, 4);
            SET producto_costo_pmp = ROUND(producto_stock_valorizado/producto_stock_general, 4);
            
            UPDATE productos AS P SET P.costo_pmp = producto_costo_pmp, P.stock_general = producto_stock_general, P.stock_valorizado = producto_stock_valorizado, P.precio_ultima_compra = IF( 1 < ROUND((neto_xml/cantidad), 4), ROUND((neto_xml/cantidad), 4), P.precio_ultima_compra) WHERE P.id_producto = id_producto;
            
            SELECT S.stock , S.id_stock_bodega INTO stock_bodega, id_stock_bodega FROM stock_bodegas AS S WHERE  S.id_bodega = bodega AND S.id_producto = id_producto LIMIT 1;
            
            UPDATE stock_bodegas SET stock_bodegas.stock = stock_bodega + cantidad WHERE stock_bodegas.id_stock_bodega = id_stock_bodega;
            
            INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
            VALUES             (id_producto, bodega, tipo_documento, numero_documento, cantidad, ROUND(neto_xml/cantidad, 4), ROUND(neto_xml, 4), '0', '0', '0', producto_stock_general, producto_costo_pmp, producto_stock_valorizado, DATE_FORMAT(NOW(), "%Y-%m-%d"), ExtractValue(xml, '//DMovimientoCompra/Sesion/Mac'));
            INSERT INTO detalle_movimientos_compra ( producto_id,`id_encabezado`, `linea`, `codigo_producto`, `descripcion`, `unidad_venta`, `cantidad`, `precio_venta`, `precio_sin_iva`,`precio_con_iva`, `porcentaje_descuento`, `monto_descuento`, `neto_linea`, `iva_linea`, `pmp`, `pmp_linea`, `total_linea`, total_mostrar, `fecha`, `movimiento`, `origen`, neto_xml, monto_descuento_xml) VALUES (id_producto, id_encabezado, linea, codigo_producto, descripcion, unidad_venta, cantidad, precio_venta, precio_sin_iva, precio_con_iva, porcentaje_descuento, monto_descuento, neto_linea, iva_linea, producto_costo_pmp, producto_costo_pmp*cantidad, total_linea, total_mostrar, fecha, movimiento, origen, neto_xml, monto_descuento_xml);                                        
        
            SET contador = contador + 1;
           END WHILE; 
       CALL `ContabilizaCompra`(id_encabezado, 'Y');
       SELECT "SUCCESS";
    ELSE
      SELECT "Esta compra ya fue registrada", "", ""; 
    END IF;
    
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarMovimientoCompraXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarMovimientoCompraXML`(
	IN `param_xml` TEXT




















)
BEGIN
     DECLARE EXIT HANDLER FOR SQLEXCEPTION
     BEGIN
          SHOW ERRORS LIMIT 1;
          ROLLBACK;
     END; 
     DECLARE EXIT HANDLER FOR SQLWARNING
     BEGIN
          SHOW WARNINGS LIMIT 1;
          ROLLBACK;
     END;

     START TRANSACTION;
     
    BEGIN
        DECLARE xml TEXT(10000) DEFAULT param_xml;
        
        DECLARE contador INT DEFAULT 1;
        
        
        
        DECLARE id int(11);
        DECLARE tipo_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_documento');
        DECLARE numero_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Numero_folio');
        DECLARE fecha_documento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_documento');
        DECLARE rut int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Rut');
        DECLARE dv  char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Dv');
        DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Razon_social');
        DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Giro');
        DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Direccion');
        DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Comuna');
        DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Cuiudad');
        DECLARE subtotal    int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Subtotal');
        DECLARE descuento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Descuento');
        DECLARE porcentaje_descuento_global int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Porcentaje_descuento');
        DECLARE neto int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Neto');
        DECLARE iva_porcentaje  int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Iva_porcentaje');
        DECLARE monto_iva int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_iva');
        DECLARE total_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Total_docuemnto');
        DECLARE hora DateTime DEFAULT NOW();
        DECLARE tipo_precio char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_precio');
        
      
        DECLARE movimiento char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Movimiento'));
        DECLARE origen char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Origen'));
        DECLARE monto_pagar int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagar');
        DECLARE monto_pagado_encabezado int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagado');
      
        DECLARE fecha_encabezado VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha');
        DECLARE fecha_recepcion VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_recepcion');
        DECLARE fecha_vencimiento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_vencimiento');
        DECLARE fecha_aceptacion_contenido VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_aceptacion_contenido');
        DECLARE fecha_acuse_recibo VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_acuse_recibo');
      
        DECLARE monto_adeudado int(11) DEFAULT (monto_pagar - monto_pagado_encabezado);
        DECLARE vinculacion int(11) DEFAULT 0;
      
      
        DECLARE bodega int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Bodega');
                                  
        
        
         DECLARE id_producto int(11);
         DECLARE id_producto_referenciado int(11);
         DECLARE id_encabezado int(11);
         DECLARE linea int(11);
         DECLARE codigo_producto varchar(20);
         DECLARE descripcion varchar(100);
         DECLARE unidad_venta int(11);
         DECLARE cantidad float(18,4);
         DECLARE precio_venta float(18,4);
         DECLARE precio_sin_iva float(18,4);
         DECLARE precio_con_iva float(18,4);
         DECLARE porcentaje_descuento int(11);
         DECLARE monto_descuento float(18,4);
         DECLARE neto_linea float(18,4);
         DECLARE iva_linea float(18,4);
         DECLARE pmp_linea float(18,4);
         DECLARE pmp float(18,4);
         DECLARE total_linea float(18,4);
         DECLARE total_mostrar float(18,4);
         DECLARE fecha varchar(100);
         DECLARE neto_xml float(18,4);
         DECLARE monto_descuento_xml float(18,4);   
         DECLARE stock_bodega float(18,4);
         DECLARE id_stock_bodega int(11);
  
         DECLARE producto_costo_pmp decimal(18,4);
         DECLARE producto_stock_general float(18,4);
         DECLARE producto_stock_valorizado decimal(18,4);

                        
      SET @mensaje_de_error = '';
    IF (SELECT E.id FROM encabezado_movimientos_compra AS E WHERE E.tipo_documento = 33 AND E.numero_documento = numero_documento AND E.rut = rut LIMIT 1) IS NULL THEN
       
            INSERT INTO `encabezado_movimientos_compra` 
                    (`id`, 
                    `tipo_documento`, 
                    `numero_documento`,  
                    `fecha_documento`, 
                    `rut`, 
                    `dv`,
                    `razon social`, 
                    `giro`, 
                    `direccion`, 
                    `comuna`, 
                    `ciudad`, 
                    `bodega`,  
                    `subtotal`, 
                    `descuento`, 
                    `neto`, 
                    `iva_porcentaje`, 
                    `monto iva`, 
                    `total_documento`,  
                    `hora`,    
                    `movimiento`,
                    `origen`,
                    monto_pagar,
                    monto_pagado,
                    monto_adeudado,
                    fecha,
                    fecha_recepcion,
                    fecha_vencimiento,
                    fecha_aceptacion_contenido,
                    fecha_acuse_recibo
                    ) 
                    VALUES (id, 
                    tipo_documento, 
                    numero_documento,
                    fecha_documento, 
                    rut, 
                    dv, 
                    razon_social, 
                    giro, 
                    direccion, 
                    comuna , 
                    ciudad , 
                    bodega, 
                    subtotal, 
                    descuento, 
                    neto, 
                    iva_porcentaje, 
                    monto_iva, 
                    total_documento, 
                    hora, 
                    movimiento,
                    origen,
                    monto_pagar,
                    monto_pagado_encabezado,
                    monto_adeudado,
                    fecha_encabezado,
                    fecha_recepcion,
                    fecha_vencimiento,
                    fecha_aceptacion_contenido,
                    fecha_acuse_recibo
                    );
          
       SET id = LAST_INSERT_ID();
             
           WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[',contador,']/Linea')) != ''))  DO
           
            
            SET id_encabezado = id;
                SET linea = contador;
                SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Codigo_producto'));
                SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Descripcion'));
                SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Unidad_venta'));
                SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Cantidad'));
                SET precio_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_venta'));
                SET precio_sin_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_sin_iva'));
                SET precio_con_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_con_iva'));
                SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Porcentaje_descuento'));
                SET monto_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento'));
                SET neto_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_linea'));
                SET iva_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Iva_linea'));
                SET pmp = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Pmp'));
                SET pmp_linea = pmp * cantidad;
                SET total_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_linea'));
                SET fecha = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Fecha'));
                SET neto_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_xml'));
                SET monto_descuento_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento_xml'));
                SET total_mostrar = ExtractValue(xml, CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_mostrar'));
        
        
        SET id_producto = idProductoDesdeCodigo(codigo_producto);
                    
        
        SELECT P.costo_pmp, P.stock_general, P.stock_valorizado INTO producto_costo_pmp, producto_stock_general, producto_stock_valorizado FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
        
        SET neto_xml = ROUND(neto_linea * (1- (porcentaje_descuento/100)), 4);
        SET neto_xml = ROUND(neto_xml * (1- (porcentaje_descuento_global/100)), 4);
        
        SET producto_stock_general = producto_stock_general + cantidad;
        SET producto_stock_valorizado = ROUND(producto_stock_valorizado + neto_xml, 4);
        SET producto_costo_pmp = ROUND(producto_stock_valorizado/producto_stock_general, 4);
        
        UPDATE productos AS P SET P.costo_pmp = producto_costo_pmp, P.stock_general = producto_stock_general, P.stock_valorizado = producto_stock_valorizado, P.precio_ultima_compra = ROUND(neto_xml/cantidad, 4) WHERE P.id_producto = id_producto;
        
        SELECT S.stock , S.id_stock_bodega INTO stock_bodega, id_stock_bodega FROM stock_bodegas AS S WHERE  S.id_bodega = bodega AND S.id_producto = id_producto LIMIT 1;
        
        UPDATE stock_bodegas SET stock_bodegas.stock = stock_bodega + cantidad WHERE stock_bodegas.id_stock_bodega = id_stock_bodega;
        
        INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
        VALUES             (id_producto, bodega, tipo_documento, numero_documento, cantidad, ROUND(neto_xml/cantidad, 4), ROUND(neto_xml, 4), '0', '0', '0', producto_stock_general, producto_costo_pmp, producto_stock_valorizado, DATE_FORMAT(NOW(), "%Y-%m-%d"), ExtractValue(xml, '//DMovimientoCompra/Sesion/Mac'));
        INSERT INTO detalle_movimientos_compra ( producto_id,`id_encabezado`, `linea`, `codigo_producto`, `descripcion`, `unidad_venta`, `cantidad`, `precio_venta`, `precio_sin_iva`,`precio_con_iva`, `porcentaje_descuento`, `monto_descuento`, `neto_linea`, `iva_linea`, `pmp`, `pmp_linea`, `total_linea`, total_mostrar, `fecha`, `movimiento`, `origen`, neto_xml, monto_descuento_xml) VALUES (id_producto, id_encabezado, linea, codigo_producto, descripcion, unidad_venta, cantidad, precio_venta, precio_sin_iva, precio_con_iva, porcentaje_descuento, monto_descuento, neto_linea, iva_linea, producto_costo_pmp, producto_costo_pmp*cantidad, total_linea, total_mostrar, fecha, movimiento, origen, neto_xml, monto_descuento_xml);                                        
        
            SET contador = contador + 1;
           END WHILE; 

       SELECT "SUCCESS";
    ELSE
      SELECT "Esta compra ya fue registrada", "", ""; 
    END IF;
    
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarMovimientoFacturaGuiasXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarMovimientoFacturaGuiasXML`(
	IN `param_xml` MEDIUMTEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE xml MEDIUMTEXT DEFAULT param_xml;
      
    	
	    DECLARE contador INT DEFAULT 1;
	    
	    
	    
	    DECLARE id int(11);
	    DECLARE tipo_documento int(11) DEFAULT ExtractValue(xml, '//DMovimiento/Tipo_documento');
	    
	    DECLARE fecha_documento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimiento/Fecha_documento');
	    DECLARE rut char(11) DEFAULT ExtractValue(xml, '//DMovimiento/Rut');
	    DECLARE dv	char(1) DEFAULT ExtractValue(xml, '//DMovimiento/Dv');
	    DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DMovimiento/Razon_social');
	    DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DMovimiento/Giro');
	    DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DMovimiento/Direccion');
	    DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DMovimiento/Comuna');
	    DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DMovimiento/Cuiudad');
	    DECLARE subtotal decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Subtotal');
	    DECLARE descuento decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Descuento_bruto');
      DECLARE porcentaje_descento_global decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Porcentaje_descuento');
	    DECLARE neto decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Neto');
	    DECLARE iva_porcentaje	decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Iva_porcentaje');
	    DECLARE monto_iva decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Monto_iva');
	    DECLARE total_documento decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Total_docuemnto');
	    DECLARE tipo_documento_referencia int(11) DEFAULT ExtractValue(xml, '//DMovimiento/Tipo_documento_referencia');
	    DECLARE numero_documento_referencia int(11) DEFAULT ExtractValue(xml, '//DMovimiento/Numero_documento_referencia');
	    DECLARE causa_referencia VARCHAR(150) DEFAULT ExtractValue(xml, '//DMovimiento/Causa_documento_referencia');
	    DECLARE hora DateTime DEFAULT NOW();
	    DECLARE vendedor	char(1) DEFAULT ExtractValue(xml, '//DMovimiento/Vendedor');
	    DECLARE codigo_empresa	char(1) DEFAULT ExtractValue(xml, '//DMovimiento/Codigo_empresa');
	    DECLARE tipo_precio	char(1) DEFAULT ExtractValue(xml, '//DMovimiento/Tipo_precio');
	    DECLARE fecha_documento_referencia DATE DEFAULT MAKEDATE(2000, 1);
      DECLARE fecha_vencimiento DATE DEFAULT STR_TO_DATE(ExtractValue(xml, '//DMovimiento/Fecha_vencimiento'),'%Y-%m-%d');
		  DECLARE movimiento char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimiento/Movimiento'));
      
		  DECLARE origen char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimiento/Origen'));
      
	    DECLARE monto_pagar decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Monto_pagar');
	    DECLARE monto_pagado_encabezado decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Monto_pagado');
	    DECLARE monto_adeudado decimal (18,4) DEFAULT (monto_pagar - monto_pagado_encabezado);
      DECLARE vinculacion int(11) DEFAULT 0;
      DECLARE estado_dte CHAR(50) DEFAULT '';
      
      DECLARE tipo_traspaso int (11) DEFAULT ExtractValue(xml, '//DMovimiento/Tipo_traspaso_vienes');
      
    DECLARE id_lista_precio int(11);
    DECLARE bodega int(11);
    DECLARE sucursal int(11);
    DECLARE caja int(11) DEFAULT 0;
    DEClARE correlativo_caja int(11) DEFAULT 0;
    
    DECLARE stock float(11,4);
    
    
    DECLARE permite_stock_negatico CHAR(1) DEFAULT (SELECT E.permite_stock_negativo FROM empresas AS E LIMIT 1);
	    
	    
     DECLARE id_producto int(11);
     DECLARE id_producto_referenciado int(11);
  	 DECLARE id_encabezado int(11);
  	 DECLARE linea int(11);
  	 DECLARE codigo_producto varchar(20);
  	 DECLARE descripcion varchar(100);
  	 DECLARE unidad_venta int(11);
  	 DECLARE cantidad float(11,4);
  	 DECLARE porcentaje_descuento decimal (18,4);
       
     DECLARE netopv decimal (18,4);
     DECLARE ivapv decimal (18,4);
     DECLARE brutopv decimal (18,4);

     DECLARE precio_bruto_unit decimal (18,4);
     DECLARE precio_bruto_linea decimal (18,4);
     DECLARE monto_desc_bruto_linea decimal (18,4);
     DECLARE total_bruto_c_desc decimal (18,4);

     DECLARE precio_neto_unit decimal (18,4);
     DECLARE precio_neto_linea decimal (18,4);
     DECLARE monto_desc_neto_linea decimal (18,4);
     DECLARE total_neto_c_desc decimal (18,4);

     DECLARE pv_real_unit decimal (18,4);
     DECLARE pv_real_linea decimal (18,4);

     DECLARE pmp decimal (18,4);
     DECLARE pmp_linea decimal (18,4);
	   DECLARE fecha varchar(100);

     
     DECLARE error_stock TEXT(1000) DEFAULT '';
     DECLARE producto_costo_pmp decimal(18,4);
     DECLARE producto_stock_general float(18,4);
     DECLARE producto_stock_valorizado decimal(18,4);
     	 
		 

		 DECLARE id_movimiento int(11);
		 DECLARE forma_pago int(11);
		 DECLARE descripcion_forma_pago VARCHAR(150);
		 DECLARE monto_pagado decimal(18,4);
		 DECLARE numero_operacion int(18);
		
		 
		 
		 DECLARE numero_folio int(10) DEFAULT NULL;
		 DECLARE nombre_caf varchar(100);
		 DECLARE xml_caf LONGBLOB;
		 DECLARE size_caf INT(11);
		 DECLARE id_folio int(10) DEFAULT (
												SELECT F.id ID
													FROM hef_cafs_folios F 
														INNER JOIN hef_cafs C
															ON C.id = F.id_caf
													WHERE 
														F.rut_emisor	= CONCAT(ExtractValue(xml , '//Empresa/Rut'),'-', ExtractValue(xml , '//Empresa/Dv'))
														AND F.tipo_DTE = tipo_documento
														AND F.estado = 0
														AND F.fecha_vencimiento > NOW()
														ORDER BY F.id ASC 
														LIMIT 1
												);
                                   
   
    
    SET sucursal = idSucursalDesdeMac(ExtractValue(xml, '//DMovimiento/Sesion/Mac'));
     
    
    SET bodega = idBodegaDesdeSucursal(sucursal);
    
    
    SET caja = (SELECT C.id_caja FROM cajas AS C WHERE C.mac_address_asignada = ExtractValue(xml, '//DMovimiento/Sesion/Mac') LIMIT 1);
    
    SET correlativo_caja = (SELECT A.correlativo FROM apertura_caja AS A WHERE A.id_caja = caja AND A.fecha_cierre IS NULL LIMIT 1);
    
    IF rut != '' AND rut != "66666666" THEN
      SET id_lista_precio = (SELECT C.listasprecios FROM proveedores AS C WHERE C.rut = rut LIMIT 1);
    END IF;
    
    IF id_lista_precio IS NULL OR id_lista_precio = 0 THEN
      SET id_lista_precio = (SELECT S.id_lista_precio FROM sucursales AS S WHERE S.id = sucursal LIMIT 1);
    END IF;
               
             
      SET @mensaje_de_error = '';
      SET vinculacion = ExtractValue(xml, '//DMovimiento/Vinculacion');
			
			IF id_folio IS NOT NULL THEN
      
				UPDATE hef_cafs_folios F
				SET	F.estado = 1,
						F.fecha_consumo = NOW()
				WHERE
					F.id = id_folio
				;
				
				
      SELECT 
        F.folio,
        C.nombre,
        C.xml,
				C.size
      INTO
        numero_folio,
        nombre_caf,
        xml_caf,
        size_caf
			FROM 
				hef_cafs_folios AS F 
			INNER JOIN
				hef_cafs AS C 
				ON F.id_caf = C.id 
			WHERE F.id = id_folio;
				
			END IF;
	    
	   IF numero_folio IS NOT NULL THEN
	   
      
	    IF numero_documento_referencia != 0 THEN
	    	SET fecha_documento_referencia = STR_TO_DATE(ExtractValue(xml, '//DMovimiento/Fecha_documento_referencia'), '%d-%m-%Y');
	    END IF;
      
      
      IF tipo_documento = 39 THEN
        SET estado_dte = 'CREADO';
      END IF;
	   
      INSERT INTO `encabezado_movimientos` 
					(
					`tipo_documento`, 
					`numero_documento`, 
					`id_folio`, 
					`fecha_documento`, 
					`rut`, 
					`dv`,
					`razon_social`, 
					`giro`, 
					`direccion`, 
					`comuna`, 
					`ciudad`,  
					`subtotal`, 
          porcentaje_desc,
					`descuento`, 
					`neto`, 
					`iva_porcentaje`, 
					`monto iva`, 
					`total_documento`, 
					`tipo_documento_referencia`, 
					`numero_documento_referencia`, 
					`fecha_documento_referencia`,
					`hora`, 
					`vendedor`, 
					`codigo_empresa`, 
					`tipo_precio`, 
					`causa_documento_referencia`, 
					`estado_dte`,
					`movimiento`,
					`origen`,
					monto_pagar,
					monto_pagado,
					monto_adeudado,
          fecha_vencimiento,
          sucursal_id,
          bodega_id,
          caja_id,
          correlativo,
          listas_precio_id,
          is_factura_guias,
          is_convenio) 
					VALUES (
					tipo_documento, 
					numero_folio, 
					id_folio, 
					fecha_documento, 
					rut, 
					dv, 
					razon_social, 
					giro, 
					direccion, 
					comuna , 
					ciudad , 
					subtotal, 
          porcentaje_descento_global,
					descuento, 
					neto, 
					iva_porcentaje, 
					monto_iva, 
					total_documento,
					tipo_documento_referencia, 
					numero_documento_referencia, 
					fecha_documento_referencia,
					hora, 
					vendedor, 
					codigo_empresa, 
					tipo_precio, 
					causa_referencia, 
					estado_dte,
					movimiento,
					origen,
					monto_pagar,
					monto_pagado_encabezado,
					monto_adeudado,
          fecha_vencimiento,
          sucursal,
          bodega,
          caja,
          correlativo_caja,
          id_lista_precio,
          "1",
          "1"
					);
      
      SET id = LAST_INSERT_ID();

		   WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[',contador,']/Codigo_producto')) != ''))  DO
		   
		   	
		   	SET id_encabezado = id;
				SET linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Linea'));
				SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Codigo_producto'));
				SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Descripcion'));
				SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Unidad_venta'));
				SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Cantidad'));
				SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Porcentaje_descuento'));
              
        SET precio_bruto_unit = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_bruto_unit'));
        SET precio_bruto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_bruto_linea'));
        SET monto_desc_bruto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Monto_desc_bruto_linea'));
        SET total_bruto_c_desc = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Total_bruto_c_desc'));
        
        SET precio_neto_unit = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_neto_unit'));
        SET precio_neto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_neto_linea'));
        SET monto_desc_neto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Monto_desc_neto_linea'));
        SET total_neto_c_desc = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Total_neto_c_desc'));
        
        SET pmp = ROUND(ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Pmp')), 4);
        SET pmp_linea = ROUND(pmp * cantidad, 4);
				SET fecha = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Fecha'));
        
        SET brutopv = ROUND(total_bruto_c_desc / cantidad, 4);
        SET netopv = ROUND(brutopv / (1 + (iva_porcentaje / 100)), 4);
        SET ivapv = ROUND(brutopv - netopv, 4);
        
        
        SET pv_real_linea = ROUND(total_neto_c_desc * (1 - (porcentaje_descento_global / 100)), 4);
        SET pv_real_unit = ROUND(pv_real_linea / cantidad, 4);
        

        
        SET id_producto = idProductoDesdeCodigo(codigo_producto);
        
        INSERT INTO detalle_movimientos ( 
         producto_id,
         `id_encabezado`,
         `linea`,
         `codigo_producto`,
         `descripcion`,
         `unidad_venta`,
         `cantidad`,
         `porcentaje_desc`,
          
          netopv,
          ivapv,
          brutopv,
          
          precio_bruto_unit,
          precio_bruto_linea,
          monto_desc_bruto_linea,
          total_bruto_c_desc,
          
          precio_neto_unit,
          precio_neto_linea,
          monto_desc_neto_linea,
          total_neto_c_desc,
          
          pv_real_unit,
          pv_real_linea,
          
         `pmp`,
         `pmp_linea`,
         `fecha`,
         `movimiento`,
         `origen`) 
         VALUES (
         id_producto,
         id_encabezado,
         linea,
         codigo_producto,
         descripcion,
         unidad_venta,
         cantidad,
         porcentaje_descuento,
        
        netopv,
        ivapv,
        brutopv,
        
        precio_bruto_unit,
        precio_bruto_linea,
        monto_desc_bruto_linea,
        total_bruto_c_desc,
        
        precio_neto_unit,
        precio_neto_linea,
        monto_desc_neto_linea,
        total_neto_c_desc,
        
        pv_real_unit,
        pv_real_linea,
          
         pmp,
         pmp_linea,
         fecha,
         movimiento,
         origen); 
         
        
        
		    SET contador = contador + 1;
		   END WHILE; 
		   
		   SET contador = 1;
		   WHILE ((contador < 50) && (ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[',contador,']/Forma_pago')) != ''))  DO
		   
		   	
		   	SET id_movimiento = id;
		   	
				SET forma_pago = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Forma_pago'));
				SET descripcion_forma_pago = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Descripcion_forma_pago'));
				SET monto_pagado = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Monto_pagado'));
				SET numero_operacion = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Numero_operacion'));
				
		   	
		   	INSERT INTO pagos_movimientos (`id_movimiento`, `forma_pago`, `descripcion_forma_pago`, `monto_pagado`, `numero_operacion`) VALUES (id_movimiento, forma_pago, descripcion_forma_pago, monto_pagado, numero_operacion);
        
		    SET contador = contador + 1;
        
		   END WHILE;
       
       SET contador = 1;
		   WHILE ((contador <= 60) && (ExtractValue(xml , CONCAT('//GuiasReferenciadas/DGuiaDespachoMinimizada[',contador,']/Numero')) != ''))  DO
		   	
		   	UPDATE encabezado_movimientos_guias SET encabezado_movimientos_guias.id_movimiento_referencia = id WHERE encabezado_movimientos_guias.numero_documento = ExtractValue(xml , CONCAT('//GuiasReferenciadas/DGuiaDespachoMinimizada[',contador,']/Numero'));
        
		    SET contador = contador + 1;
        
		   END WHILE;
       
       IF vinculacion != 0 THEN
		   	UPDATE encabezado_nota_venta SET encabezado_nota_venta.id_movimeinto = id WHERE encabezado_nota_venta.id = vinculacion;
		   END IF;
       
       if error_stock != '' THEN
        SET @mensaje_de_error = CONCAT("faltan productos: (codigo_producto, cantidad faltante)",error_stock);
       END IF;

       IF @mensaje_de_error = '' THEN
        CALL ContabilizarVenta(id, 'Y');
		    SELECT id, numero_folio, nombre_caf, "Fue existoso" AS descripcion_error, true AS exito, xml_caf AS xml, size_caf AS size;
       END IF;
    ELSE
			SELECT id, numero_folio, nombre_caf, "No quedan folios disponibles" AS descripcion_error, false AS exito, xml_caf AS xml, size_caf AS size;
	  END IF;
   END;
   
    IF @mensaje_de_error != '' THEN
      SELECT @mensaje_de_error AS descripcion_error, false AS exito, NOW();
      ROLLBACK;
    ELSE
      
      COMMIT;
    END IF;
   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarMovimientoNCCompra2XML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarMovimientoNCCompra2XML`(
	IN `param_xml` TEXT
)
BEGIN
     DECLARE EXIT HANDLER FOR SQLEXCEPTION
     BEGIN
          SHOW ERRORS LIMIT 1;
          ROLLBACK;
     END; 
     DECLARE EXIT HANDLER FOR SQLWARNING
     BEGIN
          SHOW WARNINGS LIMIT 1;
          ROLLBACK;
     END;

     START TRANSACTION;
     
    BEGIN
        DECLARE xml TEXT(10000) DEFAULT param_xml;
        
        DECLARE contador INT DEFAULT 1;
        
        
        
        DECLARE id int(11);
        DECLARE tipo_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_documento');
        DECLARE numero_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Numero_folio');
        DECLARE fecha_documento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_documento');
        DECLARE rut int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Rut');
        DECLARE dv  char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Dv');
        DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Razon_social');
        DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Giro');
        DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Direccion');
        DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Comuna');
        DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Cuiudad');
        DECLARE subtotal    int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Subtotal');
        DECLARE descuento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Descuento');
        DECLARE porcentaje_descuento_global int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Porcentaje_descuento');
        DECLARE neto int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Neto');
        DECLARE iva_porcentaje  int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Iva_porcentaje');
        DECLARE monto_iva int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_iva');
        DECLARE total_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Total_docuemnto');
        DECLARE hora DateTime DEFAULT NOW();
        DECLARE tipo_precio char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_precio');
        
      
        DECLARE movimiento char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Movimiento'));
        DECLARE origen char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Origen'));
        DECLARE monto_pagar int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagar');
        DECLARE monto_pagado_encabezado int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagado');
      
        DECLARE fecha_encabezado VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha');
        DECLARE fecha_recepcion VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_recepcion');
        DECLARE fecha_vencimiento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_vencimiento');
        DECLARE fecha_aceptacion_contenido VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_aceptacion_contenido');
        DECLARE fecha_acuse_recibo VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_acuse_recibo');
      
        DECLARE monto_adeudado int(11) DEFAULT (monto_pagar - monto_pagado_encabezado);
        DECLARE vinculacion int(11) DEFAULT 0;
        
        DECLARE is_objetada_var CHAR(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Is_objetada');
        DECLARE glosa_var VARCHAR(500) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Glosa');
        
        
        
        DECLARE tipo_documento_referencia int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_documento_referencia');
  	    DECLARE numero_documento_referencia int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Numero_documento_referencia');
  	    DECLARE causa_referencia VARCHAR(150) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Causa_documento_referencia');
        DECLARE fecha_documento_referencia DATE DEFAULT STR_TO_DATE(ExtractValue(xml, '//DMovimientoCompra/Fecha_documento_referencia'), '%Y-%m-%d');
        
        DECLARE numero_guia_devolucion_referencia_var INT(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Numero_guia_devolucion_referencia');
      
        DECLARE bodega int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Bodega');
                                  
        
        
         DECLARE id_producto int(11);
         DECLARE id_producto_referenciado int(11);
         DECLARE id_encabezado int(11);
         DECLARE linea int(11);
         DECLARE codigo_producto varchar(20);
         DECLARE descripcion varchar(100);
         DECLARE unidad_venta int(11);
         DECLARE cantidad float(18,4);
         DECLARE precio_venta float(18,4);
         DECLARE precio_sin_iva float(18,4);
         DECLARE precio_con_iva float(18,4);
         DECLARE porcentaje_descuento int(11);
         DECLARE monto_descuento float(18,4);
         DECLARE neto_linea float(18,4);
         DECLARE iva_linea float(18,4);
         DECLARE pmp_linea float(18,4);
         DECLARE pmp float(18,4);
         DECLARE total_linea float(18,4);
         DECLARE total_mostrar float(18,4);
         DECLARE fecha varchar(100);
         DECLARE neto_xml float(18,4);
         DECLARE monto_descuento_xml float(18,4);   
         DECLARE stock_bodega float(18,4);
         DECLARE id_stock_bodega int(11);
  
         DECLARE producto_costo_pmp decimal(18,4);
         DECLARE producto_stock_general float(18,4);
         DECLARE producto_stock_valorizado decimal(18,4);
         
         
         DECLARE stock float(11,4);

      
      DECLARE error_stock TEXT(1000) DEFAULT '';
                        
      SET @mensaje_de_error = '';
    IF (SELECT E.id FROM encabezado_movimientos_compra AS E WHERE E.tipo_documento = 61 AND E.numero_documento = numero_documento AND E.rut = rut LIMIT 1) IS NULL THEN
       
            INSERT INTO `encabezado_movimientos_compra` 
                    (`id`, 
                    `tipo_documento`, 
                    `numero_documento`,  
                    `fecha_documento`, 
                    `rut`, 
                    `dv`,
                    `razon social`, 
                    `giro`, 
                    `direccion`, 
                    `comuna`, 
                    `ciudad`, 
                    `bodega`,  
                    `subtotal`, 
                    `descuento`, 
                    `neto`, 
                    `iva_porcentaje`, 
                    `monto iva`, 
                    `total_documento`,  
                    `hora`,    
                    `movimiento`,
                    `origen`,
                    monto_pagar,
                    monto_pagado,
                    monto_adeudado,
                    fecha,
                    fecha_recepcion,
                    fecha_vencimiento,
                    fecha_aceptacion_contenido,
                    fecha_acuse_recibo,
                    `tipo_documento_referencia`, 
          					`numero_documento_referencia`, 
          					`fecha_documento_referencia`,
          					`causa_documento_referencia`,
                    objetada,
                    glosa,
                    numero_guia_devolucion_referencia
                    ) 
                    VALUES (id, 
                    tipo_documento, 
                    numero_documento,
                    fecha_documento, 
                    rut, 
                    dv, 
                    razon_social, 
                    giro, 
                    direccion, 
                    comuna , 
                    ciudad , 
                    bodega, 
                    subtotal, 
                    descuento, 
                    neto, 
                    iva_porcentaje, 
                    monto_iva, 
                    total_documento, 
                    hora, 
                    movimiento,
                    origen,
                    monto_pagar,
                    monto_pagado_encabezado,
                    monto_adeudado,
                    fecha_encabezado,
                    fecha_recepcion,
                    fecha_vencimiento,
                    fecha_aceptacion_contenido,
                    fecha_acuse_recibo,
                    tipo_documento_referencia, 
          					numero_documento_referencia, 
          					fecha_documento_referencia, 
          					causa_referencia,
                    is_objetada_var,
                    glosa_var,
                    numero_guia_devolucion_referencia_var
                    );
          
       SET id = LAST_INSERT_ID();
       
       UPDATE encabezado_movimientos_compra AS EMC
       SET
          EMC.tipo_documento_referencia = tipo_documento,
          EMC.numero_documento_referencia = numero_documento,
          EMC.fecha_documento_referencia = fecha_encabezado
        WHERE
          EMC.tipo_documento = tipo_documento_referencia
          AND EMC.numero_documento = numero_documento_referencia
        LIMIT 1;
       
       IF numero_guia_devolucion_referencia_var <> 0 THEN
        UPDATE encabezado_movimientos_guias AS EMG
        SET
          EMG.id_movimiento_referencia = id
        WHERE
          EMG.tipo_traspaso = 7
          AND EMG.numero_documento = numero_guia_devolucion_referencia_var
        LIMIT 1
        ;
       END IF;
             
           WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[',contador,']/Linea')) != ''))  DO
           
            
            SET id_encabezado = id;
                SET linea = contador;
                SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Codigo_producto'));
                SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Descripcion'));
                SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Unidad_venta'));
                SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Cantidad'));
                SET precio_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_venta'));
                SET precio_sin_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_sin_iva'));
                SET precio_con_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_con_iva'));
                SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Porcentaje_descuento'));
                SET monto_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento'));
                SET neto_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_linea'));
                SET iva_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Iva_linea'));
                SET pmp = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Pmp'));
                SET pmp_linea = pmp * cantidad;
                SET total_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_linea'));
                SET fecha = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Fecha'));
                SET neto_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_xml'));
                SET monto_descuento_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento_xml'));
                SET total_mostrar = ExtractValue(xml, CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_mostrar'));
        
        
        SET id_producto = idProductoDesdeCodigo(codigo_producto);
               
        
        SET stock = (SELECT
                      S.stock
                    FROM
                      stock_bodegas AS S
                    WHERE
                      S.id_producto = id_producto
                      AND S.id_bodega = bodega
                    LIMIT 1);
                         
        
        SELECT P.costo_pmp, P.stock_general, P.stock_valorizado INTO producto_costo_pmp, producto_stock_general, producto_stock_valorizado FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
        
        SET neto_xml = ROUND(neto_linea * (1- (porcentaje_descuento/100)), 4);
        SET neto_xml = ROUND(neto_xml * (1- (porcentaje_descuento_global/100)), 4);
        
          SET producto_stock_general = producto_stock_general - cantidad;
          SET producto_stock_valorizado = ROUND(producto_stock_valorizado - neto_xml, 4);
          IF producto_stock_general != 0 AND producto_stock_valorizado != 0 THEN
            SET producto_costo_pmp = ROUND(producto_stock_valorizado/producto_stock_general, 4);
          END IF;
        
        IF numero_guia_devolucion_referencia_var = 0 THEN
          UPDATE productos AS P SET P.costo_pmp = producto_costo_pmp, P.stock_general = producto_stock_general, P.stock_valorizado = producto_stock_valorizado, P.precio_ultima_compra = ROUND(neto_xml/cantidad, 4) WHERE P.id_producto = id_producto;
          
          SELECT S.stock , S.id_stock_bodega INTO stock_bodega, id_stock_bodega FROM stock_bodegas AS S WHERE  S.id_bodega = bodega AND S.id_producto = id_producto LIMIT 1;
          
          UPDATE stock_bodegas SET stock_bodegas.stock = stock_bodega - cantidad WHERE stock_bodegas.id_stock_bodega = id_stock_bodega;
          
          INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
          VALUES             (id_producto, bodega, tipo_documento, numero_documento, '0', '0', '0',cantidad, ROUND(neto_xml/cantidad, 4), ROUND(neto_xml, 4), producto_stock_general, producto_costo_pmp, producto_stock_valorizado, DATE_FORMAT(NOW(), "%Y-%m-%d"), ExtractValue(xml, '//DMovimientoCompra/Sesion/Mac'));
        END IF;
        
        INSERT INTO detalle_movimientos_compra ( producto_id,`id_encabezado`, `linea`, `codigo_producto`, `descripcion`, `unidad_venta`, `cantidad`, `precio_venta`, `precio_sin_iva`,`precio_con_iva`, `porcentaje_descuento`, `monto_descuento`, `neto_linea`, `iva_linea`, `pmp`, `pmp_linea`, `total_linea`, total_mostrar, `fecha`, `movimiento`, `origen`, neto_xml, monto_descuento_xml) 
        VALUES (id_producto, id_encabezado, linea, codigo_producto, descripcion, unidad_venta, cantidad, precio_venta, precio_sin_iva, precio_con_iva, porcentaje_descuento, monto_descuento, neto_linea, iva_linea, producto_costo_pmp, producto_costo_pmp*cantidad, total_linea, total_mostrar, fecha, movimiento, origen, neto_xml, monto_descuento_xml);                                        
        
        IF numero_guia_devolucion_referencia_var = 0 THEN
          IF stock < cantidad THEN 
            SET error_stock =  CONCAT(error_stock , "(", id_producto, ",", (stock - cantidad)*-1,")");
          END IF;
        END IF;
          
            
        SET contador = contador + 1;
       END WHILE; 
           
           
       If error_stock != '' THEN
        CALL error(CONCAT("faltan productos: (codigo_producto, cantidad faltante)",error_stock));
       END IF;

      CALL `ContabilizaCompra`(id_encabezado, 'Y');
       SELECT "SUCCESS";
    ELSE
      SELECT "Esta NC ya fue registrada", "", ""; 
    END IF;
    
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarMovimientoNCCompraXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarMovimientoNCCompraXML`(
	IN `param_xml` TEXT



























)
BEGIN
     DECLARE EXIT HANDLER FOR SQLEXCEPTION
     BEGIN
          SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
     BEGIN
          SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
        DECLARE xml TEXT(10000) DEFAULT param_xml;DECLARE contador INT DEFAULT 1;
        
        DECLARE id int(11);DECLARE tipo_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_documento');DECLARE numero_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Numero_folio');DECLARE fecha_documento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_documento');DECLARE rut int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Rut');DECLARE dv  char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Dv');DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Razon_social');DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Giro');DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Direccion');DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Comuna');DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Cuiudad');DECLARE subtotal    int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Subtotal');DECLARE descuento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Descuento');DECLARE porcentaje_descuento_global int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Porcentaje_descuento');DECLARE neto int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Neto');DECLARE iva_porcentaje  int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Iva_porcentaje');DECLARE monto_iva int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_iva');DECLARE total_documento int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Total_docuemnto');DECLARE hora DateTime DEFAULT NOW();DECLARE tipo_precio char(1) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_precio');
      
        DECLARE movimiento char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Movimiento'));DECLARE origen char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimientoCompra/Origen'));DECLARE monto_pagar int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagar');DECLARE monto_pagado_encabezado int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Monto_pagado');DECLARE fecha_encabezado VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha');DECLARE fecha_recepcion VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_recepcion');DECLARE fecha_vencimiento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_vencimiento');DECLARE fecha_aceptacion_contenido VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_aceptacion_contenido');DECLARE fecha_acuse_recibo VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Fecha_acuse_recibo');DECLARE monto_adeudado int(11) DEFAULT (monto_pagar - monto_pagado_encabezado);DECLARE vinculacion int(11) DEFAULT 0;
        
        DECLARE tipo_documento_referencia int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Tipo_documento_referencia');DECLARE numero_documento_referencia int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Numero_documento_referencia');DECLARE causa_referencia VARCHAR(150) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Causa_documento_referencia');DECLARE fecha_documento_referencia DATE DEFAULT STR_TO_DATE(ExtractValue(xml, '//DMovimientoCompra/Fecha_documento_referencia'), '%Y-%m-%d');
        DECLARE bodega int(11) DEFAULT ExtractValue(xml, '//DMovimientoCompra/Bodega');
         DECLARE id_producto int(11);DECLARE id_producto_referenciado int(11);DECLARE id_encabezado int(11);DECLARE linea int(11);DECLARE codigo_producto varchar(20);DECLARE descripcion varchar(100);DECLARE unidad_venta int(11);DECLARE cantidad float(18,4);DECLARE precio_venta float(18,4);DECLARE precio_sin_iva float(18,4);DECLARE precio_con_iva float(18,4);DECLARE porcentaje_descuento int(11);DECLARE monto_descuento float(18,4);DECLARE neto_linea float(18,4);DECLARE iva_linea float(18,4);DECLARE pmp_linea float(18,4);DECLARE pmp float(18,4);DECLARE total_linea float(18,4);DECLARE total_mostrar float(18,4);DECLARE fecha varchar(100);DECLARE neto_xml float(18,4);DECLARE monto_descuento_xml float(18,4);DECLARE stock_bodega float(18,4);DECLARE id_stock_bodega int(11);DECLARE producto_costo_pmp decimal(18,4);DECLARE producto_stock_general float(18,4);DECLARE producto_stock_valorizado decimal(18,4);
         DECLARE stock float(11,4);
      DECLARE error_stock TEXT(1000) DEFAULT '';SET @mensaje_de_error = '';IF (SELECT E.id FROM encabezado_movimientos_compra AS E WHERE E.tipo_documento = 61 AND E.numero_documento = numero_documento AND E.rut = rut LIMIT 1) IS NULL THEN
       
            INSERT INTO `encabezado_movimientos_compra` 
                    (`id`, 
                    `tipo_documento`, 
                    `numero_documento`,  
                    `fecha_documento`, 
                    `rut`, 
                    `dv`,
                    `razon social`, 
                    `giro`, 
                    `direccion`, 
                    `comuna`, 
                    `ciudad`, 
                    `bodega`,  
                    `subtotal`, 
                    `descuento`, 
                    `neto`, 
                    `iva_porcentaje`, 
                    `monto iva`, 
                    `total_documento`,  
                    `hora`,    
                    `movimiento`,
                    `origen`,
                    monto_pagar,
                    monto_pagado,
                    monto_adeudado,
                    fecha,
                    fecha_recepcion,
                    fecha_vencimiento,
                    fecha_aceptacion_contenido,
                    fecha_acuse_recibo,
                    `tipo_documento_referencia`, 
          					`numero_documento_referencia`, 
          					`fecha_documento_referencia`,
          					`causa_documento_referencia`
                    ) 
                    VALUES (id, 
                    tipo_documento, 
                    numero_documento,
                    fecha_documento, 
                    rut, 
                    dv, 
                    razon_social, 
                    giro, 
                    direccion, 
                    comuna , 
                    ciudad , 
                    bodega, 
                    subtotal, 
                    descuento, 
                    neto, 
                    iva_porcentaje, 
                    monto_iva, 
                    total_documento, 
                    hora, 
                    movimiento,
                    origen,
                    monto_pagar,
                    monto_pagado_encabezado,
                    monto_adeudado,
                    fecha_encabezado,
                    fecha_recepcion,
                    fecha_vencimiento,
                    fecha_aceptacion_contenido,
                    fecha_acuse_recibo,
                    tipo_documento_referencia, 
          					numero_documento_referencia, 
          					fecha_documento_referencia, 
          					causa_referencia
                    );SET id = LAST_INSERT_ID();WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[',contador,']/Linea')) != ''))  DO
           
            
            SET id_encabezado = id;SET linea = contador;SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Codigo_producto'));SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Descripcion'));SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Unidad_venta'));SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Cantidad'));SET precio_venta = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_venta'));SET precio_sin_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_sin_iva'));SET precio_con_iva = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Precio_con_iva'));SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Porcentaje_descuento'));SET monto_descuento = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento'));SET neto_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_linea'));SET iva_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Iva_linea'));SET pmp = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Pmp'));SET pmp_linea = pmp * cantidad;SET total_linea = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_linea'));SET fecha = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Fecha'));SET neto_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Neto_xml'));SET monto_descuento_xml = ExtractValue(xml , CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Monto_descuento_xml'));SET total_mostrar = ExtractValue(xml, CONCAT('//Detalle/DDetalleMovimientoCompra[', contador ,']/Total_mostrar'));
        SET id_producto = idProductoDesdeCodigo(codigo_producto);
        SET stock = (SELECT
                      S.stock
                    FROM
                      stock_bodegas AS S
                    WHERE
                      S.id_producto = id_producto
                      AND S.id_bodega = bodega
                    LIMIT 1);
        SELECT P.costo_pmp, P.stock_general, P.stock_valorizado INTO producto_costo_pmp, producto_stock_general, producto_stock_valorizado FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;SET neto_xml = ROUND(neto_linea * (1- (porcentaje_descuento/100)), 4);SET neto_xml = ROUND(neto_xml * (1- (porcentaje_descuento_global/100)), 4);SET producto_stock_general = producto_stock_general - cantidad;SET producto_stock_valorizado = ROUND(producto_stock_valorizado - neto_xml, 4);IF producto_stock_general != 0 AND producto_stock_valorizado != 0 THEN
            SET producto_costo_pmp = ROUND(producto_stock_valorizado/producto_stock_general, 4);END IF;UPDATE productos AS P SET P.costo_pmp = producto_costo_pmp, P.stock_general = producto_stock_general, P.stock_valorizado = producto_stock_valorizado, P.precio_ultima_compra = ROUND(neto_xml/cantidad, 4) WHERE P.id_producto = id_producto;SELECT S.stock , S.id_stock_bodega INTO stock_bodega, id_stock_bodega FROM stock_bodegas AS S WHERE  S.id_bodega = bodega AND S.id_producto = id_producto LIMIT 1;UPDATE stock_bodegas SET stock_bodegas.stock = stock_bodega - cantidad WHERE stock_bodegas.id_stock_bodega = id_stock_bodega;INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
        VALUES             (id_producto, bodega, tipo_documento, numero_documento, '0', '0', '0',cantidad, ROUND(neto_xml/cantidad, 4), ROUND(neto_xml, 4), producto_stock_general, producto_costo_pmp, producto_stock_valorizado, DATE_FORMAT(NOW(), "%Y-%m-%d"), ExtractValue(xml, '//DMovimientoCompra/Sesion/Mac'));INSERT INTO detalle_movimientos_compra ( producto_id,`id_encabezado`, `linea`, `codigo_producto`, `descripcion`, `unidad_venta`, `cantidad`, `precio_venta`, `precio_sin_iva`,`precio_con_iva`, `porcentaje_descuento`, `monto_descuento`, `neto_linea`, `iva_linea`, `pmp`, `pmp_linea`, `total_linea`, total_mostrar, `fecha`, `movimiento`, `origen`, neto_xml, monto_descuento_xml) VALUES (id_producto, id_encabezado, linea, codigo_producto, descripcion, unidad_venta, cantidad, precio_venta, precio_sin_iva, precio_con_iva, porcentaje_descuento, monto_descuento, neto_linea, iva_linea, producto_costo_pmp, producto_costo_pmp*cantidad, total_linea, total_mostrar, fecha, movimiento, origen, neto_xml, monto_descuento_xml);IF stock < cantidad THEN 
              SET error_stock =  CONCAT(error_stock + "(", id_producto, ",", (stock - cantidad)*-1,")");END IF;SET contador = contador + 1;END WHILE;
           
           
       If error_stock != '' THEN
        CALL error(CONCAT("faltan productos: (codigo_producto, cantidad faltante)",error_stock));END IF;SELECT "SUCCESS";ELSE
      SELECT "Esta NC ya fue registrada", "", "";END IF;END;
   COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarMovimientoXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarMovimientoXML`(
	IN `param_xml` MEDIUMTEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE xml MEDIUMTEXT DEFAULT param_xml;
      
    	
	    DECLARE contador INT DEFAULT 1;
	    
	    
	    
	    DECLARE id int(11);
	    DECLARE tipo_documento int(11) DEFAULT ExtractValue(xml, '//DMovimiento/Tipo_documento');
	    
	    DECLARE fecha_documento VARCHAR(100) DEFAULT ExtractValue(xml, '//DMovimiento/Fecha_documento');
	    DECLARE rut char(11) DEFAULT ExtractValue(xml, '//DMovimiento/Rut');
	    DECLARE dv	char(1) DEFAULT ExtractValue(xml, '//DMovimiento/Dv');
	    DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DMovimiento/Razon_social');
	    DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DMovimiento/Giro');
	    DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DMovimiento/Direccion');
	    DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DMovimiento/Comuna');
	    DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DMovimiento/Ciudad');
	    DECLARE subtotal decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Subtotal');
	    DECLARE descuento decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Descuento_bruto');
      DECLARE porcentaje_descento_global decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Porcentaje_descuento');
	    DECLARE neto decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Neto');
	    DECLARE iva_porcentaje	decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Iva_porcentaje');
	    DECLARE monto_iva decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Monto_iva');
	    DECLARE total_documento decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Total_docuemnto');
	    DECLARE tipo_documento_referencia int(11) DEFAULT ExtractValue(xml, '//DMovimiento/Tipo_documento_referencia');
	    DECLARE numero_documento_referencia int(11) DEFAULT ExtractValue(xml, '//DMovimiento/Numero_documento_referencia');
	    DECLARE causa_referencia VARCHAR(150) DEFAULT ExtractValue(xml, '//DMovimiento/Causa_documento_referencia');
	    DECLARE hora DateTime DEFAULT NOW();
	    DECLARE vendedor	char(1) DEFAULT ExtractValue(xml, '//DMovimiento/Vendedor');
	    DECLARE codigo_empresa	char(1) DEFAULT ExtractValue(xml, '//DMovimiento/Codigo_empresa');
	    DECLARE tipo_precio	char(1) DEFAULT ExtractValue(xml, '//DMovimiento/Tipo_precio');
	    DECLARE fecha_documento_referencia DATE DEFAULT MAKEDATE(2000, 1);
      DECLARE fecha_vencimiento DATE DEFAULT STR_TO_DATE(ExtractValue(xml, '//DMovimiento/Fecha_vencimiento'),'%Y-%m-%d');
		  DECLARE movimiento char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimiento/Movimiento'));
      
		  DECLARE origen char(1) DEFAULT ExtractValue(xml , CONCAT('//DMovimiento/Origen'));
      
	    DECLARE monto_pagar decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Monto_pagar');
	    DECLARE monto_pagado_encabezado decimal (18,4) DEFAULT ExtractValue(xml, '//DMovimiento/Monto_pagado');
	    DECLARE monto_adeudado decimal (18,4) DEFAULT (monto_pagar - monto_pagado_encabezado);
      DECLARE is_convenio_var char(1) DEFAULT '0';
      
      DECLARE vinculacion int(11) DEFAULT 0;
      DECLARE estado_dte CHAR(50) DEFAULT '';
      
      DECLARE tipo_traspaso int (11) DEFAULT ExtractValue(xml, '//DMovimiento/Tipo_traspaso_vienes');
      
    DECLARE id_lista_precio int(11);
    DECLARE bodega int(11);
    DECLARE sucursal int(11);
    DECLARE caja int(11) DEFAULT 0;
    DEClARE correlativo_caja int(11) DEFAULT 0;
      
    
    DECLARE stock float(11,4);
    
    
    DECLARE permite_stock_negatico CHAR(1) DEFAULT (SELECT E.permite_stock_negativo FROM empresas AS E LIMIT 1);
	    
	    
     DECLARE id_producto int(11);
     DECLARE id_producto_referenciado int(11);
  	 DECLARE id_encabezado int(11);
  	 DECLARE linea int(11);
  	 DECLARE codigo_producto varchar(20);
  	 DECLARE descripcion varchar(100);
  	 DECLARE unidad_venta int(11);
  	 DECLARE cantidad float(11,4);
  	 DECLARE porcentaje_descuento decimal (18,4);
       
     DECLARE netopv decimal (18,4);
     DECLARE ivapv decimal (18,4);
     DECLARE brutopv decimal (18,4);

     DECLARE precio_bruto_unit decimal (18,4);
     DECLARE precio_bruto_linea decimal (18,4);
     DECLARE monto_desc_bruto_linea decimal (18,4);
     DECLARE total_bruto_c_desc decimal (18,4);

     DECLARE precio_neto_unit decimal (18,4);
     DECLARE precio_neto_linea decimal (18,4);
     DECLARE monto_desc_neto_linea decimal (18,4);
     DECLARE total_neto_c_desc decimal (18,4);

     DECLARE pv_real_unit decimal (18,4);
     DECLARE pv_real_linea decimal (18,4);

     DECLARE pmp decimal (18,4);
     DECLARE pmp_linea decimal (18,4);
	   DECLARE fecha varchar(100);

     
     DECLARE error_stock TEXT(1000) DEFAULT '';
     DECLARE producto_costo_pmp decimal(18,4);
     DECLARE producto_stock_general float(18,4);
     DECLARE producto_stock_valorizado decimal(18,4);
     	 
		 

		 DECLARE id_movimiento int(11);
		 DECLARE forma_pago int(11);
		 DECLARE descripcion_forma_pago VARCHAR(150);
		 DECLARE monto_pagado decimal(18,4);
		 DECLARE numero_operacion int(18);
     DECLARE id_cuenta_banco_var int(11);
		
		 
		 
		 DECLARE numero_folio int(10) DEFAULT NULL;
		 DECLARE nombre_caf varchar(100);
		 DECLARE xml_caf LONGBLOB;
		 DECLARE size_caf INT(11);
		 DECLARE id_folio int(10) DEFAULT (
												SELECT F.id ID
													FROM hef_cafs_folios F 
														INNER JOIN hef_cafs C
															ON C.id = F.id_caf
													WHERE 
														F.rut_emisor	= CONCAT(ExtractValue(xml , '//Empresa/Rut'),'-', ExtractValue(xml , '//Empresa/Dv'))
														AND F.tipo_DTE = tipo_documento
														AND F.estado = 0
														AND F.fecha_vencimiento > NOW()
														ORDER BY F.id ASC 
														LIMIT 1
												);
                                   
    
    DECLARE mac varchar(12) DEFAULT ExtractValue(xml, '//DMovimiento/Sesion/Mac');
   
    
    SET sucursal = idSucursalDesdeMac(mac);
     
    
    SET bodega = idBodegaDesdeSucursal(sucursal);
    
    
    SET caja = (SELECT C.id_caja FROM cajas AS C WHERE C.mac_address_asignada = ExtractValue(xml, '//DMovimiento/Sesion/Mac') LIMIT 1);
    
    SET correlativo_caja = (SELECT A.correlativo FROM apertura_caja AS A WHERE A.id_caja = caja AND A.fecha_cierre IS NULL LIMIT 1);
    
    IF caja IS NULL THEN
      SET caja = 0;
    END IF;
    
    IF correlativo_caja IS NULL THEN
      SET correlativo_caja = 0;
    END IF;
    
    
    
    IF rut != '' AND rut != "66666666" THEN
      SET id_lista_precio = (SELECT C.listasprecios FROM proveedores AS C WHERE C.rut = rut LIMIT 1);
    END IF;
    
    IF id_lista_precio IS NULL OR id_lista_precio = 0 THEN
      SET id_lista_precio = (SELECT S.id_lista_precio FROM sucursales AS S WHERE S.id = sucursal LIMIT 1);
    END IF;
               
             
      SET @mensaje_de_error = '';
      SET vinculacion = ExtractValue(xml, '//DMovimiento/Vinculacion');
			
			IF id_folio IS NOT NULL THEN
      
				UPDATE hef_cafs_folios F
				SET	F.estado = 1,
						F.fecha_consumo = NOW()
				WHERE
					F.id = id_folio
				;
				
				
      SELECT 
        F.folio,
        C.nombre,
        C.xml,
				C.size
      INTO
        numero_folio,
        nombre_caf,
        xml_caf,
        size_caf
			FROM 
				hef_cafs_folios AS F 
			INNER JOIN
				hef_cafs AS C 
				ON F.id_caf = C.id 
			WHERE F.id = id_folio;
				
			END IF;
	    
	   IF numero_folio IS NOT NULL THEN
	   
      
	    IF numero_documento_referencia != 0 THEN
	    	SET fecha_documento_referencia = STR_TO_DATE(ExtractValue(xml, '//DMovimiento/Fecha_documento_referencia'), '%d-%m-%Y');
	    END IF;
      
	    
	    IF monto_adeudado > 0 THEN
	    	IF tipo_documento = 61 THEN
          UPDATE proveedores SET proveedores.credito_utilizado = (proveedores.credito_utilizado - monto_adeudado) WHERE proveedores.rut = rut;
        ELSE
          UPDATE proveedores SET proveedores.credito_utilizado = (proveedores.credito_utilizado + monto_adeudado) WHERE proveedores.rut = rut;
        END IF;
        
        SET is_convenio_var = '1';
	    END IF;
      
      
      IF tipo_documento = 39 THEN
        SET estado_dte = 'CREADO';
      END IF;
	   
      IF tipo_documento = 52 THEN
        INSERT INTO `encabezado_movimientos_guias` 
					(
					`tipo_documento`, 
					`numero_documento`, 
          `tipo_traspaso`,
					`id_folio`, 
					`fecha_documento`, 
					`rut`, 
					`dv`,
					`razon_social`, 
					`giro`, 
					`direccion`, 
					`comuna`, 
					`ciudad`,  
					`subtotal`, 
          porcentaje_desc,
					`descuento`, 
					`neto`, 
					`iva_porcentaje`, 
					`monto iva`, 
					`total_documento`, 
					`tipo_documento_referencia`, 
					`numero_documento_referencia`, 
					`fecha_documento_referencia`,
					`hora`, 
					`vendedor`, 
					`codigo_empresa`, 
					`tipo_precio`, 
					`causa_documento_referencia`, 
					`estado_dte`,
					`movimiento`,
					`origen`,
					monto_pagar,
					monto_pagado,
					monto_adeudado,
          fecha_vencimiento,
          sucursal_id,
          bodega_id,
          caja_id,
          listas_precio_id,
          correlativo) 
					VALUES (
					tipo_documento, 
					numero_folio, 
          tipo_traspaso,
					id_folio, 
					fecha_documento, 
					rut, 
					dv, 
					razon_social, 
					giro, 
					direccion, 
					comuna , 
					ciudad , 
					subtotal, 
          porcentaje_descento_global,
					descuento, 
					neto, 
					iva_porcentaje, 
					monto_iva, 
					total_documento,
					tipo_documento_referencia, 
					numero_documento_referencia, 
					fecha_documento_referencia,
					hora, 
					vendedor, 
					codigo_empresa, 
					tipo_precio, 
					causa_referencia, 
					estado_dte,
					movimiento,
					origen,
					monto_pagar,
					monto_pagado_encabezado,
					monto_adeudado,
          fecha_vencimiento,
          sucursal,
          bodega,
          caja,
          id_lista_precio,
          correlativo_caja
					);
      ELSE
        INSERT INTO `encabezado_movimientos` 
					(
					`tipo_documento`, 
					`numero_documento`, 
					`id_folio`, 
					`fecha_documento`, 
					`rut`, 
					`dv`,
					`razon_social`, 
					`giro`, 
					`direccion`, 
					`comuna`, 
					`ciudad`,  
					`subtotal`, 
          porcentaje_desc,
					`descuento`, 
					`neto`, 
					`iva_porcentaje`, 
					`monto iva`, 
					`total_documento`, 
					`tipo_documento_referencia`, 
					`numero_documento_referencia`, 
					`fecha_documento_referencia`,
					`hora`, 
					`vendedor`, 
					`codigo_empresa`, 
					`tipo_precio`, 
					`causa_documento_referencia`, 
					`estado_dte`,
					`movimiento`,
					`origen`,
					monto_pagar,
					monto_pagado,
					monto_adeudado,
          fecha_vencimiento,
          sucursal_id,
          bodega_id,
          caja_id,
          listas_precio_id,
          correlativo,
          is_convenio) 
					VALUES (
					tipo_documento, 
					numero_folio, 
					id_folio, 
					fecha_documento, 
					rut, 
					dv, 
					razon_social, 
					giro, 
					direccion, 
					comuna , 
					ciudad , 
					subtotal, 
          porcentaje_descento_global,
					descuento, 
					neto, 
					iva_porcentaje, 
					monto_iva, 
					total_documento,
					tipo_documento_referencia, 
					numero_documento_referencia, 
					fecha_documento_referencia,
					hora, 
					vendedor, 
					codigo_empresa, 
					tipo_precio, 
					causa_referencia, 
					estado_dte,
					movimiento,
					origen,
					monto_pagar,
					monto_pagado_encabezado,
					monto_adeudado,
          fecha_vencimiento,
          sucursal,
          bodega,
          caja,
          id_lista_precio,
          correlativo_caja,
          is_convenio_var
					);
      END IF;
      
      SET id = LAST_INSERT_ID();

		   WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[',contador,']/Codigo_producto')) != ''))  DO
		   
		   	
		   	SET id_encabezado = id;
				SET linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Linea'));
				SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Codigo_producto'));
				SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Descripcion'));
				SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Unidad_venta'));
				SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Cantidad'));
				SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Porcentaje_descuento'));
              
        SET precio_bruto_unit = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_bruto_unit'));
        SET precio_bruto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_bruto_linea'));
        SET monto_desc_bruto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Monto_desc_bruto_linea'));
        SET total_bruto_c_desc = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Total_bruto_c_desc'));
        
        SET precio_neto_unit = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_neto_unit'));
        SET precio_neto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_neto_linea'));
        SET monto_desc_neto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Monto_desc_neto_linea'));
        SET total_neto_c_desc = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Total_neto_c_desc'));
        
        SET pmp = ROUND(ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Pmp')), 4);
        SET pmp_linea = ROUND(pmp * cantidad, 4);
				SET fecha = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Fecha'));
        
        SET brutopv = ROUND(total_bruto_c_desc / cantidad, 4);
        SET netopv = ROUND(brutopv / (1 + (iva_porcentaje / 100)), 4);
        SET ivapv = ROUND(brutopv - netopv, 4);
        
        
        SET pv_real_linea = ROUND(total_neto_c_desc * (1 - (porcentaje_descento_global / 100)), 4);
        SET pv_real_unit = ROUND(pv_real_linea / cantidad, 4);
        

        
        SET id_producto = idProductoDesdeCodigo(codigo_producto);
        
          
        
        SET stock = (SELECT
                      S.stock
                    FROM
                      stock_bodegas AS S
                    WHERE
                      S.id_producto = id_producto
                      AND S.id_bodega = bodega
                    LIMIT 1);
         
        
        SELECT P.costo_pmp, P.stock_general, P.stock_valorizado INTO producto_costo_pmp, producto_stock_general, producto_stock_valorizado FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;             
        
        
          IF movimiento = 'S' THEN 
            SET producto_stock_general = ROUND(producto_stock_general - cantidad, 4);
            
            IF producto_stock_general = 0 THEN
              SET producto_stock_valorizado = 0;
            ELSE
              SET producto_stock_valorizado = ROUND(producto_stock_valorizado - pmp_linea, 4);
            END IF;
            
            IF producto_stock_general != 0 AND producto_stock_valorizado != 0 THEN
              SET producto_costo_pmp = ROUND(producto_stock_valorizado/producto_stock_general, 4);
            END IF;
            
            UPDATE productos AS P SET P.costo_pmp = producto_costo_pmp, P.stock_general = producto_stock_general, P.stock_valorizado = producto_stock_valorizado WHERE P.id_producto = id_producto;
            UPDATE stock_bodegas SET stock = stock - cantidad WHERE  id_bodega = bodega AND stock_bodegas.id_producto = id_producto;
            INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
            VALUES             (id_producto, bodega, tipo_documento, numero_folio,'0', '0', '0', cantidad, pmp, pmp_linea, producto_stock_general, producto_costo_pmp, producto_stock_valorizado, DATE_FORMAT(NOW(), "%Y-%m-%d"), mac);
          ELSE 
              
            SELECT detalle_movimientos.id 
            INTO id_producto_referenciado 
            FROM detalle_movimientos
            WHERE 
              detalle_movimientos.id_encabezado = ( SELECT encabezado_movimientos.id FROM encabezado_movimientos 
                                                      WHERE 
                                                        encabezado_movimientos.tipo_documento = tipo_documento_referencia
                                                        AND  encabezado_movimientos.numero_documento = numero_documento_referencia
                                                        LIMIT 1
                                                    )
              AND detalle_movimientos.producto_id = id_producto 
              LIMIT 1;
                            
            
            
            UPDATE detalle_movimientos SET 
              detalle_movimientos.usado_nota_credito_debito = 1
            WHERE 
              detalle_movimientos.id = id_producto_referenciado;
            
            SET producto_stock_general = ROUND(producto_stock_general + cantidad, 4);
            SET producto_stock_valorizado = ROUND(producto_stock_valorizado + pmp_linea, 4);
            SET producto_costo_pmp = ROUND(producto_stock_valorizado/producto_stock_general, 4);

            UPDATE productos AS P SET P.costo_pmp = producto_costo_pmp, P.stock_general = producto_stock_general, P.stock_valorizado = producto_stock_valorizado WHERE P.id_producto = id_producto;
            UPDATE stock_bodegas SET stock = stock + cantidad WHERE  id_bodega = bodega AND stock_bodegas.id_producto = id_producto;
            INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
            VALUES             (id_producto, bodega, tipo_documento, numero_folio, cantidad, pmp, pmp_linea, '0', '0', '0', producto_stock_general, producto_costo_pmp, producto_stock_valorizado, DATE_FORMAT(NOW(), "%Y-%m-%d"), mac);
            
          END IF;
                    
                    
        
        
        IF tipo_documento = 52 THEN 
          INSERT INTO detalle_movimientos_guias ( 
         producto_id,
         `id_encabezado`,
         `linea`,
         `codigo_producto`,
         `descripcion`,
         `unidad_venta`,
         `cantidad`,
         `porcentaje_desc`,
          
          netopv,
          ivapv,
          brutopv,
          
          precio_bruto_unit,
          precio_bruto_linea,
          monto_desc_bruto_linea,
          total_bruto_c_desc,
          
          precio_neto_unit,
          precio_neto_linea,
          monto_desc_neto_linea,
          total_neto_c_desc,
          
          pv_real_unit,
          pv_real_linea,
          
         `pmp`,
         `pmp_linea`,
         `fecha`,
         `movimiento`,
         `origen`) 
         VALUES (
         id_producto,
         id_encabezado,
         linea,
         codigo_producto,
         descripcion,
         unidad_venta,
         cantidad,
         porcentaje_descuento,
        
        netopv,
        ivapv,
        brutopv,
        
        precio_bruto_unit,
        precio_bruto_linea,
        monto_desc_bruto_linea,
        total_bruto_c_desc,
        
        precio_neto_unit,
        precio_neto_linea,
        monto_desc_neto_linea,
        total_neto_c_desc,
        
        pv_real_unit,
        pv_real_linea,
          
         pmp,
         pmp_linea,
         fecha,
         movimiento,
         origen);  
        ELSE
          INSERT INTO detalle_movimientos ( 
         producto_id,
         `id_encabezado`,
         `linea`,
         `codigo_producto`,
         `descripcion`,
         `unidad_venta`,
         `cantidad`,
         `porcentaje_desc`,
          
          netopv,
          ivapv,
          brutopv,
          
          precio_bruto_unit,
          precio_bruto_linea,
          monto_desc_bruto_linea,
          total_bruto_c_desc,
          
          precio_neto_unit,
          precio_neto_linea,
          monto_desc_neto_linea,
          total_neto_c_desc,
          
          pv_real_unit,
          pv_real_linea,
          
         `pmp`,
         `pmp_linea`,
         `fecha`,
         `movimiento`,
         `origen`) 
         VALUES (
         id_producto,
         id_encabezado,
         linea,
         codigo_producto,
         descripcion,
         unidad_venta,
         cantidad,
         porcentaje_descuento,
        
        netopv,
        ivapv,
        brutopv,
        
        precio_bruto_unit,
        precio_bruto_linea,
        monto_desc_bruto_linea,
        total_bruto_c_desc,
        
        precio_neto_unit,
        precio_neto_linea,
        monto_desc_neto_linea,
        total_neto_c_desc,
        
        pv_real_unit,
        pv_real_linea,
          
         pmp,
         pmp_linea,
         fecha,
         movimiento,
         origen);  
        END IF;
         
                    
        IF movimiento = 'S' THEN 
          IF permite_stock_negatico = '0' THEN
            IF stock < cantidad THEN 
              SET error_stock =  CONCAT(error_stock + "(", id_producto, ",", (stock - cantidad)*-1,")");
            END IF;
          END IF;
        END IF; 
        
        
		    SET contador = contador + 1;
		   END WHILE; 
		   
		   SET contador = 1;
		   WHILE ((contador < 50) && (ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[',contador,']/Forma_pago')) != ''))  DO
		   
		   	
		   	SET id_movimiento = id;
		   	
				SET forma_pago = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Forma_pago'));
				SET descripcion_forma_pago = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Descripcion_forma_pago'));
				SET monto_pagado = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Monto_pagado'));
				SET numero_operacion = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Numero_operacion'));
		   	SET id_cuenta_banco_var = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Id_cuenta_bancaria'));
				
		   	
		   	INSERT INTO pagos_movimientos (`id_movimiento`, `forma_pago`, `descripcion_forma_pago`, `monto_pagado`, `numero_operacion`, `correlativo_caja`, `id_caja`, `id_cta_banco`) 
        VALUES (id_movimiento, forma_pago, descripcion_forma_pago, monto_pagado, numero_operacion, correlativo_caja, caja, id_cuenta_banco_var);
        
		    SET contador = contador + 1;
        
		   END WHILE;
       
       IF vinculacion != 0 THEN
		   	UPDATE encabezado_nota_venta SET encabezado_nota_venta.id_movimeinto = id WHERE encabezado_nota_venta.id = vinculacion;
		   END IF;
       
       if error_stock != '' THEN
        SET @mensaje_de_error = CONCAT("faltan productos: (codigo_producto, cantidad faltante)",error_stock);
       END IF;

       IF @mensaje_de_error = '' THEN
        IF tipo_documento = 52 THEN
          CALL ContabilizarGuia(id, 'Y');
        ELSE
          CALL ContabilizarVenta(id, 'Y');
        END IF;
        
		    SELECT id, numero_folio, nombre_caf, "Fue existoso" AS descripcion_error, true AS exito, xml_caf AS xml, size_caf AS size;
       END IF;
    ELSE
			SELECT id, numero_folio, nombre_caf, "No quedan folios disponibles" AS descripcion_error, false AS exito, xml_caf AS xml, size_caf AS size;
	  END IF;
   END;
   
    IF @mensaje_de_error != '' THEN
      SELECT @mensaje_de_error AS descripcion_error, false AS exito, NOW();
      ROLLBACK;
    ELSE
      
      COMMIT;
    END IF;
   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarNotaVentaXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarNotaVentaXML`(
	IN `param_xml` TEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(10000) DEFAULT param_xml;
    	 DECLARE contador int(11) DEFAULT 1;
    	 
	    
	    
	    DECLARE id int(11) DEFAULT (SELECT IFNULL(max(id) + 1, 1) FROM encabezado_nota_venta);
	    DECLARE rut char(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Rut');
	    DECLARE dv	char(1) DEFAULT ExtractValue(xml, '//DNotaVenta/Dv');
	    DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DNotaVenta/Razon_social');
	    DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DNotaVenta/Giro');
	    DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DNotaVenta/Direccion');
	    DECLARE comuna char(50) DEFAULT ExtractValue(xml, '//DNotaVenta/Comuna');
	    DECLARE ciudad char(50) DEFAULT ExtractValue(xml, '//DNotaVenta/Cuiudad');
	    DECLARE sucursal	int(11);
	    DECLARE id_lista_precio int(11);
      DECLARE bodega int(11);
	    DECLARE subtotal	int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Subtotal');
	    DECLARE descuento decimal (18,4) DEFAULT ExtractValue(xml, '//DNotaVenta/Descuento');
      DECLARE porcentaje_descento_global decimal (18,4) DEFAULT ExtractValue(xml, '//DNotaVenta/Porcentaje_descuento');
	    DECLARE neto int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Neto');
	    DECLARE iva_porcentaje	int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Iva_porcentaje');
	    DECLARE monto_iva int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Monto_iva');
	    DECLARE total_documento int(11) DEFAULT ExtractValue(xml, '//DNotaVenta/Total_docuemnto');
	    DECLARE fecha_documento Date DEFAULT DATE_FORMAT(NOW(),'%Y-%m-%d');
	    DECLARE vendedor	char(1) DEFAULT ExtractValue(xml, '//DNotaVenta/Vendedor');
	    DECLARE codigo_empresa	char(1) DEFAULT ExtractValue(xml, '//DNotaVenta/Codigo_empresa');
	    DECLARE tipo_precio	char(1) DEFAULT ExtractValue(xml, '//DNotaVenta/Tipo_precio');
      DECLARE caja int(11) DEFAULT 0;
	    
	    DECLARE vinculacion int(11) DEFAULT 0;
	    
	    
	    DECLARE estado int(11) DEFAULT 0;
	    
	    
      DECLARE id_producto int(11);
		 DECLARE id_encabezado int(11);
		 DECLARE codigo_producto varchar(20);
		 DECLARE descripcion varchar(100);
		 DECLARE unidad_venta int(11);
  	 DECLARE cantidad float(11,4);
  	 DECLARE porcentaje_descuento decimal (18,4);
       
     DECLARE netopv decimal (18,4);
     DECLARE ivapv decimal (18,4);
     DECLARE brutopv decimal (18,4);

     DECLARE precio_bruto_unit decimal (18,4);
     DECLARE precio_bruto_linea decimal (18,4);
     DECLARE monto_desc_bruto_linea decimal (18,4);
     DECLARE total_bruto_c_desc decimal (18,4);

     DECLARE precio_neto_unit decimal (18,4);
     DECLARE precio_neto_linea decimal (18,4);
     DECLARE monto_desc_neto_linea decimal (18,4);
     DECLARE total_neto_c_desc decimal (18,4);

     DECLARE pv_real_unit decimal (18,4);
     DECLARE pv_real_linea decimal (18,4);

     DECLARE pmp decimal (18,4);
     DECLARE pmp_linea decimal (18,4) DEFAULT 0;
	   DECLARE fecha varchar(100);
     
       
    SET sucursal = idSucursalDesdeMac(ExtractValue(xml, '//DNotaVenta/Sesion/Mac'));
    
    
    SET bodega = idBodegaDesdeSucursal(sucursal);
    
    
    SET caja = (SELECT C.id_caja FROM cajas AS C WHERE C.mac_address_asignada = ExtractValue(xml, '//DMovimiento/Sesion/Mac') LIMIT 1);
    
    
    
    IF rut != '' AND rut != "66666666" THEN
      SET id_lista_precio = (SELECT C.listasprecios FROM proveedores AS C WHERE C.rut = rut LIMIT 1);
    END IF;
    
    IF id_lista_precio IS NULL THEN
      SET id_lista_precio = (SELECT S.id_lista_precio FROM sucursales AS S WHERE S.id = sucursal LIMIT 1);
    END IF;


	    SET vinculacion = ExtractValue(xml, '//DNotaVenta/Vinculacion');
	    
	    
	   INSERT INTO `encabezado_nota_venta` (`id`, `fecha_documento`, `rut`, `dv`, `razon social`, `giro`, `direccion`, `comuna`, `ciudad`, `sucursal`, caja, `listasprecios`, `subtotal`, `descuento`, `porcentaje_desc` ,`neto`, `iva_porcentaje`, `monto iva`, `total_documento`, `vendedor`, `codigo_empresa`, `tipo_precio`, `id_movimeinto`) 
			VALUES  										(id, fecha_documento, 		rut,  dv,   razon_social,   giro,    direccion,   comuna ,  ciudad , sucursal,  caja, id_lista_precio,   subtotal,   descuento, porcentaje_descento_global  , neto,   iva_porcentaje,   monto_iva,   total_documento,   vendedor,   codigo_empresa,   tipo_precio,   estado);
			 
		   WHILE ((contador < 61) && (ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[',contador,']/Linea')) != ''))  DO
		   
		   	
		   	SET id_encabezado = id;
				SET codigo_producto = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Codigo_producto'));
				SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Descripcion'));
				SET unidad_venta = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Unidad_venta'));
				SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Cantidad'));
				SET porcentaje_descuento = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Porcentaje_descuento'));
              
        SET precio_bruto_unit = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_bruto_unit'));
        SET precio_bruto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_bruto_linea'));
        SET monto_desc_bruto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Monto_desc_bruto_linea'));
        SET total_bruto_c_desc = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Total_bruto_c_desc'));
        
        SET precio_neto_unit = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_neto_unit'));
        SET precio_neto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Precio_neto_linea'));
        SET monto_desc_neto_linea = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Monto_desc_neto_linea'));
        SET total_neto_c_desc = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Total_neto_c_desc'));
        
        
        
        SET pmp = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Pmp'));
        
				SET fecha = ExtractValue(xml , CONCAT('//Detalle/DMovimientoDetalle[', contador ,']/Fecha'));
        
        SET brutopv = ROUND(total_bruto_c_desc / cantidad, 4);
        SET netopv = ROUND(brutopv / (1 + (iva_porcentaje / 100)), 4);
        SET ivapv = ROUND(brutopv - netopv, 4);
        
        
        SET pv_real_linea = ROUND(total_neto_c_desc * (1 - (porcentaje_descento_global / 100)), 4);
        SET pv_real_unit = ROUND(pv_real_linea / cantidad, 4);
        
        
        SET id_producto = idProductoDesdeCodigo(codigo_producto);
        
          INSERT INTO detalle_nota_venta ( 
         producto_id,
         `id_encabezado`,
         `linea`,
         `codigo_producto`,
         `descripcion`,
         `unidad_venta`,
         `cantidad`,
         `porcentaje_desc`,
          
          netopv,
          ivapv,
          brutopv,
          
          precio_bruto_unit,
          precio_bruto_linea,
          monto_desc_bruto_linea,
          total_bruto_c_desc,
          
          precio_neto_unit,
          precio_neto_linea,
          monto_desc_neto_linea,
          total_neto_c_desc,
          
          pv_real_unit,
          pv_real_linea,
          
         `pmp`,
         `pmp_linea`,
         `fecha`,
         `movimiento`,
         `origen`) 
         VALUES (
         id_producto,
         id_encabezado,
         linea,
         codigo_producto,
         descripcion,
         unidad_venta,
         cantidad,
         porcentaje_descuento,
        
        netopv,
        ivapv,
        brutopv,
        
        precio_bruto_unit,
        precio_bruto_linea,
        monto_desc_bruto_linea,
        total_bruto_c_desc,
        
        precio_neto_unit,
        precio_neto_linea,
        monto_desc_neto_linea,
        total_neto_c_desc,
        
        pv_real_unit,
        pv_real_linea,
          
         pmp,
         pmp_linea,
         fecha,
         movimiento,
         origen);  
         
		      SET contador = contador + 1;
		    
		   END WHILE;
		   
		   IF vinculacion != 0 THEN
		   	UPDATE `encabezado_cotizaciones` SET `id_nota_venta` = id WHERE `encabezado_cotizaciones`.`id` = vinculacion;
		   END IF;
		   
		   SELECT "SUCCESS", id;
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarProducto2XML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarProducto2XML`(
	IN `param_xml` TEXT









)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;

    	DECLARE codigo_categoria_producto CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Codigo_categoria_producto');
    	
    	DECLARE nombre_producto_venta CHAR(100) DEFAULT ExtractValue(xml, '//DProducto/Nombre_producto_venta');DECLARE producto_descripcion_corta CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Producto_descripcion_corta');DECLARE costo_pmp FLOAT DEFAULT ExtractValue(xml, '//DProducto/Costo_pmp');DECLARE stock_general INT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_general');DECLARE stock_valorizado FLOAT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_valorizado');DECLARE precio_ultima_compra FLOAT DEFAULT ExtractValue(xml, '//DProducto/Precio_ultima_compra');DECLARE marca_producto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Marca_producto');DECLARE unidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_compra');DECLARE cantidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_compra');DECLARE unidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_venta');DECLARE cantidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_venta');DECLARE precio_venta_neto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Precio_venta_neto');DECLARE prioridad_precio_venta_neto CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Prioridad_precio_venta_neto');DECLARE disponible_venta CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_venta');DECLARE disponible_compra CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_compra');DECLARE disponible_web CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_web');
    	

      DECLARE id_producto int(11);DECLARE codigo_proveedor varchar(50) DEFAULT '';DECLARE rut_proveedor varchar(20) DEFAULT '';DECLARE descripcion_compra varchar(100) DEFAULT '';DECLARE codigo_barra varchar(16) DEFAULT '';
      DECLARE contador int(11) DEFAULT 1;DECLARE prefijo_ean13 char(4) DEFAULT (SELECT E.prefijo_codigo_barra_ean13 FROM empresas AS E LIMIT 1);
      SET id_producto = (SELECT MAX(P.id_producto) + 1 FROM productos AS P);INSERT INTO productos (
      id_producto,
      `codigo_categoria_producto`,
      
      
      `nombre_producto_venta`, 
      `producto_descripcion_corta`, 
      `costo_pmp`, 
      `stock_general`, 
      `stock_valorizado`, 
      `precio_ultima_compra`, 
      `marca_producto`, 
      `unidad_compra`, 
      `cantidad_compra`, 
      `unidad_venta`, 
      `cantidad_venta`, 
      `precio_venta_neto`, 
      `prioridad_precio_venta_neto`, 
      `disponible_venta`, 
      `disponible_compra`, 
      `disponible_web`,
       `fecha_ult_compra`, 
       `fecha_costo_promedio`) 
       VALUES (
       id_producto,
       codigo_categoria_producto ,
        
        
        nombre_producto_venta,
        producto_descripcion_corta,
        0,
        0,
        0,
        0,
        marca_producto,
        unidad_compra,
        cantidad_compra,
        unidad_venta,
        cantidad_venta,
        precio_venta_neto,
        prioridad_precio_venta_neto,
        disponible_venta,
        disponible_compra,
        disponible_web,
        
        
       '1900-01-01', 
       '1900-01-01');INSERT INTO stock_bodegas (`id_producto`, `id_bodega`) 
    SELECT id_producto, B.id FROM bodegas AS B;WHILE (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra')) != '') OR (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor')) != '')  DO
       
        
        SET rut_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Rut_proveedor'));SET codigo_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor'));SET descripcion_compra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Descripcion_compra'));SET codigo_barra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra'));IF SUBSTRING(codigo_barra, 1, 4) like CONCAT(prefijo_ean13, '%') AND (SELECT R.id_codigo_alternativo FROM relacion_codigos_alternativos_productos AS R WHERE R.codigo_barra = codigo_barra LIMIT 1) IS NOT NULL THEN
          CALL error(CONCAT("Ya existe este codigo de barra ", codigo_barra, ", vuelve a generar el codigo para poder guardarlo"));END IF;
        INSERT INTO relacion_codigos_alternativos_productos (`producto_id`, `proveedor_rut`, `codigo_producto_proveedor`, `descripcion_compra`, `codigo_barra`) 
        VALUES (id_producto, rut_proveedor, codigo_proveedor, descripcion_compra, codigo_barra);SET contador = contador + 1;END WHILE;SELECT "SUCCESS", id_producto AS new_id;END;COMMIT;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarProducto3XML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarProducto3XML`(
	IN `param_xml` TEXT













)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    

    	DECLARE codigo_categoria_producto CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Codigo_categoria_producto');
    	
    	
    	DECLARE nombre_producto_venta CHAR(100) DEFAULT ExtractValue(xml, '//DProducto/Nombre_producto_venta');
    	DECLARE producto_descripcion_corta CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Producto_descripcion_corta');
    	DECLARE costo_pmp FLOAT DEFAULT ExtractValue(xml, '//DProducto/Costo_pmp');
    	DECLARE stock_general INT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_general');
    	DECLARE stock_valorizado FLOAT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_valorizado');
    	DECLARE precio_ultima_compra FLOAT DEFAULT ExtractValue(xml, '//DProducto/Precio_ultima_compra');
    	DECLARE marca_producto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Marca_producto');
    	DECLARE unidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_compra');
    	DECLARE cantidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_compra');
    	DECLARE unidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_venta');
    	DECLARE cantidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_venta');
    	DECLARE precio_venta_neto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Precio_venta_neto');
    	DECLARE prioridad_precio_venta_neto CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Prioridad_precio_venta_neto');
    	DECLARE disponible_venta CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_venta');
    	DECLARE disponible_compra CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_compra');
    	DECLARE disponible_web CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_web');
    	
    	

      DECLARE id_producto int(11);
      
      DECLARE codigo_proveedor varchar(50) DEFAULT '';
      DECLARE rut_proveedor varchar(20) DEFAULT '';
      DECLARE descripcion_compra varchar(100) DEFAULT '';
      DECLARE cantidad_compra_var int (11);
      DECLARE cantidad_venta_var int (11);
      DECLARE codigo_barra varchar(20) DEFAULT '';
      
      
      DECLARE contador int(11) DEFAULT 1;
      
      DECLARE prefijo_ean13 char(4) DEFAULT (SELECT E.prefijo_codigo_barra_ean13 FROM empresas AS E LIMIT 1);
      
      
      SET id_producto = (SELECT MAX(P.id_producto) + 1 FROM productos AS P);
      
      INSERT INTO productos (
      id_producto,
      `codigo_categoria_producto`,
      
      
      `nombre_producto_venta`, 
      `producto_descripcion_corta`, 
      `costo_pmp`, 
      `stock_general`, 
      `stock_valorizado`, 
      `precio_ultima_compra`, 
      `marca_producto`, 
      `unidad_compra`, 
      `cantidad_compra`, 
      `unidad_venta`, 
      `cantidad_venta`, 
      `precio_venta_neto`, 
      `prioridad_precio_venta_neto`, 
      `disponible_venta`, 
      `disponible_compra`, 
      `disponible_web`,
       `fecha_ult_compra`, 
       `fecha_costo_promedio`) 
       VALUES (
       id_producto,
       codigo_categoria_producto ,
        
        
        nombre_producto_venta,
        producto_descripcion_corta,
        0,
        0,
        0,
        0,
        marca_producto,
        unidad_compra,
        cantidad_compra,
        unidad_venta,
        cantidad_venta,
        precio_venta_neto,
        prioridad_precio_venta_neto,
        disponible_venta,
        disponible_compra,
        disponible_web,
        
        
       '1900-01-01', 
       '1900-01-01');
    
    
    
    INSERT INTO stock_bodegas (`id_producto`, `id_bodega`) 
    SELECT id_producto, B.id FROM bodegas AS B;
    
    WHILE (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra')) != '') OR (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor')) != '')  DO
       
        
        SET rut_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Rut_proveedor'));
        SET codigo_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor'));
        SET descripcion_compra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Descripcion_compra'));
        SET cantidad_compra_var = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Cantidad_compra'));
        SET cantidad_venta_var = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Cantidad_venta'));
        SET codigo_barra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra'));
        
        
        IF SUBSTRING(codigo_barra, 1, 4) like CONCAT(prefijo_ean13, '%') AND (SELECT R.id_codigo_alternativo FROM relacion_codigos_alternativos_productos AS R WHERE R.codigo_barra = codigo_barra LIMIT 1) IS NOT NULL THEN
          CALL error(CONCAT("Ya existe este codigo de barra ", codigo_barra, ", vuelve a generar el codigo para poder guardarlo"));
        END IF;
       
       	
        INSERT INTO relacion_codigos_alternativos_productos (`producto_id`, `proveedor_rut`, `codigo_producto_proveedor`, `descripcion_compra`, `cantidad_compra`, `cantidad_venta`, `codigo_barra`) 
        VALUES (id_producto, rut_proveedor, codigo_proveedor, descripcion_compra, cantidad_compra_var, cantidad_venta_var, codigo_barra); 

         
        SET contador = contador + 1;
       END WHILE;
    
		
		SELECT "SUCCESS", id_producto AS new_id;
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarProductoXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarProductoXML`(
	IN `param_xml` TEXT








)
    COMMENT 'Se puede borrar parece'
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    

    	DECLARE codigo_categoria_producto CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Codigo_categoria_producto');
    	
    	
    	DECLARE nombre_producto_venta CHAR(100) DEFAULT ExtractValue(xml, '//DProducto/Nombre_producto_venta');
    	DECLARE producto_descripcion_corta CHAR(50) DEFAULT ExtractValue(xml, '//DProducto/Producto_descripcion_corta');
    	DECLARE costo_pmp FLOAT DEFAULT ExtractValue(xml, '//DProducto/Costo_pmp');
    	DECLARE stock_general INT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_general');
    	DECLARE stock_valorizado FLOAT(11) DEFAULT ExtractValue(xml, '//DProducto/Stock_valorizado');
    	DECLARE precio_ultima_compra FLOAT DEFAULT ExtractValue(xml, '//DProducto/Precio_ultima_compra');
    	DECLARE marca_producto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Marca_producto');
    	DECLARE unidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_compra');
    	DECLARE cantidad_compra INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_compra');
    	DECLARE unidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Unidad_venta');
    	DECLARE cantidad_venta INT(11) DEFAULT ExtractValue(xml, '//DProducto/Cantidad_venta');
    	DECLARE precio_venta_neto INT(11) DEFAULT ExtractValue(xml, '//DProducto/Precio_venta_neto');
    	DECLARE prioridad_precio_venta_neto CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Prioridad_precio_venta_neto');
    	DECLARE disponible_venta CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_venta');
    	DECLARE disponible_compra CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_compra');
    	DECLARE disponible_web CHAR(1) DEFAULT ExtractValue(xml, '//DProducto/Disponible_web');
    	
    	

      DECLARE id_producto int(11);
      
      DECLARE codigo_proveedor varchar(50) DEFAULT '';
      DECLARE rut_proveedor varchar(20) DEFAULT '';
      DECLARE descripcion_compra varchar(100) DEFAULT '';
      DECLARE codigo_barra varchar(16) DEFAULT '';
      
      
      DECLARE contador int(11) DEFAULT 1;
      
      
      INSERT INTO productos (
      `codigo_categoria_producto`,
      
      
      `nombre_producto_venta`, 
      `producto_descripcion_corta`, 
      `costo_pmp`, 
      `stock_general`, 
      `stock_valorizado`, 
      `precio_ultima_compra`, 
      `marca_producto`, 
      `unidad_compra`, 
      `cantidad_compra`, 
      `unidad_venta`, 
      `cantidad_venta`, 
      `precio_venta_neto`, 
      `prioridad_precio_venta_neto`, 
      `disponible_venta`, 
      `disponible_compra`, 
      `disponible_web`,
       `fecha_ult_compra`, 
       `fecha_costo_promedio`) 
       VALUES (
       codigo_categoria_producto ,
        
        
        nombre_producto_venta,
        producto_descripcion_corta,
        0,
        0,
        0,
        0,
        marca_producto,
        unidad_compra,
        cantidad_compra,
        unidad_venta,
        cantidad_venta,
        precio_venta_neto,
        prioridad_precio_venta_neto,
        disponible_venta,
        disponible_compra,
        disponible_web,
        
        
       '1900-01-01', 
       '1900-01-01');
    
    
    SET id_producto = LAST_INSERT_ID();
    
    INSERT INTO stock_bodegas (`id_producto`, `id_bodega`) 
    SELECT id_producto, B.id FROM bodegas AS B;
    
    WHILE (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra')) != '') OR (ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor')) != '')  DO
       
        
        SET rut_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Rut_proveedor'));
        SET codigo_proveedor = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_provedor'));
        SET descripcion_compra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Descripcion_compra'));
        SET codigo_barra = ExtractValue(xml , CONCAT('//DProducto/Detalle/DRelacionCodigosAlternativos[',contador,']/Codigo_barra'));
       
       	
        INSERT INTO relacion_codigos_alternativos_productos (`producto_id`, `proveedor_rut`, `codigo_producto_proveedor`, `descripcion_compra`, `codigo_barra`) 
        VALUES (id_producto, rut_proveedor, codigo_proveedor, descripcion_compra, codigo_barra); 

         
        SET contador = contador + 1;
       END WHILE;
    
		
		SELECT "SUCCESS", id_producto AS new_id;
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarProveedores2XML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarProveedores2XML`(
	IN `param_XML` TEXT
)
    COMMENT 'despues de la 1.7.0.0'
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;ROLLBACK;END;DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;ROLLBACK;END;START TRANSACTION;BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;

	    DECLARE rut int(11) DEFAULT ExtractValue(xml, '//DProveedores/Rut');
      DECLARE dv char(1) DEFAULT ExtractValue(xml, '//DProveedores/Dv');
      DECLARE razon_social char(100) DEFAULT ExtractValue(xml, '//DProveedores/Razon_social');
      DECLARE direccion char(100) DEFAULT ExtractValue(xml, '//DProveedores/Direccion');
      DECLARE comuna int(11) DEFAULT ExtractValue(xml, '//DProveedores/Comuna');
      DECLARE region char(50)	 DEFAULT ExtractValue(xml, '//DProveedores/Region');
      DECLARE ciudad int(11) DEFAULT ExtractValue(xml, '//DProveedores/Ciudad');
      DECLARE telefono char(50)	 DEFAULT ExtractValue(xml, '//DProveedores/Telefono');
      DECLARE email char(100) DEFAULT ExtractValue(xml, '//DProveedores/Email');
      DECLARE giro char(100) DEFAULT ExtractValue(xml, '//DProveedores/Giro');
      DECLARE condicion_venta int(11) DEFAULT ExtractValue(xml, '//DProveedores/Condicion_venta');
      DECLARE forma_pago int(11) DEFAULT ExtractValue(xml, '//DProveedores/Forma_pago');
      DECLARE cantidad_dias int(11) DEFAULT ExtractValue(xml, '//DProveedores/Cantidad_dias');
      DECLARE credito_maximo int(11) DEFAULT ExtractValue(xml, '//DProveedores/Credito_maximo');
      DECLARE credito_utilizado int(11) DEFAULT ExtractValue(xml, '//DProveedores/Credito_utilizado');
      DECLARE credito_disponible int(11) DEFAULT ExtractValue(xml, '//DProveedores/Credito_disponible');
      DECLARE estado_cliente int(11) DEFAULT ExtractValue(xml, '//DProveedores/Estado_cliente');
      DECLARE contacto char(100) DEFAULT ExtractValue(xml, '//DProveedores/Contacto');
      DECLARE cuenta_contable varchar(15) DEFAULT ExtractValue(xml, '//DProveedores/Cuenta_contable');
      
      DECLARE lista_precios_var INT(11) DEFAULT ExtractValue(xml, '//DProveedores/Lista_precios');
      
      INSERT INTO `proveedores` (`rut`, `dv`, `razon_social`, `direccion`, `comuna`, `region`, `ciudad`, `telefono`, `email`, `giro`, `condicion_venta`, `forma_pago`, `cantidad_dias`, `credito_maximo`, `credito_utilizado`, `credito_disponible`, `estado_cliente`, `contacto`, cta_contable, listasprecios) 
    VALUES (rut, dv, razon_social, direccion, comuna, region, ciudad, telefono, email, giro, condicion_venta, forma_pago, cantidad_dias, credito_maximo, credito_utilizado, credito_disponible, estado_cliente, contacto, cuenta_contable, lista_precios_var);
    
    SELECT "SUCCESS";
    
  END;
  COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarRelacionSucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarRelacionSucursal`(
	IN `param_local_id` INT,
	IN `param_mac` VARCHAR(50)


,
	IN `param_id_caja` INT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
	
		DECLARE empresa_id int(11) DEFAULT (SELECT E.id FROM empresas AS E LIMIT 1);
	
		INSERT INTO `relacion_sucursal_pc` (`empresa_id`, `local_id`, `mac_address`) 
													VALUES (empresa_id, param_local_id, param_mac)
    ON DUPLICATE KEY 
    UPDATE empresa_id = empresa_id, local_id = param_local_id , mac_address = param_mac;
    
    UPDATE cajas SET `mac_address_asignada` = '' WHERE `mac_address_asignada` = param_mac;
    IF param_id_caja != 0 THEN
      UPDATE cajas SET `mac_address_asignada` = param_mac WHERE  `id_caja` = param_id_caja;
    END IF;
													
		SELECT "SUCCESS";
	END;
	
	COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarSolicitudMercaderiaXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `insertarSolicitudMercaderiaXML`(
	IN `param_xml` MEDIUMTEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml MEDIUMTEXT DEFAULT param_xml;
    	 
	    
      DECLARE contador int(11) DEFAULT 1;
      
	    
	    DECLARE id int(11);
	    DECLARE sucursal_nombre_var varchar(200) DEFAULT ExtractValue(xml, '//DSolicitudMercaderia/Nombre_sucursal');
      DECLARE mac_var varchar(100) DEFAULT ExtractValue(xml, '//DSolicitudMercaderia/Mac');

	    
		 DECLARE id_encabezado int(11);
     DECLARE id_producto int(11);
		 DECLARE descripcion varchar(100);
     DECLARE stock_var float(20,4);
     DECLARE stock_demas_bodegas float(20,4);
     DECLARE stock_general float(20,4);
		 DECLARE cantidad float(20,4);
     

	  INSERT INTO encabezado_sol_mercaderia (`id_sucursal`, `mac`) VALUES (idSucursalDesdeMac(mac_var), mac_var);
    
    SET id = LAST_INSERT_ID();
			 
		   WHILE ((contador < 10000) && (ExtractValue(xml , CONCAT('//Detalle/DDetalleSolicitudMercaderia[',contador,']/Id_producto')) != ''))  DO
       
      	
      	SET id_encabezado = id;
      	SET id_producto = ExtractValue(xml , CONCAT('//Detalle/DDetalleSolicitudMercaderia[', contador ,']/Id_producto'));
      	SET descripcion = ExtractValue(xml , CONCAT('//Detalle/DDetalleSolicitudMercaderia[', contador ,']/Descripcion'));
        SET stock_var = ExtractValue(xml , CONCAT('//Detalle/DDetalleSolicitudMercaderia[', contador ,']/Stock'));
        SET stock_demas_bodegas = ExtractValue(xml , CONCAT('//Detalle/DDetalleSolicitudMercaderia[', contador ,']/Demas_sucursales'));
        SET stock_general = ExtractValue(xml , CONCAT('//Detalle/DDetalleSolicitudMercaderia[', contador ,']/Stock_general'));
      	SET cantidad = ExtractValue(xml , CONCAT('//Detalle/DDetalleSolicitudMercaderia[', contador ,']/Cantidad_pedida'));
        
        
      	
      	INSERT INTO detalle_sol_mercaderia (`id_encabezado`, `id_producto`, `descripcion`, `cantidad`, stock, stock_demas_suc, stock_general) 
        VALUES (id_encabezado, id_producto, descripcion, cantidad, stock_var, stock_demas_bodegas, stock_general);
       
        SET contador = contador + 1;
      
      END WHILE;
		   
		   SELECT "SUCCESS", id;
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarSucursales` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarSucursales`(
	IN `param_xml` TEXT

)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	 DECLARE xml TEXT(5000) DEFAULT param_xml;
    	
	    
      DECLARE id_sucursal int(11);
	    DECLARE nombre char(50) DEFAULT ExtractValue(xml, '//DSucursales/Nombre');
	    DECLARE id_lista_precio int(11) DEFAULT ExtractValue(xml, '//DSucursales/Id_lista_precio');
	    DECLARE direccion varchar(250) DEFAULT ExtractValue(xml, '//DSucursales/Direccion');
	    DECLARE comuna int(11) DEFAULT ExtractValue(xml, '//DSucursales/Comuna');
	    DECLARE ciudad int(11)	 DEFAULT ExtractValue(xml, '//DSucursales/Ciudad');
      DECLARE estado_sucursal char(1)	 DEFAULT ExtractValue(xml, '//DSucursales/Estado_sucursal');

      
      
      INSERT INTO `sucursales` (`nombre`, `id_lista_precio`, `direccion`, `comuna`, `cuidad`, `estado_sucursal`) VALUES (nombre, id_lista_precio, direccion, comuna, ciudad, estado_sucursal);
      SET id_sucursal = last_insert_id();
      
      INSERT INTO bodegas (`id_sucursal`, `numero_bodega`, `nombre_bodega`) VALUES (id_sucursal, '1', nombre);
      
      SELECT "SUCCESS", id_sucursal AS id_sucursal;
  END;
  
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertarTraspasoXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertarTraspasoXML`(
	IN `param_xml` TEXT






)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
      DECLARE xml TEXT(100000) DEFAULT param_xml;
      DECLARE contador int(11) DEFAULT 1;
      DECLARE errores varchar(200) DEFAULT "";

      
      
      DECLARE id_traspaso int(11);
      DECLARE fecha DATETIME DEFAULT ExtractValue(xml, '//DTraspaso/Fecha');
      DECLARE mac char(100) DEFAULT ExtractValue(xml, '//DTraspaso/Mac');
      DECLARE id_bodega_origen int(11) DEFAULT ExtractValue(xml, '//DTraspaso/Id_bodega_origen');
      DECLARE id_bodega_destino int(11) DEFAULT ExtractValue(xml, '//DTraspaso/Id_bodega_destino');

      
      DECLARE id_producto int(11);
      DECLARE descripcion varchar(100);
      DECLARE cantidad float(20,4);
      
      DECLARE stock_actual_bodega float(18,4);
      DECLARE stock_temporal float(20,4);
      DECLARE error_stock TEXT(1000) DEFAULT '';
       DECLARE producto_costo_pmp decimal(18,4);
       DECLARE producto_stock_general float(18,4);
       DECLARE producto_stock_valorizado decimal(18,4);
       
       DECLARE id_stock_bodega_origen int(11);
       DECLARE id_stock_bodega_destino int(11);

      INSERT INTO encabezado_movimiento_inventario (`fecha`, `mac`, `id_bodega_origen`, `id_bodega_destino`) 
      VALUES (fecha, mac, id_bodega_origen, id_bodega_destino); 
      SET id_traspaso = LAST_INSERT_ID();
    	 
      WHILE (ExtractValue(xml , CONCAT('//DTraspaso/Detalle/DDetalleTraspaso[',contador,']/Id_producto')) != '')  DO
       
        
        SET id_producto = ExtractValue(xml , CONCAT('//DTraspaso/Detalle/DDetalleTraspaso[',contador,']/Id_producto'));
        SET descripcion = ExtractValue(xml , CONCAT('//DTraspaso/Detalle/DDetalleTraspaso[',contador,']/Descripcion'));
        SET cantidad = ExtractValue(xml , CONCAT('//DTraspaso/Detalle/DDetalleTraspaso[',contador,']/Cantidad'));
       
       	
        INSERT INTO detalle_movimiento_inventario (`id_encabezado`, `id_producto`, `descripcion`, `cantidad`) 
        VALUES (id_traspaso, id_producto, descripcion, cantidad);
        
         
        SELECT P.costo_pmp, P.stock_general, P.stock_valorizado INTO producto_costo_pmp, producto_stock_general, producto_stock_valorizado FROM productos AS P WHERE P.id_producto = id_producto LIMIT 1;
        
        
        
        SELECT S.id_stock_bodega, S.stock INTO id_stock_bodega_origen, stock_temporal FROM stock_bodegas AS S WHERE S.id_bodega = id_bodega_origen AND S.id_producto = id_producto;
        SET stock_temporal = ROUND((stock_temporal - cantidad), 4);
        
        IF stock_temporal >= 0 THEN
          
          UPDATE stock_bodegas SET stock_bodegas.stock = stock_temporal WHERE id_stock_bodega = id_stock_bodega_origen;
          INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
          VALUES             (id_producto, id_bodega_origen, 4, 0,'0', '0', '0', cantidad, producto_costo_pmp, ROUND((producto_costo_pmp*cantidad), 4), producto_stock_general, producto_costo_pmp, producto_stock_valorizado, DATE_FORMAT(NOW(), "%Y-%m-%d"), mac);
          
          
          SELECT S.id_stock_bodega, S.stock INTO id_stock_bodega_destino, stock_temporal FROM stock_bodegas AS S WHERE S.id_bodega = id_bodega_destino AND S.id_producto = id_producto;
          SET stock_temporal = ROUND((stock_temporal + cantidad), 4);
          UPDATE stock_bodegas SET stock = ROUND(stock_temporal, 4) WHERE id_stock_bodega = id_stock_bodega_destino;
          INSERT INTO kardex (`id_producto`, `bodega_id`, `tipo_movimiento`, `numero_documento`, `entrada`, `vunitcompra`, `debe`, `salida`, `vunitsalida`, `haber`, `stock`, `pmp`, `stock_valorizado`, `fecha_movimiento`, `mac`) 
          VALUES              (id_producto, id_bodega_destino, 5, 0, ROUND(cantidad, 4), producto_costo_pmp, ROUND((producto_costo_pmp*cantidad), 4), '0', '0', '0', producto_stock_general, producto_costo_pmp, producto_stock_valorizado, DATE_FORMAT(NOW(), "%Y-%m-%d"), mac);
        ELSE
          SET error_stock = CONCAT(error_stock, "(", id_producto, ",", stock_temporal*-1,")");
        END IF;
         
         
        SET contador = contador + 1;
        
        IF contador > 100000 THEN
          CALL `error`('Hay mas de 100000 productos?');
        END IF;
        
       END WHILE;
      
       
       IF error_stock != '' THEN
        CALL `error`( CONCAT("No hay stock de: ",error_stock));

       END IF;
       
       SELECT "SUCCESS", id_traspaso AS id;
       
    END;
    
  
  COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertLog` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `insertLog`(
	IN `param_mensaje` VARCHAR(200)
)
BEGIN
  INSERT INTO `error_log` (`error_message`) VALUES (param_mensaje);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InvertirComprobanteContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `InvertirComprobanteContable`(
	IN `param_id_comprobante_contable` INT



)
BEGIN

  DECLARE tipo_comprobante_var CHAR(1) DEFAULT (SELECT E.tipo_comprobante FROM contab_diario_cabecera AS E WHERE E.id = param_id_comprobante_contable LIMIT 1);
  DECLARE id_cabecera_comprobante_var INT(11) DEFAULT FUNCIDSiguienteCabeceraContable();
  DECLARE numero_comprobante_var INT(11) DEFAULT FUNCSiguienteNumeroComprobante(tipo_comprobante_var);
      
  INSERT INTO contab_diario_cabecera 
  (`id`, `tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
  SELECT id_cabecera_comprobante_var, tipo_comprobante_var, CURDATE(), numero_comprobante_var, CONCAT(C.glosa_comprobante, ' ANULADO'), C.vigente FROM contab_diario_cabecera AS C WHERE C.id = param_id_comprobante_contable LIMIT 1;
   
  INSERT INTO contab_diario_detalle
  (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`, `tipo_comprobante`, `fecha_cobro`)
  SELECT id_cabecera_comprobante_var, D.cuenta_contable, CONCAT(D.glosa_detalle, ' ANULADO'), D.haber, D.debe, D.documento, D.rut, D.tipo_dte, D.numero_dte, D.fecha_documento, D.fecha_vencimiento, D.tipo_comprobante, D.fecha_cobro FROM contab_diario_detalle AS D WHERE D.id_diario_cabecera = param_id_comprobante_contable;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `IsCodigoBarraYaIngresado` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `IsCodigoBarraYaIngresado`(
	IN `param_rut_proveedor` VARCHAR(50),
	IN `param_codigo_barra` VARCHAR(100)

)
BEGIN

  DECLARE id_codigo_alternativo int(11) DEFAULT (SELECT R.id_codigo_alternativo FROM relacion_codigos_alternativos_productos AS R WHERE 
        R.codigo_barra = param_codigo_barra AND R.proveedor_rut = param_rut_proveedor
        LIMIT 1);
        
  IF id_codigo_alternativo IS NOT NULL THEN
    SELECT CONCAT("Ya existe un producto con ese codigo de barra :", F.codigo_barra, " , con id ", P.id_producto, " y descripcion ", P.nombre_producto_venta), "", "" FROM relacion_codigos_alternativos_productos AS F INNER JOIN productos AS P ON F.producto_id = P.id_producto WHERE F.id_codigo_alternativo = id_codigo_alternativo LIMIT 1;
  ELSE
    SELECT "SUCCESS", "", "";
  END IF;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `IsMovimientoYaIngresado` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `IsMovimientoYaIngresado`(
	IN `param_rut` VARCHAR(50),
	IN `param_fecha` VARCHAR(50),
	IN `param_numero_documento` VARCHAR(50)

)
BEGIN
  
  
  
  
  DECLARE id_detalle_mov_caja int(11) DEFAULT (SELECT D.id_detalle_mov_caja FROM det_movimientos_caja AS D WHERE 
        D.rut = param_rut 
        AND D.fecha = param_fecha
        AND D.num_documento = param_numero_documento
        LIMIT 1);
        
  IF id_detalle_mov_caja IS NOT NULL THEN
    SELECT CONCAT("Ya existe un movimiento del rut ", F.rut, " y numero ", F.num_documento), "", "" FROM det_movimientos_caja AS F WHERE F.id_detalle_mov_caja = id_detalle_mov_caja LIMIT 1;
  ELSE
    SELECT "SUCCESS", "", "";
  END IF;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `IsMovimientoYaIngresado3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `IsMovimientoYaIngresado3`(
	IN `param_rut` VARCHAR(50),
	IN `param_fecha` VARCHAR(50),
	IN `param_numero_documento` VARCHAR(50)
)
BEGIN
  
  
  
  
  DECLARE id_detalle_mov_caja int(11) DEFAULT (SELECT D.id_detalle_mov_caja FROM det_movimientos_caja AS D WHERE 
        D.rut = param_rut 
        AND D.fecha = param_fecha
        AND D.num_documento = param_numero_documento
        LIMIT 1);
        
  IF id_detalle_mov_caja IS NOT NULL THEN
    SELECT CONCAT("Ya existe un movimiento del rut ", F.rut, " y numero ", F.num_documento), "", "" FROM det_movimientos_caja AS F WHERE F.id_detalle_mov_caja = id_detalle_mov_caja LIMIT 1;
  ELSE
    SELECT "SUCCESS", "", "";
  END IF;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `LanzadorConTransacciones` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `LanzadorConTransacciones`()
BEGIN
     DECLARE EXIT HANDLER FOR SQLEXCEPTION
     BEGIN
          SHOW ERRORS LIMIT 1;
          ROLLBACK;
     END; 
     DECLARE EXIT HANDLER FOR SQLWARNING
     BEGIN
          SHOW WARNINGS LIMIT 1;
          ROLLBACK;
     END;

     START TRANSACTION;
     
    BEGIN
      
      
      
    END;
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `listarDTE` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `listarDTE`(
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_final` DATE,
	IN `param_estado` INT



,
	IN `param_id_sucursal` CHAR(1),
	IN `param_mostrar_boletas` CHAR(1)
)
BEGIN
  DECLARE estado VARCHAR(100) DEFAULT "%";
  
  IF param_estado = 1 THEN
    SET estado = "ACEPTADO";
  ELSEIF param_estado = 2 THEN
    SET estado = "ACEPTADO CON REPAROS";
  ELSEIF param_estado = 3 THEN  
    SET estado = "";
  END IF;
    
	SELECT
		E.numero_documento,
		E.tipo_documento,
    tipoDocumentoTextoAbreviado(E.tipo_documento) AS tipo_documento_texto,
		E.hora AS fecha,
		CONCAT(E.rut,"-",E.dv) AS rut_completo,
		E.razon_social,
		E.neto AS neto,
		E.`monto iva` AS iva,
		E.total_documento AS total,
		E.rut,
		IF(E.xml_dte IS NULL, "INCOMPLETO", E.estado_dte) AS estado,
		E.estado_general_dte AS `Estado general`,
		E.descripcion_estado_general_dte AS `Descripcion`
	FROM encabezado_movimientos AS E
  WHERE 
    IF(param_estado = 0 , 1=1,  IF(param_estado = 4, E.estado_dte NOT LIKE "ACEPTADO" AND E.estado_dte NOT LIKE "CREADO" AND E.estado_dte <> "", E.estado_dte = estado))
    AND E.fecha_documento BETWEEN param_fecha_inicio AND param_fecha_final
    AND IF(param_mostrar_boletas = '0', E.tipo_documento <> 39, 1=1)
    AND IF(param_id_sucursal = '0', 1=1, E.sucursal_id = param_id_sucursal)
  ORDER BY E.id DESC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `log` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `log`(
	IN `param_tabla` VARCHAR(200),
	IN `param_mensaje` VARCHAR(500)
)
BEGIN
  INSERT INTO `error_log` (`tabla`, `error_message`) VALUES (param_tabla, param_mensaje);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `margen_productos` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `margen_productos`()
BEGIN
  
 SELECT
    A.margen_categoria,
    A.descripcion,
    P.id_producto,
    P.nombre_producto_venta,
    P.codigo_categoria_producto,
    P.costo_pmp,
    P.precio_ultima_compra,
    P.precio_venta_neto
    
  FROM
    productos AS P
    INNER JOIN arbol_categoria_productos AS A
      ON CONCAT(SUBSTRING(P.codigo_categoria_producto, 1, 4),"000000") = A.codigo
  ORDER BY P.codigo_categoria_producto
  ;

  

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `margen_utilidades` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `margen_utilidades`(
	IN `param_fecha_inicio` DATE
,
	IN `param_fecha_termino` DATE
,
	IN `param_sucursal` INT
)
BEGIN
  CALL `margen_utilidades_detalle`(param_fecha_inicio, param_fecha_termino, param_sucursal);
  CALL `margen_utilidades_resumen`(param_fecha_inicio, param_fecha_termino, param_sucursal);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `margen_utilidades_detalle` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `margen_utilidades_detalle`(
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE
,
	IN `param_sucursal` INT








)
BEGIN

SELECT
       P.sucursal_id,
       P.tipo_documento,
       P.fecha_documento,
       P.numero_documento,
       P.tipo_documento_referencia,
       P.numero_documento_referencia,
       D.producto_id,
       D.descripcion,
       D.pv_real_linea,
       D.pmp_linea,
       D.pv_real_linea-D.pmp_linea AS utilidad,
       IFNULL(((D.pv_real_linea-D.pmp_linea)*100)/D.pmp_linea, -100) AS margen_utilidad
    FROM detalle_movimientos D 
      RIGHT JOIN encabezado_movimientos  P 
      ON D.id_encabezado=P.id where P.fecha_documento between param_fecha_inicio and param_fecha_termino 
      and IF( param_sucursal != 0, P.sucursal_id=param_sucursal, 1) ORDER BY P.tipo_documento ASC, D.producto_id ASC
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `margen_utilidades_resumen` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `margen_utilidades_resumen`(
	IN `param_fecha_inicio` DATE,
	IN `param_fecha_termino` DATE,
	IN `param_sucursal` INT



)
BEGIN

SELECT
       P.sucursal_id,
       P.tipo_documento,
       Sum(D.pv_real_linea) AS precio_real_linea,
       Sum(D.pmp_linea) AS pmp_linea      
    FROM detalle_movimientos D 
      RIGHT JOIN encabezado_movimientos  P 
      ON D.id_encabezado=P.id 
        where P.fecha_documento between param_fecha_inicio and param_fecha_termino 
        and IF( param_sucursal != 0, P.sucursal_id=param_sucursal, 1) group BY P.tipo_documento
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `normalizarEstadoTrackID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `normalizarEstadoTrackID`(
	IN `param_trackID` VARCHAR(50)


)
BEGIN


	UPDATE encabezado_movimientos 
		SET 
			trackid_dte = "",
			estado_dte = "",
			estado_general_dte = "",
			descripcion_estado_general_dte =  ""
			WHERE trackid_dte = param_trackID;
			
	SELECT param_trackID;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `PagarPendientesXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `PagarPendientesXML`(
	IN `param_xml` TEXT
)
    NO SQL
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE xml TEXT(10000) DEFAULT param_xml;
      
    	
	    DECLARE contador INT DEFAULT 1;
      
      DECLARE rut_cliente char(11) DEFAULT ExtractValue(xml, '//DMovimiento/Rut');
      DECLARE glosa_var varchar(500) DEFAULT SUBSTRING(ExtractValue(xml, '//DMovimiento/Razon_social'), 1, 500);
      DECLARE mac varchar(12) DEFAULT ExtractValue(xml, '//DMovimiento/Sesion/Mac');
      DECLARE fecha_var DATE DEFAULT ExtractValue(xml, '//DMovimiento/Fecha');
      DECLARE id_encabezado_pagos_var int(11);
      DECLARE id_pago_movimiento_var INT(11);
      DECLARE caja int(11) DEFAULT 0;
      DEClARE correlativo_caja int(11) DEFAULT 0;

		 

		 DECLARE id_mov int(11);
		 DECLARE forma_pago int(11);
		 DECLARE descripcion_forma_pago VARCHAR(150);
		 DECLARE monto_pagado_var decimal(18,4);
		 DECLARE numero_operacion int(18); 
     DECLARE id_cuenta_bancaria_var INT(11);
     
     SET caja = (SELECT C.id_caja FROM cajas AS C WHERE C.mac_address_asignada = mac LIMIT 1);
    
     SET correlativo_caja = (SELECT A.correlativo FROM apertura_caja AS A WHERE A.id_caja = caja AND A.fecha_cierre IS NULL LIMIT 1);
     
     INSERT INTO encabezado_pagos (`rut`, `glosa`, `mac`, `fecha`) VALUES (rut_cliente, glosa_var, mac, fecha_var);
     SET id_encabezado_pagos_var =  LAST_INSERT_ID();
              
		   WHILE ((contador < 50) && (ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[',contador,']/Forma_pago')) != ''))  DO

        SET id_mov = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Id_movimiento'));
				SET forma_pago = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Forma_pago'));
				SET descripcion_forma_pago = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Descripcion_forma_pago'));
				SET monto_pagado_var = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Monto_pagado'));
				SET numero_operacion = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Numero_operacion'));
        SET id_cuenta_bancaria_var = ExtractValue(xml , CONCAT('//Forma_pago/DFormaPago[', contador ,']/Id_cuenta_bancaria'));
				
        SET rut_cliente = (SELECT E.rut FROM encabezado_movimientos AS E WHERE E.id = id_mov LIMIT 1);
       
		   	INSERT INTO pagos_movimientos (`id_movimiento`, `forma_pago`, `descripcion_forma_pago`, `monto_pagado`, `numero_operacion`, id_caja, correlativo_caja, id_cta_banco) 
        VALUES (id_mov, forma_pago, descripcion_forma_pago, monto_pagado_var, numero_operacion, caja, correlativo_caja, id_cuenta_bancaria_var);
        
        SET id_pago_movimiento_var =  LAST_INSERT_ID();
        
        UPDATE encabezado_movimientos AS E SET E.monto_adeudado = E.monto_adeudado - monto_pagado_var, E.monto_pagado = E.monto_pagado + monto_pagado_var WHERE `id` = id_mov;

        INSERT INTO detalle_pagos (`id_encabezado`, `id_movimiento`, `id_pago_movimiento`, `tipo_documento`, `numero_documento`, `monto_pagar`, `monto_pagado`, `monto_adeudado`, fecha_documento, fecha_vencimiento, monto_pagado_ahora) 
        SELECT id_encabezado_pagos_var, E.id, id_pago_movimiento_var, E.tipo_documento, E.numero_documento, E.monto_pagar, E.monto_pagado, E.monto_adeudado, E.fecha_documento, E.fecha_vencimiento, monto_pagado_var FROM encabezado_movimientos AS E WHERE E.id = id_mov LIMIT 1;
        
        
        IF forma_pago <> 10 THEN
          UPDATE proveedores SET `credito_utilizado`=credito_utilizado - monto_pagado_var WHERE  `rut`=rut_cliente;
        END IF;
        
		    SET contador = contador + 1;
        
		   END WHILE;
       
        CALL CursorContabilizarPagosClientes(id_encabezado_pagos_var, 'Y');
        
        SELECT "SUCCESS", id_encabezado_pagos_var AS id_encabezado_pagos, "";
   END;
  COMMIT; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pagarProveedoresXML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `pagarProveedoresXML`(
	IN `param_xml` TEXT
)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    	DECLARE xml TEXT(10000) DEFAULT param_xml;
      
    	
	    DECLARE contador INT DEFAULT 1;
      
      DECLARE id_cta_cte_banco_var int(11) DEFAULT ExtractValue(xml, '//DPagoProveedores/Id_cta_cte_banco');
      DECLARE rut_var int(11) DEFAULT ExtractValue(xml, '//DPagoProveedores/Rut');
      DECLARE glosa_principal_var varchar(500) DEFAULT SUBSTRING(ExtractValue(xml, '//DPagoProveedores/Glosa_principal'), 1, 500);
      DECLARE tipo_cuenta_var char(1) DEFAULT ExtractValue(xml, '//DPagoProveedores/Tipo_pago');
      DECLARE numero_cheque_var int(11) DEFAULT ExtractValue(xml, '//DPagoProveedores/Numero_cheque');
      DECLARE fecha_emision_texto_var date DEFAULT ExtractValue(xml, '//DPagoProveedores/Fecha_emision_texto');
      DECLARE fecha_vencimiento_texto_var date DEFAULT ExtractValue(xml, '//DPagoProveedores/Fecha_vencimiento_texto');
      DECLARE monto_cheque int(11) DEFAULT ExtractValue(xml, '//DPagoProveedores/Monto');
      
      
     
      DECLARE id_encabezado_pago_proveedores int(11) DEFAULT (SELECT E.id FROM cabecera_pago_proveedores AS E WHERE E.id_cta_cte_banco = id_cta_cte_banco_var AND E.num_cheque = numero_cheque_var LIMIT 1);
      DECLARE id_cheque_chequera int(11) DEFAULT (SELECT CHCH.id FROM cheques_chequera AS CHCH WHERE CHCH.id_cta_cte_banco = id_cta_cte_banco_var AND CHCH.num_cheque = numero_cheque_var LIMIT 1);

		 

		 DECLARE id_mov int(11);
     DECLARE monto_pagado_var decimal(18,4);
		 DECLARE numero_documento_var int(11);
		 DECLARE tipo_documento int(11);
     DECLARE fecha_documento_texto_var date;
     DECLARE fecha_vencimiento_documento_texto date;


     UPDATE cabecera_pago_proveedores 
     SET 
      `tipo_pago`=tipo_cuenta_var, 
      `rut`=rut_var, 
      `fecha_emision`=fecha_emision_texto_var, 
      `fecha_vencimiento`=fecha_vencimiento_texto_var, 
      `monto_cheque`=monto_cheque, 
      `glosa_cabecera`=glosa_principal_var
      WHERE  `id`=id_encabezado_pago_proveedores;
      
    UPDATE cheques_chequera 
    SET 
      `fecha_vencimiento` = fecha_vencimiento_texto_var,
      `fecha_consumo` = fecha_emision_texto_var
    WHERE `id` = id_cheque_chequera;
              
		   WHILE ((contador < 500) && (ExtractValue(xml , CONCAT('//Detalle/DDetallePagoProveedores[',contador,']/Id')) != ''))  DO
		   
        
        
        SET id_mov = ExtractValue(xml , CONCAT('//Detalle/DDetallePagoProveedores[',contador,']/Id'));
        SET monto_pagado_var = ExtractValue(xml , CONCAT('//Detalle/DDetallePagoProveedores[',contador,']/Monto'));
        SET numero_documento_var = ExtractValue(xml , CONCAT('//Detalle/DDetallePagoProveedores[',contador,']/Numero_documento'));
        SET tipo_documento = ExtractValue(xml , CONCAT('//Detalle/DDetallePagoProveedores[',contador,']/Tipo_documento'));
        SET fecha_documento_texto_var = ExtractValue(xml , CONCAT('//Detalle/DDetallePagoProveedores[',contador,']/Fecha_documento_texto'));
        SET fecha_vencimiento_documento_texto = ExtractValue(xml , CONCAT('//Detalle/DDetallePagoProveedores[',contador,']/Fecha_vencimiento_texto'));
       
        
        
        IF id_mov IS NOT NULL AND id_mov <> 0 THEN
          UPDATE r_compra_sii AS E 
          SET 
            E.monto_pagado = E.monto_pagado + monto_pagado_var,
            E.monto_adeudado = E.monto_adeudado - monto_pagado_var
            WHERE E.id = id_mov;
        END IF;
        
        
        
        INSERT INTO detalle_pago_proveedores (`id_cuenta`, `num_cheque`, `monto_documento`, `tipo_doc_ref`, `fecha_documento_ref`, `num_documento_ref`, `fecha_vcto_documento`) 
        VALUES (id_cta_cte_banco_var, numero_cheque_var, monto_pagado_var, tipo_documento, fecha_documento_texto_var, numero_documento_var, fecha_vencimiento_documento_texto);

		    SET contador = contador + 1;
        
		   END WHILE;

        CALL ContabilizarPagoCheques(id_encabezado_pago_proveedores);
      
       SELECT "SUCCESS", "", "";
   END;
  COMMIT; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `prefijosDisponibles` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `prefijosDisponibles`()
BEGIN

  DECLARE contador INT(11) DEFAULT 99;DECLARE id_relacion_disponible INT(11);DECLARE codigos_disponiles TEXT(10000) DEFAULT '';WHILE contador < 1000 DO
  
  SET id_relacion_disponible = (
      SELECT
       R.id_codigo_alternativo
      FROM 
        relacion_codigos_alternativos_productos AS R 
      WHERE SUBSTRING(R.codigo_barra, 1, 3) = CAST( contador AS CHAR(4))
      LIMIT 1
      );IF id_relacion_disponible IS NULL THEN
     SET codigos_disponiles = CONCAT(codigos_disponiles, '-', CAST( contador AS CHAR(4)));END IF;SET contador = contador + 1;END WHILE;SELECT codigos_disponiles;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `prueba2Actualizar` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `prueba2Actualizar`(
	IN `param_xml` TEXT



)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;  
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION; 
	 
    BEGIN
    	 
       
       DECLARE xml TEXT(5000) DEFAULT '<?xml version="1.0" encoding="utf-16"?><DPruebas xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><Nombre>Seba</Nombre><Apellido>seba</Apellido></DPruebas>';
    	
	    
      
      DECLARE nombre varchar(100) DEFAULT ExtractValue(xml, '//DPruebas/Nombre');
	    DECLARE apellido varchar(100) DEFAULT ExtractValue(xml, '//DPruebas/Apellido');


     INSERT INTO `orden_2`.`Prueba2` ( `nombre`, `prueba`) VALUES ( nombre, apellido);
	
		SELECT "SUCCESS";
		 
   END;
   
   COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pruebaBorrableNoEjecutar` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `pruebaBorrableNoEjecutar`()
    DETERMINISTIC
BEGIN 
  DECLARE fecha_incio DATE DEFAULT '2019-05-13';
  DECLARE fecha_temporal DATE;
  DECLARE contador int(11) DEFAULT 0;
  
  SET fecha_temporal = fecha_incio;
  
  WHILE (SELECT C.id FROM consumo_folios AS C WHERE C.fecha = fecha_temporal) IS NULL AND contador < 300 AND fecha_temporal < NOW() DO
  
      INSERT INTO consumo_folios (fecha, setEnvio, estado) VALUES (fecha_temporal, 1, 0);
      SET fecha_temporal = DATE_ADD(fecha_temporal, INTERVAL 1 DAY);    
      SET contador = contador + 1;
  END WHILE; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pruebaVariablesSalida` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `pruebaVariablesSalida`(
	OUT `param1` INT,
	OUT `param2` INT

)
BEGIN
  SET param1 = 3;
  SET param2 = 100;
  
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `recalcularKardex` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `recalcularKardex`(
	IN `param_id_kardex` INT












)
BEGIN
	 DECLARE EXIT HANDLER FOR SQLEXCEPTION
	 BEGIN
	      SHOW ERRORS LIMIT 1;
	      ROLLBACK;
	 END; 
	 DECLARE EXIT HANDLER FOR SQLWARNING
	 BEGIN
	      SHOW WARNINGS LIMIT 1;
	      ROLLBACK;
	 END;

	 START TRANSACTION;
	 
    BEGIN
    
      DECLARE id_producto_var INT(11) DEFAULT FUNCIdProductoDesdeIDKarex(param_id_kardex);
      
      
      
      
      
      
      
     IF id_producto_var IS NOT NULL THEN 
       CALL recalcularKardexCursor(param_id_kardex, id_producto_var);
      
        
        UPDATE 
          productos AS P, 
          (SELECT * FROM kardex AS K WHERE K.id_producto = id_producto_var ORDER BY K.kardex_id DESC LIMIT 1) AS K2 
        SET
          P.costo_pmp = IF(K2.pmp > 0, K2.pmp, P.costo_pmp), 
          P.stock_general = K2.stock,
          P.stock_valorizado = K2.stock_valorizado 
        WHERE  P.id_producto = id_producto_var;
        
        
        
        UPDATE
          stock_bodegas AS B
        SET
          B.stock = FUNCStockPorBodegaPorProducto(id_producto_var, B.id_bodega)
        WHERE
          B.id_producto = id_producto_var;
      END IF;
    END;
  
     COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `recalcularKardexCursor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `recalcularKardexCursor`(
	IN `param_id_kardex` INT,
	IN `param_id_producto` INT













)
BEGIN 
  DECLARE finished INTEGER DEFAULT 0;
  DECLARE id_kardex_var INT(11);    
  
  DECLARE id_kardex_anterior_var INT(11) DEFAULT FUNCAnteriorLineaKardex(param_id_kardex, param_id_producto);
  DECLARE stock_anterior_var FLOAT(18,4) DEFAULT 0;
  DECLARE valorizado_anterior_var DECIMAL(18,4) DEFAULT 0;
  DECLARE pmp_anterior_var DECIMAL(18,4) DEFAULT 0;
  DECLARE stock_actual_var FLOAT(18,4) DEFAULT 0;
  
 
  DECLARE kardex_var CURSOR FOR (
            SELECT
              K.kardex_id 
            FROM kardex AS K 
            WHERE 
              K.id_producto = param_id_producto 
            AND K.kardex_id >= param_id_kardex
            );
                                    

                                    
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN kardex_var;
 
    ciclo: LOOP
    
    FETCH kardex_var INTO id_kardex_var;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    IF id_kardex_anterior_var IS NOT NULL THEN
      SELECT
        IFNULL(K.stock, 0),
        IFNULL(K.stock_valorizado, 0)
      INTO
        stock_anterior_var,
        valorizado_anterior_var
      FROM kardex AS K
      WHERE
      K.kardex_id = id_kardex_anterior_var;
    ELSE
      SET stock_anterior_var = 0;
      SET valorizado_anterior_var = 0;
    END IF;

    SET pmp_anterior_var = IF(stock_anterior_var > 0, valorizado_anterior_var/stock_anterior_var, pmp_anterior_var);
  
    SET stock_actual_var =  (SELECT (stock_anterior_var + K.entrada - K.salida) AS stock_actual FROM kardex AS K WHERE K.kardex_id = id_kardex_var LIMIT 1);
    
    IF IFNULL(stock_actual_var, 0) < 0 THEN
      CALL error(CONCAT("El stock de los productos llego bajo 0, en el id ", id_kardex_var));
    END IF;
    
    
    UPDATE kardex AS K
    SET
      K.vunitsalida = IF(K.tipo_movimiento = 61, K.vunitsalida, IF(K.salida > 0, pmp_anterior_var, 0)),
      K.debe = K.entrada * K.vunitcompra,
      K.haber = K.salida * IF(K.salida > 0, pmp_anterior_var, 0),
      K.stock = stock_actual_var
    WHERE 
      K.kardex_id = id_kardex_var
    ;
      
    UPDATE kardex AS K
    SET
      K.stock_valorizado = valorizado_anterior_var + K.debe - K.haber
    WHERE 
      K.kardex_id = id_kardex_var
    ;
      
    UPDATE kardex AS K
    SET
      K.pmp = IF(K.stock = 0, 0, K.stock_valorizado / K.stock)
    WHERE 
      K.kardex_id = id_kardex_var
    ;
    
    CALL actualizarCostoMovimientoReferenciadoDesdeKardex(id_kardex_var);
    
    
    SET id_kardex_anterior_var = id_kardex_var;
    END LOOP ciclo;
  
  CLOSE kardex_var;

   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `reenumerarComprobantes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `reenumerarComprobantes`(
	IN `param_ano` INT

)
BEGIN
  DECLARE TInicio_var INT(11) DEFAULT 2;
  DECLARE TTermino_var INT(11);
  DECLARE EInicio_var INT(11) DEFAULT 1;
  DECLARE ETermino_var INT(11);
  DECLARE IInicio_var INT(11) DEFAULT 1;
  DECLARE ITermino_var INT(11);
 
  SET @numero_para_reenumerar_los_comprobantes = 1;
  
  UPDATE contab_diario_cabecera C2
    SET C2.numero_comprobante = (SELECT @numero_para_reenumerar_los_comprobantes := @numero_para_reenumerar_los_comprobantes + 1)
  WHERE
    C2.tipo_comprobante = 'T'
     AND YEAR(C2.fecha_comprobante) = param_ano
    AND C2.numero_comprobante > 1
  ORDER BY C2.fecha_comprobante ASC, C2.id ASC
  ;
  
  SET TTermino_var = (SELECT IFNULL(MAX(C.numero_comprobante), 0) FROM contab_diario_cabecera AS C WHERE 
                                                          C.tipo_comprobante = 'T'
                                                          AND YEAR(C.fecha_comprobante) = param_ano
                                                          AND C.numero_comprobante > 1);
  IF TTermino_var = 0 THEN
    SET TInicio_var = 0;
  END IF;
  
  SET @numero_para_reenumerar_los_comprobantes = 0;
  
  UPDATE contab_diario_cabecera C2
    SET C2.numero_comprobante = (SELECT @numero_para_reenumerar_los_comprobantes := @numero_para_reenumerar_los_comprobantes + 1)
  WHERE
    C2.tipo_comprobante = 'E'
     AND YEAR(C2.fecha_comprobante) = param_ano
  ORDER BY C2.fecha_comprobante ASC, C2.id ASC
  ;
  
  SET ETermino_var = (SELECT IFNULL(MAX(C.numero_comprobante), 0) FROM contab_diario_cabecera AS C WHERE 
                                                          C.tipo_comprobante = 'E'
                                                          AND YEAR(C.fecha_comprobante) = param_ano);
  IF ETermino_var = 0 THEN
    SET EInicio_var = 0;
  END IF;
  
  SET @numero_para_reenumerar_los_comprobantes = 0;
  
  UPDATE contab_diario_cabecera C2
    SET C2.numero_comprobante = (SELECT @numero_para_reenumerar_los_comprobantes := @numero_para_reenumerar_los_comprobantes + 1)
  WHERE
    C2.tipo_comprobante = 'I'
    AND YEAR(C2.fecha_comprobante) = param_ano
  ORDER BY C2.fecha_comprobante ASC, C2.id ASC
  ;
  
  SET ITermino_var = (SELECT IFNULL(MAX(C.numero_comprobante), 0) FROM contab_diario_cabecera AS C WHERE 
                                                          C.tipo_comprobante = 'I'
                                                          AND YEAR(C.fecha_comprobante) = param_ano);
  IF ITermino_var = 0 THEN
    SET IInicio_var = 0;
  END IF;
  
  SELECT "SUCCESS";
  
  SELECT TInicio_var, TTermino_var, EInicio_var, ETermino_var, IInicio_var, ITermino_var;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ResumenCajaFecha` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `ResumenCajaFecha`(
	IN `param_date` DATE



)
BEGIN
  
  DECLARE id_caja int(11) DEFAULT 5;
  DECLARE fecha_apertura datetime;
  DECLARE monto_apertura float(11,4);
  
  DECLARE monto_efectivo float(18,4);
  DECLARE monto_TC float(18,4);
  DECLARE monto_TD float(18,4);
  DECLARE monto_cheque float(18,4);
  DECLARE monto_transferncia float(18,4);
  
  DECLARE count_monto_efectivo int(11);
  DECLARE count_monto_TC int(11);
  DECLARE count_monto_TD int(11);
  DECLARE count_monto_cheque int(11);
  DECLARE count_monto_transferncia int(11);
  
  SET fecha_apertura = param_date;
  
  
  
    
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_efectivo,
    count_monto_efectivo
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 0
    AND SUBSTRING(P.fecha, 1, 10) = fecha_apertura
    AND E.caja_id = id_caja;
                   
    
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_TC,
    count_monto_TC
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 1
    AND SUBSTRING(P.fecha, 1, 10) = fecha_apertura
    AND E.caja_id = id_caja;
                            
  
  
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_TD,
    count_monto_TD
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 2
    AND SUBSTRING(P.fecha, 1, 10) = fecha_apertura
    AND E.caja_id = id_caja;
  
   
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_cheque,
    count_monto_cheque
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 3
    AND SUBSTRING(P.fecha, 1, 10) = fecha_apertura
    AND E.caja_id = id_caja;
                            
    
  SELECT
    IFNULL(SUM(IF(E.tipo_documento <> 61, P.monto_pagado, P.monto_pagado*-1)),0),
    COUNT(*)
  INTO
    monto_transferncia,
    count_monto_transferncia
  FROM encabezado_movimientos AS E
  RIGHT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE 
    P.forma_pago = 4
    AND SUBSTRING(P.fecha, 1, 10) = fecha_apertura
    AND E.caja_id = id_caja;

  
  SELECT monto_efectivo, monto_TC, monto_TD, monto_cheque, monto_transferncia, monto_efectivo+ monto_TC+ monto_TD+ monto_cheque + monto_transferncia AS TOTAL;
  
  SELECT
    E.tipo_documento,
    COUNT(*),
    SUM(P.monto_pagado)
  FROM encabezado_movimientos AS E
  LEFT JOIN pagos_movimientos AS P
  ON P.id_movimiento = E.id
  WHERE SUBSTRING(P.fecha, 1, 10) = fecha_apertura
    AND E.caja_id = id_caja
  GROUP BY E.tipo_documento;
  
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ResumenVenta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `ResumenVenta`()
BEGIN
  SELECT 
    E.fecha_documento, 
    E.tipo_documento, 
    tipoDocumentoTextoAbreviado(E.tipo_documento) AS tipo_documento_texto_abreviado,
    E.numero_documento, 
    E.total_documento 
  FROM encabezado_movimientos AS E;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `serPeriodoPorDefectoContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `serPeriodoPorDefectoContable`(
	IN `param_mes` INT,
	IN `param_ano` INT
)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
      SHOW ERRORS LIMIT 1;
  END;
  DECLARE EXIT HANDLER FOR SQLWARNING
  BEGIN
      SHOW WARNINGS LIMIT 1;
  END;
  BEGIN
    UPDATE empresas AS E
    SET
      E.mes_contable_por_defecto = param_mes,
      E.ano_contable_por_defecto = param_ano
    LIMIT 1;
    
    SELECT 'SUCCESS';
  END;
 
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SetCambioEstadoPeriodoContable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `SetCambioEstadoPeriodoContable`(
	IN `param_campo` VARCHAR(3),
	IN `param_ano` INT
)
BEGIN
  DECLARE sentencia_var VARCHAR(500) DEFAULT CONCAT('UPDATE contab_control_mes_contable AS C
  SET
    C.', param_campo , ' = C.', param_campo, '^1
  WHERE C.ano = ', param_ano, 
  ' LIMIT 1');

  
  PREPARE stmt FROM sentencia_var; 
  EXECUTE stmt; 
  
  SELECT 'SUCCESS';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `setImpresoraSubDocumentoMac` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `setImpresoraSubDocumentoMac`(
	IN `param_id_sub_documento` INT,
	IN `param_mac` VARCHAR(50),
	IN `param_nombre_impresora` VARCHAR(50)
)
BEGIN
  
  INSERT INTO relacion_sub_documento_tributario_equipo (`mac`, `sub_documento_tributario`, `impresora`) 
  VALUES (param_mac, param_id_sub_documento, param_nombre_impresora)
  ON DUPLICATE KEY UPDATE
   impresora = param_nombre_impresora;
  
  SELECT 'SUCCESS';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SiguienteNumeroBodegaPorSucursal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `SiguienteNumeroBodegaPorSucursal`(
	IN `param_sucursal` INT

)
BEGIN
  SELECT "SUCCESS", FUNCSiguienteNumeroBodegaPorSucursal(param_sucursal) as numero;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetEnv` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `spGetEnv`(
	OUT `pRetMsg` text
)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION, SQLWARNING
    BEGIN
      DECLARE error_code CHAR(5) DEFAULT '00000';
      DECLARE error_msg TEXT;

      GET DIAGNOSTICS CONDITION 1
        error_code = RETURNED_SQLSTATE, error_msg = MESSAGE_TEXT;
      SET pRetMsg = CONCAT('0 ', error_code, ' - ', error_msg, ' [', 'spGetEnv', ']');
    END;                
                                        
  SELECT name
  FROM mysql.env;
    
  SET pRetMsg = '1 OK';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetEstadoCuenta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `spGetEstadoCuenta`(
	IN `pEmpID` int,
	IN `pFDesde` varchar(10),
	IN `pFHasta` varchar(10),
	IN `pCueID` varchar(10),
	IN `pTipoOper` char(1),
	OUT `pRetMsg` text
)
BEGIN
  DECLARE porcIVA decimal(5,2);
  DECLARE fdesde date;
  DECLARE fhasta date;
  
  DECLARE EXIT HANDLER FOR SQLEXCEPTION, SQLWARNING
    BEGIN
      DECLARE error_code CHAR(5) DEFAULT '00000';
      DECLARE error_msg TEXT;

      GET DIAGNOSTICS CONDITION 1
        error_code = RETURNED_SQLSTATE, error_msg = MESSAGE_TEXT;
      SET pRetMsg = CONCAT('0 ', error_code, ' - ', error_msg, ' [', 'spGetEstadoCuenta', ']');
    END;  
  
    SET fdesde = STR_TO_DATE(pFDesde, '%d-%m-%Y');
    SET fhasta = STR_TO_DATE(pFHasta, '%d-%m-%Y');
    SET porcIVA = 19;
    
    SELECT 
          CASE doc_tipo_oper WHEN 'C' THEN d.doc_correl ELSE 0 END AS correl, d.doc_folio,                               
          DATE_FORMAT(d.doc_fecha_emision, '%d-%m-%Y') doc_fecha, per.per_nombre, d.doc_rut,          
          CASE td.tdoc_base WHEN 'NC' THEN -1 ELSE 1 END *
            SUM(CASE dd.ddoc_ind_exento WHEN 'S' THEN dd.ddoc_precio_unit * dd.ddoc_cantidad ELSE 0 END + 
                CASE dd.ddoc_ind_exento WHEN 'N' THEN dd.ddoc_precio_unit * dd.ddoc_cantidad ELSE 0 END + 
                CASE dd.ddoc_ind_exento WHEN 'N' THEN ROUND(dd.ddoc_precio_unit * dd.ddoc_cantidad * porcIVA / 100.0) ELSE 0 END) AS total,          
          (SELECT CASE WHEN ABS(SUM(dc.dco_haber) - SUM(dc.dco_debe)) <= 1
                       THEN DATE_FORMAT(MAX(c.com_fecha), '%d-%m-%Y') 
                       ELSE '' 
                  END
           FROM minerva_conta_docs dd, minerva_conta_comprobantes c, minerva_conta_detcomprobantes dc
           WHERE dd.emp_id = pEmpID 
             AND dd.doc_id = d.doc_id
             AND c.emp_id = dd.emp_id  
             AND dc.cue_id = pCueID
             AND dc.com_id = c.com_id
             AND dc.dco_nrodoc = dd.doc_folio
             AND dc.rdc_codigo = dd.doc_rut           
             AND dc.tdoc_id = dd.tdoc_id) AS fecha_pago,
          td.tdoc_nombre, 
          MAX(td.tdoc_base) AS tdoc_base,
          rel.com_id,
          d.doc_correl
    FROM minerva_conta_docs d, minerva_conta_detdocs dd, minerva_conta_personas per, minerva_conta_tiposdocumento td, minerva_conta_rel_doc_comp rel                       
    WHERE d.doc_fecha_contable BETWEEN fdesde AND fhasta     
      AND d.doc_id = dd.doc_id
      AND d.doc_tipo_oper = pTipoOper
      AND per.per_id = d.per_id
      AND td.tdoc_id = d.tdoc_id
      AND d.emp_id = pEmpID
      AND td.emp_id = d.emp_id  
		AND rel.emp_id = d.emp_id
		AND rel.doc_id = d.doc_id    
    GROUP BY d.doc_id, d.doc_folio, DATE_FORMAT(d.doc_fecha_emision, '%d-%m-%Y'), per.per_nombre, d.doc_rut, td.tdoc_nombre, rel.com_id, d.doc_correl
    ORDER BY td.tdoc_nombre, d.doc_correl;
  
  
  SET pRetMsg = '1 OK';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasArbolCategoriaProductos` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasArbolCategoriaProductos`()
BEGIN
	SELECT A.id, A.nombre, A.padre_id, A.codigo, A.descripcion FROM arbol_categoria_productos AS A ORDER BY A.descripcion;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasArbolCuentasContables` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `todasArbolCuentasContables`()
BEGIN
	SELECT 
    A.cta_contable AS id, 
    A.descripcion AS nombre, 
    A.padre_cta_contable AS padre_id 
  FROM ctas_contables AS A order by A.cta_contable, A.descripcion asc;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasBodegas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `todasBodegas`()
BEGIN
  SELECT
    B.id,
    B.id_sucursal,
    B.numero_bodega,
    B.nombre_bodega,
    B.estado_bodega
  FROM bodegas AS B;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasCajas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasCajas`()
BEGIN
  SELECT
    C.id_caja,
    C.nombre_caja,
    C.id_sucursal,
    C.mac_address_asignada,
    C.monto_apertura
  FROM cajas AS C;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasCiudades` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasCiudades`()
BEGIN
	SELECT C.ciu_id , C.ciu_nombre, C.pais_id FROM ciudades AS C;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasComunas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasComunas`()
BEGIN
	SELECT C.comu_id, C.comu_nombre, C.reg_id, C.comu_orden  
	FROM comunas AS C
	ORDER BY C.comu_nombre ASC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasListaPrecios` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasListaPrecios`()
BEGIN
	SELECT 
		L.id,
		L.numero_lista,
		L.codigo_producto,
		L.codigo_barra,
		L.margen_comercializacion,
		L.codigo_empresa
	FROM listasprecios AS L;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasMarcas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasMarcas`()
BEGIN
  SELECT
    M.id_marcas,
    M.desc_marcas
  FROM marcas AS M
  ORDER BY M.desc_marcas ASC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasMonedas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasMonedas`()
BEGIN
  SELECT M.id, M.nombre FROM monedas AS M;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasRegiones` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasRegiones`()
BEGIN
  SELECT
    R.reg_id,
    R.reg_nombre
  FROM regiones AS R;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasSucursales` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasSucursales`()
BEGIN 
	SELECT
		S.id,
		S.nombre,
		S.direccion,
		S.comuna,
		S.cuidad,
		buscarComunaNombreByID(S.comuna) AS comuna_nombre, 
		buscarCiudadNombreByID(S.cuidad) AS ciudad_nombre
	FROM sucursales as S;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todasUnidades` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todasUnidades`()
BEGIN
  SELECT
    U.id_unidades,
    U.desc_unidades
  FROM unidades AS U;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todosBancos` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todosBancos`()
BEGIN
  SELECT
    B.id_bancos,
    B.cod_banco,
    B.nom_banco
  FROM bancos AS B
  ;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todosConceptoCajas` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todosConceptoCajas`()
BEGIN
  SELECT
   C.id,
   C.nombre,
   C.tipo,
   C.cuenta_contable
  FROM conceptos_ingresos_egresos_caja AS C
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todosConceptos` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todosConceptos`()
BEGIN
  SELECT
   C.id,
   C.nombre,
   C.sigla,
   C.cuenta_contable
  FROM conceptos AS C
  ;END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todosDocumentosTributarios` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todosDocumentosTributarios`()
BEGIN
	SELECT D.id AS id,
	 D.codigo_documento AS codigo,
	 D.descripcion_documento AS descripcion,
	 D.aplica_iva AS aplica_iva,
   D.descripcion_documento_abreviada,
   D.descripcion_documento_abreviada_2
 FROM documentos_tributarios AS D;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todosDocumentosTributariosImpresion` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todosDocumentosTributariosImpresion`()
BEGIN
	SELECT 
   D.id AS id,
   S.id AS id_sub,
	 D.codigo_documento AS codigo,
	 CONCAT(D.descripcion_documento, ' ', S.descripcion) AS descripcion,
   S.sub_codigo_documento AS sub_codigo
	FROM documentos_tributarios AS D
  INNER JOIN sub_documentos_tributarios AS S
  ON D.codigo_documento = S.codigo_documento
  WHERE S.disponible_impresion = '1'
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todosDocumentosTributariosVenta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `todosDocumentosTributariosVenta`()
BEGIN
	SELECT D.id AS id,
	 D.codigo_documento AS codigo,
	 D.descripcion_documento AS descripcion,
	 D.aplica_iva AS aplica_iva 
	FROM documentos_tributarios AS D
  WHERE D.disponible_venta = '1'
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `todosUnidadNegocio` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `todosUnidadNegocio`()
BEGIN
  SELECT 
    UN.id,
    UN.descripcion
  FROM unidades_negocio AS UN;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TraspasoContabPitagoras` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `TraspasoContabPitagoras`()
BEGIN
  DECLARE id_empresa_var INT(11) DEFAULT 252;
  
  -- Elimina contenido de tablas
  TRUNCATE `contab_diario_cabecera`;
  TRUNCATE `contab_diario_detalle`;
  
  INSERT INTO contab_diario_cabecera (`id`,`tipo_comprobante`, `fecha_comprobante`, `numero_comprobante`, `glosa_comprobante`, `vigente`) 
   SELECT
    C.com_id AS id_comprobante,
    (
    CASE C.tco_id 
     WHEN 0 THEN 'A' 
     WHEN 1 THEN 'I'
     WHEN 2 THEN 'E'
     WHEN 3 THEN 'T'
     ELSE 'X'
    END
    ) AS tipo_comprobante,
    C.com_fecha fecha,
    C.com_numero AS numero_comprobante,
    C.com_glosa AS glosa,
    '1' AS vigencia
  FROM contab_comprobantes AS C WHERE emp_id = id_empresa_var
  ;
  
  INSERT INTO contab_diario_detalle (`id_diario_cabecera`, `cuenta_contable`, `glosa_detalle`, `debe`, `haber`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`) 
  SELECT
    D.com_id AS id_diario_cabecera,
    D.cue_id AS cuenta_contable,
    D.dco_glosa AS glosa,
    IFNULL(D.dco_debe, 0) AS debe,
    IFNULL(D.dco_haber, 0) AS haber,
    D.dco_nrodoc AS numero_documento,
    SUBSTRING_INDEX(D.rdc_codigo, '-', 1) AS rut,
    (
      CASE D.tdoc_id
        WHEN 109 THEN 38
        WHEN 101 THEN 33
        
        ELSE D.tdoc_id
      END
    ) AS tipo_documento,
    D.dco_nrodoc AS numero_documento,
    D.dco_fecha_cre
  FROM contab_detcomprobantes AS D
  WHERE
    D.emp_id = id_empresa_var;
  -- VALUES ('2', '3124213', 'glosa', '1', '2', '32', '3123123', '61', '123', '2019-11-29');
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `unicaVez` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `unicaVez`()
BEGIN
  DECLARE id_contab_var INT(11);
  DECLARE rut_var INT(11);
  DECLARE cheque_var INT(11);
  DECLARE numero_dte_var VARCHAR(50);
  DECLARE tipo_dte_var VARCHAR(50);
  
  DECLARE id_diario_cabeceravar INT(11);
  DECLARE fecha_documento_var DATE;
  DECLARE fecha_vencimiento_var DATE;
  
  DECLARE nombre_cuenta_var VARCHAR(200);
  
  
  DECLARE id_var INT(11);
  
  DECLARE finished INTEGER DEFAULT 0;
  DEClARE pago_cursor CURSOR FOR (
                                      SELECT R.id, R.rut, R.documento
                                      FROM contab_diario_detalle AS R 
                                      WHERE 
                                        R.cuenta_contable = 2102010 
                                        AND R.tipo_comprobante = 'E'
                                        AND (R.tipo_dte IS NULL
                                          OR R.tipo_dte = ''
                                          )
                                    );
  DECLARE CONTINUE HANDLER 
  FOR NOT FOUND SET finished = 1;
  
  OPEN pago_cursor;
 
    ciclo: LOOP
    
    FETCH pago_cursor INTO id_contab_var, rut_var, cheque_var;
    
    IF finished = 1 THEN 
      LEAVE ciclo; 
    END IF;

    SET id_var = (SELECT E.id FROM detalle_pago_proveedores AS E INNER JOIN cabecera_pago_proveedores AS C
                  ON C.num_cheque = E.num_cheque 
                  WHERE 
                    E.num_cheque = cheque_var
                    AND C.tipo_pago = 'P'
                  LIMIT 1);
    
    IF id_var IS NOT NULL THEN
      
      SELECT
        C.id_diario_cabecera,
        C.`nombre cuenta`
      INTO
        id_diario_cabeceravar,
        nombre_cuenta_var
      FROM contab_diario_detalle AS C
      WHERE C.id = id_contab_var;
      
      DELETE FROM contab_diario_detalle WHERE `id`=id_contab_var;
            

      INSERT INTO contab_diario_detalle
      (`id_diario_cabecera`, `cuenta_contable`, `nombre cuenta`, `glosa_detalle`, `debe`, `documento`, `rut`, `tipo_dte`, `numero_dte`, `fecha_documento`, `fecha_vencimiento`,`tipo_comprobante`) 
      SELECT id_diario_cabeceravar, '2102010', nombre_cuenta_var, 'PAGO FACTURA', IF(D.tipo_doc_ref = 61, D.monto_documento*-1, D.monto_documento),  cheque_var, rut_var, D.tipo_doc_ref, D.num_documento_ref, D.fecha_documento_ref, D.fecha_vcto_documento, 'E'
      FROM detalle_pago_proveedores AS D WHERE D.num_cheque = cheque_var;

    END IF;


    END LOOP ciclo;
  
  CLOSE pago_cursor;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `unicaVezPagoProveedores` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user_remoto`@`%` PROCEDURE `unicaVezPagoProveedores`()
BEGIN
  UPDATE   contab_diario_detalle AS D 
  INNER JOIN contab_diario_detalle AS C
    ON D.id_diario_cabecera = C.id_diario_cabecera AND (C.cuenta_contable = '1103010' OR C.cuenta_contable = '1103012')
  SET D.documento = C.documento,
  D.fecha_documento = C.fecha_documento,
  D.fecha_vencimiento = C.fecha_vencimiento,
  D.fecha_cobro = C.fecha_cobro
            WHERE  
              FUNCDiarioOrigen(D.id) = 'PAGOPROVEEDORPARCIAL'
              AND CAST(D.documento AS CHAR) = D.numero_dte
              ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `validaMAC` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `validaMAC`(
	IN `param_mac` CHAR(50)

)
BEGIN
  DECLARE id_empresa int(11); 
  DECLARE id_sucursal int(11);
  DECLARE nombre_sucursal char(50);
  DECLARE id_bodega int(11);
  DECLARE numero_bodega int(11);
  DECLARE nombre_bodega char(100);
  DECLARE id_caja int(11);
  DECLARE nombre_caja varchar(100);
  
  SELECT 
    R.empresa_id AS empresa, 
    R.local_id AS `local` 
  INTO
    id_empresa,
    id_sucursal
  FROM relacion_sucursal_pc R WHERE mac_address = param_mac LIMIT 1;
  
  SELECT
    S.nombre
  INTO
    nombre_sucursal
  FROM sucursales AS S WHERE S.id = id_sucursal LIMIT 1;
  
  SELECT 
    B.id,
    B.numero_bodega,
    B.nombre_bodega
  INTO
    id_bodega,
    numero_bodega,
    nombre_bodega
  FROM bodegas AS B WHERE B.id = idBodegaDesdeSucursal(id_sucursal) LIMIT 1;
  
  SELECT
    C.id_caja,
    C.nombre_caja
  INTO 
    id_caja,
    nombre_caja
  FROM cajas AS C WHERE C.mac_address_asignada = param_mac LIMIT 1;
  
  SELECT
    IFNULL(id_empresa, 0) AS id_empresa,
    IFNULL(id_sucursal, 0) AS id_sucursal,
    nombre_sucursal,
    id_bodega,
    numero_bodega,
    nombre_bodega,
    IFNULL(id_caja, 0) AS id_caja,
    IFNULL(nombre_caja, "") AS nombre_caja;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `valuser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `valuser`(
	IN `param_user` VARCHAR(6)

,
	IN `param_clave` VARCHAR(50)
)
BEGIN
	DECLARE nombre_usuario VARCHAR(100) DEFAULT (SELECT usuario_user_name FROM usuarios  WHERE usuario_user_name = param_user);

	IF nombre_usuario IS NOT NULL THEN
		IF (SELECT U.usuario_id FROM usuarios U WHERE nombre_usuario = param_user and  U.usuario_clave=param_clave Limit 1) IS NOT NULL THEN
			SELECT 1; 
		ELSE
			SELECT 2; 
		END IF;
		
	ELSE
		SELECT 0; 
	END IF;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `VincularPagoConCompra` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `VincularPagoConCompra`(
	IN `param_id_comprobante` INT
)
BEGIN
  
  INSERT INTO relacion_comprobantes_compra_pagos_dte (`id_contab_diario_detalle_1`, `id_contab_diario_detalle_2`, fecha_documento_1)
  SELECT C2.id AS id_compra , C.id AS id_pago, C2.fecha_documento
  FROM contab_diario_detalle AS C 
  INNER JOIN contab_diario_detalle AS C2
  ON
    C.tipo_dte = C2.tipo_dte
    AND C.numero_dte = C2.numero_dte
    AND C.rut = C2.rut
  WHERE  
    C.id_diario_cabecera  = param_id_comprobante
    AND C.tipo_dte <> ''
    AND C.tipo_dte IS NOT NULL
    AND C.numero_dte <> ''
    AND C.numero_dte IS NOT NULL
    AND C.rut <> 0
    AND C.rut IS NOT NULL
    AND C2.fecha_documento IS NOT NULL
    AND C.id <> C2.id
    -- AND FUNCDiarioOrigen(C.id) = 'PAGOPROVEEDORPARCIAL'
    -- AND FUNCDiarioOrigen(C2.id) = 'COMPRA'
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `warning` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`pitagoras_user`@`localhost` PROCEDURE `warning`(
	IN `param_text` VARCHAR(250)

)
    COMMENT 'Es una alerta, se puede marcar para que no se muestre, no se si detiene los procedimeintos para el rollback'
BEGIN
SIGNAL SQLSTATE '01000'
      SET MESSAGE_TEXT = param_text;
      
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-01-17 17:13:50
